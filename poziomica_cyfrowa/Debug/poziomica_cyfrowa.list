
poziomica_cyfrowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08009608  08009608  00019608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb4  08009bb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bbc  08009bbc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bc0  08009bc0  00019bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001e0  08009da4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08009da4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7e1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e25  00000000  00000000  0002c9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002291e  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb9c  00000000  00000000  00052586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca96  00000000  00000000  00061122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012dbb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004054  00000000  00000000  0012dc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080095f0 	.word	0x080095f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080095f0 	.word	0x080095f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <MX_GPIO_Init+0x128>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a42      	ldr	r2, [pc, #264]	; (8001160 <MX_GPIO_Init+0x128>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b40      	ldr	r3, [pc, #256]	; (8001160 <MX_GPIO_Init+0x128>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <MX_GPIO_Init+0x128>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <MX_GPIO_Init+0x128>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <MX_GPIO_Init+0x128>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <MX_GPIO_Init+0x128>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a34      	ldr	r2, [pc, #208]	; (8001160 <MX_GPIO_Init+0x128>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <MX_GPIO_Init+0x128>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_GPIO_Init+0x128>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <MX_GPIO_Init+0x128>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_GPIO_Init+0x128>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Led_R1_Pin|Led_Y2_Pin|Led_G22_Pin
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80010c4:	4827      	ldr	r0, [pc, #156]	; (8001164 <MX_GPIO_Init+0x12c>)
 80010c6:	f001 fc7b 	bl	80029c0 <HAL_GPIO_WritePin>
                          |Led_G1_Pin|Led_R33_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_Y11_Pin|Led_R22_Pin|Led_Y22_Pin|Led_R11_Pin
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80010d0:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_GPIO_Init+0x130>)
 80010d2:	f001 fc75 	bl	80029c0 <HAL_GPIO_WritePin>
                          |Led_Y1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led_R2_Pin|Led_G2_Pin|Led_R3_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_GPIO_Init+0x134>)
 80010de:	f001 fc6f 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	481c      	ldr	r0, [pc, #112]	; (800116c <MX_GPIO_Init+0x134>)
 80010fa:	f001 facd 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Led_R1_Pin|Led_Y2_Pin|Led_G22_Pin
 80010fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001102:	617b      	str	r3, [r7, #20]
                          |Led_G1_Pin|Led_R33_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_GPIO_Init+0x12c>)
 8001118:	f001 fabe 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Led_Y11_Pin|Led_R22_Pin|Led_Y22_Pin|Led_R11_Pin
 800111c:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001120:	617b      	str	r3, [r7, #20]
                          |Led_Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_GPIO_Init+0x130>)
 8001136:	f001 faaf 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Led_R2_Pin|Led_G2_Pin|Led_R3_Pin;
 800113a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_GPIO_Init+0x134>)
 8001154:	f001 faa0 	bl	8002698 <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800

08001170 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <MX_I2C1_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_I2C1_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_I2C1_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_I2C1_Init+0x50>)
 80011ae:	f001 fc21 	bl	80029f4 <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 ff26 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001fc 	.word	0x200001fc
 80011c4:	40005400 	.word	0x40005400
 80011c8:	00061a80 	.word	0x00061a80

080011cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_I2C_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12c      	bne.n	8001248 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_I2C_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_I2C_MspInit+0x88>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_I2C_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800120a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121c:	2304      	movs	r3, #4
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <HAL_I2C_MspInit+0x8c>)
 8001228:	f001 fa36 	bl	8002698 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_I2C_MspInit+0x88>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_I2C_MspInit+0x88>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_I2C_MspInit+0x88>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005400 	.word	0x40005400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400

0800125c <adxl_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adxl_write (uint8_t reg, uint8_t value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 100);
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2302      	movs	r3, #2
 800127e:	21a6      	movs	r1, #166	; 0xa6
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <adxl_write+0x34>)
 8001282:	f001 fcfb 	bl	8002c7c <HAL_I2C_Master_Transmit>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001fc 	.word	0x200001fc

08001294 <adxl_read_values>:

void adxl_read_values (uint8_t reg)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af04      	add	r7, sp, #16
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2306      	movs	r3, #6
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <adxl_read_values+0x2c>)
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	21a6      	movs	r1, #166	; 0xa6
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <adxl_read_values+0x30>)
 80012b4:	f001 fde0 	bl	8002e78 <HAL_I2C_Mem_Read>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000250 	.word	0x20000250
 80012c4:	200001fc 	.word	0x200001fc

080012c8 <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <adxl_read_address+0x2c>)
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	21a6      	movs	r1, #166	; 0xa6
 80012e6:	4804      	ldr	r0, [pc, #16]	; (80012f8 <adxl_read_address+0x30>)
 80012e8:	f001 fdc6 	bl	8002e78 <HAL_I2C_Mem_Read>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000256 	.word	0x20000256
 80012f8:	200001fc 	.word	0x200001fc

080012fc <adxl_init>:

void adxl_init (void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	adxl_read_address (0x00); // read the DEV ID
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ffe1 	bl	80012c8 <adxl_read_address>
	HAL_Delay(50);
 8001306:	2032      	movs	r0, #50	; 0x32
 8001308:	f001 f8bc 	bl	8002484 <HAL_Delay>
	adxl_write (0x31, 0x01);  // data_format range= +- 4g
 800130c:	2101      	movs	r1, #1
 800130e:	2031      	movs	r0, #49	; 0x31
 8001310:	f7ff ffa4 	bl	800125c <adxl_write>
	HAL_Delay(50);
 8001314:	2032      	movs	r0, #50	; 0x32
 8001316:	f001 f8b5 	bl	8002484 <HAL_Delay>
	adxl_write (0x2d, 0x00);  // reset all bits
 800131a:	2100      	movs	r1, #0
 800131c:	202d      	movs	r0, #45	; 0x2d
 800131e:	f7ff ff9d 	bl	800125c <adxl_write>
	HAL_Delay(50);
 8001322:	2032      	movs	r0, #50	; 0x32
 8001324:	f001 f8ae 	bl	8002484 <HAL_Delay>
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
 8001328:	2108      	movs	r1, #8
 800132a:	202d      	movs	r0, #45	; 0x2d
 800132c:	f7ff ff96 	bl	800125c <adxl_write>
	HAL_Delay(50);
 8001330:	2032      	movs	r0, #50	; 0x32
 8001332:	f001 f8a7 	bl	8002484 <HAL_Delay>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <tx_send>:

void tx_send(char *tx, uint16_t len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (const uint8_t *) tx, len, 1000);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <tx_send+0x24>)
 8001352:	f003 f934 	bl	80045be <HAL_UART_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200002ec 	.word	0x200002ec

08001364 <led_check>:

void led_check(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	48a2      	ldr	r0, [pc, #648]	; (80015f8 <led_check+0x294>)
 8001370:	f001 fb26 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8001374:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001378:	f001 f884 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	489e      	ldr	r0, [pc, #632]	; (80015fc <led_check+0x298>)
 8001382:	f001 fb1d 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138c:	489a      	ldr	r0, [pc, #616]	; (80015f8 <led_check+0x294>)
 800138e:	f001 fb17 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8001392:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001396:	f001 f875 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4898      	ldr	r0, [pc, #608]	; (8001600 <led_check+0x29c>)
 80013a0:	f001 fb0e 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	4895      	ldr	r0, [pc, #596]	; (8001600 <led_check+0x29c>)
 80013ac:	f001 fb08 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80013b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013b4:	f001 f866 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	488e      	ldr	r0, [pc, #568]	; (80015f8 <led_check+0x294>)
 80013be:	f001 faff 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2110      	movs	r1, #16
 80013c6:	488e      	ldr	r0, [pc, #568]	; (8001600 <led_check+0x29c>)
 80013c8:	f001 fafa 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80013cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013d0:	f001 f858 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2140      	movs	r1, #64	; 0x40
 80013d8:	4887      	ldr	r0, [pc, #540]	; (80015f8 <led_check+0x294>)
 80013da:	f001 faf1 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2120      	movs	r1, #32
 80013e2:	4887      	ldr	r0, [pc, #540]	; (8001600 <led_check+0x29c>)
 80013e4:	f001 faec 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80013e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013ec:	f001 f84a 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4881      	ldr	r0, [pc, #516]	; (80015fc <led_check+0x298>)
 80013f6:	f001 fae3 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	4880      	ldr	r0, [pc, #512]	; (8001600 <led_check+0x29c>)
 8001400:	f001 fade 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8001404:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001408:	f001 f83c 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	487a      	ldr	r0, [pc, #488]	; (80015fc <led_check+0x298>)
 8001414:	f001 fad4 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141e:	4876      	ldr	r0, [pc, #472]	; (80015f8 <led_check+0x294>)
 8001420:	f001 face 	bl	80029c0 <HAL_GPIO_WritePin>

	HAL_Delay(400);
 8001424:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001428:	f001 f82c 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001432:	4871      	ldr	r0, [pc, #452]	; (80015f8 <led_check+0x294>)
 8001434:	f001 fac4 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	486f      	ldr	r0, [pc, #444]	; (80015fc <led_check+0x298>)
 800143e:	f001 fabf 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001448:	486b      	ldr	r0, [pc, #428]	; (80015f8 <led_check+0x294>)
 800144a:	f001 fab9 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	486b      	ldr	r0, [pc, #428]	; (8001600 <led_check+0x29c>)
 8001454:	f001 fab4 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145e:	4868      	ldr	r0, [pc, #416]	; (8001600 <led_check+0x29c>)
 8001460:	f001 faae 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4863      	ldr	r0, [pc, #396]	; (80015f8 <led_check+0x294>)
 800146a:	f001 faa9 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2110      	movs	r1, #16
 8001472:	4863      	ldr	r0, [pc, #396]	; (8001600 <led_check+0x29c>)
 8001474:	f001 faa4 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2140      	movs	r1, #64	; 0x40
 800147c:	485e      	ldr	r0, [pc, #376]	; (80015f8 <led_check+0x294>)
 800147e:	f001 fa9f 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	485e      	ldr	r0, [pc, #376]	; (8001600 <led_check+0x29c>)
 8001488:	f001 fa9a 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	485a      	ldr	r0, [pc, #360]	; (80015fc <led_check+0x298>)
 8001492:	f001 fa95 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2108      	movs	r1, #8
 800149a:	4859      	ldr	r0, [pc, #356]	; (8001600 <led_check+0x29c>)
 800149c:	f001 fa90 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a6:	4855      	ldr	r0, [pc, #340]	; (80015fc <led_check+0x298>)
 80014a8:	f001 fa8a 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	4851      	ldr	r0, [pc, #324]	; (80015f8 <led_check+0x294>)
 80014b4:	f001 fa84 	bl	80029c0 <HAL_GPIO_WritePin>

	HAL_Delay(400);
 80014b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014bc:	f000 ffe2 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c6:	484c      	ldr	r0, [pc, #304]	; (80015f8 <led_check+0x294>)
 80014c8:	f001 fa7a 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	484a      	ldr	r0, [pc, #296]	; (80015fc <led_check+0x298>)
 80014d2:	f001 fa75 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	4846      	ldr	r0, [pc, #280]	; (80015f8 <led_check+0x294>)
 80014de:	f001 fa6f 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2140      	movs	r1, #64	; 0x40
 80014e6:	4846      	ldr	r0, [pc, #280]	; (8001600 <led_check+0x29c>)
 80014e8:	f001 fa6a 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f2:	4843      	ldr	r0, [pc, #268]	; (8001600 <led_check+0x29c>)
 80014f4:	f001 fa64 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	483e      	ldr	r0, [pc, #248]	; (80015f8 <led_check+0x294>)
 80014fe:	f001 fa5f 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2110      	movs	r1, #16
 8001506:	483e      	ldr	r0, [pc, #248]	; (8001600 <led_check+0x29c>)
 8001508:	f001 fa5a 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	4839      	ldr	r0, [pc, #228]	; (80015f8 <led_check+0x294>)
 8001512:	f001 fa55 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2120      	movs	r1, #32
 800151a:	4839      	ldr	r0, [pc, #228]	; (8001600 <led_check+0x29c>)
 800151c:	f001 fa50 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4835      	ldr	r0, [pc, #212]	; (80015fc <led_check+0x298>)
 8001526:	f001 fa4b 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2108      	movs	r1, #8
 800152e:	4834      	ldr	r0, [pc, #208]	; (8001600 <led_check+0x29c>)
 8001530:	f001 fa46 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	4830      	ldr	r0, [pc, #192]	; (80015fc <led_check+0x298>)
 800153c:	f001 fa40 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001546:	482c      	ldr	r0, [pc, #176]	; (80015f8 <led_check+0x294>)
 8001548:	f001 fa3a 	bl	80029c0 <HAL_GPIO_WritePin>

	HAL_Delay(400);
 800154c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001550:	f000 ff98 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155a:	4827      	ldr	r0, [pc, #156]	; (80015f8 <led_check+0x294>)
 800155c:	f001 fa30 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4825      	ldr	r0, [pc, #148]	; (80015fc <led_check+0x298>)
 8001566:	f001 fa2b 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <led_check+0x294>)
 8001572:	f001 fa25 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2140      	movs	r1, #64	; 0x40
 800157a:	4821      	ldr	r0, [pc, #132]	; (8001600 <led_check+0x29c>)
 800157c:	f001 fa20 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001586:	481e      	ldr	r0, [pc, #120]	; (8001600 <led_check+0x29c>)
 8001588:	f001 fa1a 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <led_check+0x294>)
 8001592:	f001 fa15 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2110      	movs	r1, #16
 800159a:	4819      	ldr	r0, [pc, #100]	; (8001600 <led_check+0x29c>)
 800159c:	f001 fa10 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <led_check+0x294>)
 80015a6:	f001 fa0b 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <led_check+0x29c>)
 80015b0:	f001 fa06 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4810      	ldr	r0, [pc, #64]	; (80015fc <led_check+0x298>)
 80015ba:	f001 fa01 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2108      	movs	r1, #8
 80015c2:	480f      	ldr	r0, [pc, #60]	; (8001600 <led_check+0x29c>)
 80015c4:	f001 f9fc 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <led_check+0x298>)
 80015d0:	f001 f9f6 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <led_check+0x294>)
 80015dc:	f001 f9f0 	bl	80029c0 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 80015e0:	20c8      	movs	r0, #200	; 0xc8
 80015e2:	f000 ff4f 	bl	8002484 <HAL_Delay>
	HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <led_check+0x294>)
 80015ee:	f001 f9e7 	bl	80029c0 <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020400 	.word	0x40020400

08001604 <led>:

void led(float x)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	ed87 0a01 	vstr	s0, [r7, #4]
	x = fabs(x);
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	eef0 7ae7 	vabs.f32	s15, s15
 8001616:	edc7 7a01 	vstr	s15, [r7, #4]
	if (x <= 10)
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d846      	bhi.n	80016ba <led+0xb6>
	{
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001632:	48c2      	ldr	r0, [pc, #776]	; (800193c <led+0x338>)
 8001634:	f001 f9c4 	bl	80029c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	48c0      	ldr	r0, [pc, #768]	; (8001940 <led+0x33c>)
 800163e:	f001 f9bf 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001648:	48bc      	ldr	r0, [pc, #752]	; (800193c <led+0x338>)
 800164a:	f001 f9b9 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	48bc      	ldr	r0, [pc, #752]	; (8001944 <led+0x340>)
 8001654:	f001 f9b4 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165e:	48b9      	ldr	r0, [pc, #740]	; (8001944 <led+0x340>)
 8001660:	f001 f9ae 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	48b4      	ldr	r0, [pc, #720]	; (800193c <led+0x338>)
 800166a:	f001 f9a9 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2110      	movs	r1, #16
 8001672:	48b4      	ldr	r0, [pc, #720]	; (8001944 <led+0x340>)
 8001674:	f001 f9a4 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	48af      	ldr	r0, [pc, #700]	; (800193c <led+0x338>)
 800167e:	f001 f99f 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2120      	movs	r1, #32
 8001686:	48af      	ldr	r0, [pc, #700]	; (8001944 <led+0x340>)
 8001688:	f001 f99a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	48ab      	ldr	r0, [pc, #684]	; (8001940 <led+0x33c>)
 8001692:	f001 f995 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2108      	movs	r1, #8
 800169a:	48aa      	ldr	r0, [pc, #680]	; (8001944 <led+0x340>)
 800169c:	f001 f990 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	48a6      	ldr	r0, [pc, #664]	; (8001940 <led+0x33c>)
 80016a8:	f001 f98a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b2:	48a2      	ldr	r0, [pc, #648]	; (800193c <led+0x338>)
 80016b4:	f001 f984 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_SET);
	}
}
 80016b8:	e1e6      	b.n	8001a88 <led+0x484>
	else if (x <= 40)
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001948 <led+0x344>
 80016c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d846      	bhi.n	800175a <led+0x156>
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d2:	489a      	ldr	r0, [pc, #616]	; (800193c <led+0x338>)
 80016d4:	f001 f974 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	4898      	ldr	r0, [pc, #608]	; (8001940 <led+0x33c>)
 80016de:	f001 f96f 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e8:	4894      	ldr	r0, [pc, #592]	; (800193c <led+0x338>)
 80016ea:	f001 f969 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	4894      	ldr	r0, [pc, #592]	; (8001944 <led+0x340>)
 80016f4:	f001 f964 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fe:	4891      	ldr	r0, [pc, #580]	; (8001944 <led+0x340>)
 8001700:	f001 f95e 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	488c      	ldr	r0, [pc, #560]	; (800193c <led+0x338>)
 800170a:	f001 f959 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2110      	movs	r1, #16
 8001712:	488c      	ldr	r0, [pc, #560]	; (8001944 <led+0x340>)
 8001714:	f001 f954 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	4887      	ldr	r0, [pc, #540]	; (800193c <led+0x338>)
 800171e:	f001 f94f 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2120      	movs	r1, #32
 8001726:	4887      	ldr	r0, [pc, #540]	; (8001944 <led+0x340>)
 8001728:	f001 f94a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	4883      	ldr	r0, [pc, #524]	; (8001940 <led+0x33c>)
 8001732:	f001 f945 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2108      	movs	r1, #8
 800173a:	4882      	ldr	r0, [pc, #520]	; (8001944 <led+0x340>)
 800173c:	f001 f940 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001746:	487e      	ldr	r0, [pc, #504]	; (8001940 <led+0x33c>)
 8001748:	f001 f93a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001752:	487a      	ldr	r0, [pc, #488]	; (800193c <led+0x338>)
 8001754:	f001 f934 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8001758:	e196      	b.n	8001a88 <led+0x484>
	else if (x <= 80)
 800175a:	edd7 7a01 	vldr	s15, [r7, #4]
 800175e:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800194c <led+0x348>
 8001762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d846      	bhi.n	80017fa <led+0x1f6>
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001772:	4872      	ldr	r0, [pc, #456]	; (800193c <led+0x338>)
 8001774:	f001 f924 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	4870      	ldr	r0, [pc, #448]	; (8001940 <led+0x33c>)
 800177e:	f001 f91f 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001788:	486c      	ldr	r0, [pc, #432]	; (800193c <led+0x338>)
 800178a:	f001 f919 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2140      	movs	r1, #64	; 0x40
 8001792:	486c      	ldr	r0, [pc, #432]	; (8001944 <led+0x340>)
 8001794:	f001 f914 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	4869      	ldr	r0, [pc, #420]	; (8001944 <led+0x340>)
 80017a0:	f001 f90e 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	4864      	ldr	r0, [pc, #400]	; (800193c <led+0x338>)
 80017aa:	f001 f909 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	4864      	ldr	r0, [pc, #400]	; (8001944 <led+0x340>)
 80017b4:	f001 f904 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	485f      	ldr	r0, [pc, #380]	; (800193c <led+0x338>)
 80017be:	f001 f8ff 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2120      	movs	r1, #32
 80017c6:	485f      	ldr	r0, [pc, #380]	; (8001944 <led+0x340>)
 80017c8:	f001 f8fa 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	485b      	ldr	r0, [pc, #364]	; (8001940 <led+0x33c>)
 80017d2:	f001 f8f5 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2108      	movs	r1, #8
 80017da:	485a      	ldr	r0, [pc, #360]	; (8001944 <led+0x340>)
 80017dc:	f001 f8f0 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e6:	4856      	ldr	r0, [pc, #344]	; (8001940 <led+0x33c>)
 80017e8:	f001 f8ea 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f2:	4852      	ldr	r0, [pc, #328]	; (800193c <led+0x338>)
 80017f4:	f001 f8e4 	bl	80029c0 <HAL_GPIO_WritePin>
}
 80017f8:	e146      	b.n	8001a88 <led+0x484>
	else if (x <= 110)
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001950 <led+0x34c>
 8001802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	d846      	bhi.n	800189a <led+0x296>
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001812:	484a      	ldr	r0, [pc, #296]	; (800193c <led+0x338>)
 8001814:	f001 f8d4 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	4848      	ldr	r0, [pc, #288]	; (8001940 <led+0x33c>)
 800181e:	f001 f8cf 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001828:	4844      	ldr	r0, [pc, #272]	; (800193c <led+0x338>)
 800182a:	f001 f8c9 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	4844      	ldr	r0, [pc, #272]	; (8001944 <led+0x340>)
 8001834:	f001 f8c4 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183e:	4841      	ldr	r0, [pc, #260]	; (8001944 <led+0x340>)
 8001840:	f001 f8be 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	483c      	ldr	r0, [pc, #240]	; (800193c <led+0x338>)
 800184a:	f001 f8b9 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2110      	movs	r1, #16
 8001852:	483c      	ldr	r0, [pc, #240]	; (8001944 <led+0x340>)
 8001854:	f001 f8b4 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	4837      	ldr	r0, [pc, #220]	; (800193c <led+0x338>)
 800185e:	f001 f8af 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	4837      	ldr	r0, [pc, #220]	; (8001944 <led+0x340>)
 8001868:	f001 f8aa 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	4833      	ldr	r0, [pc, #204]	; (8001940 <led+0x33c>)
 8001872:	f001 f8a5 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2108      	movs	r1, #8
 800187a:	4832      	ldr	r0, [pc, #200]	; (8001944 <led+0x340>)
 800187c:	f001 f8a0 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001886:	482e      	ldr	r0, [pc, #184]	; (8001940 <led+0x33c>)
 8001888:	f001 f89a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001892:	482a      	ldr	r0, [pc, #168]	; (800193c <led+0x338>)
 8001894:	f001 f894 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8001898:	e0f6      	b.n	8001a88 <led+0x484>
	else if (x <= 150)
 800189a:	edd7 7a01 	vldr	s15, [r7, #4]
 800189e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001954 <led+0x350>
 80018a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	d857      	bhi.n	800195c <led+0x358>
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b2:	4822      	ldr	r0, [pc, #136]	; (800193c <led+0x338>)
 80018b4:	f001 f884 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	4820      	ldr	r0, [pc, #128]	; (8001940 <led+0x33c>)
 80018be:	f001 f87f 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c8:	481c      	ldr	r0, [pc, #112]	; (800193c <led+0x338>)
 80018ca:	f001 f879 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	481c      	ldr	r0, [pc, #112]	; (8001944 <led+0x340>)
 80018d4:	f001 f874 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018de:	4819      	ldr	r0, [pc, #100]	; (8001944 <led+0x340>)
 80018e0:	f001 f86e 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	4814      	ldr	r0, [pc, #80]	; (800193c <led+0x338>)
 80018ea:	f001 f869 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2110      	movs	r1, #16
 80018f2:	4814      	ldr	r0, [pc, #80]	; (8001944 <led+0x340>)
 80018f4:	f001 f864 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <led+0x338>)
 80018fe:	f001 f85f 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	2120      	movs	r1, #32
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <led+0x340>)
 8001908:	f001 f85a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2140      	movs	r1, #64	; 0x40
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <led+0x33c>)
 8001912:	f001 f855 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2108      	movs	r1, #8
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <led+0x340>)
 800191c:	f001 f850 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <led+0x33c>)
 8001928:	f001 f84a 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001932:	4802      	ldr	r0, [pc, #8]	; (800193c <led+0x338>)
 8001934:	f001 f844 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8001938:	e0a6      	b.n	8001a88 <led+0x484>
 800193a:	bf00      	nop
 800193c:	40020000 	.word	0x40020000
 8001940:	40020800 	.word	0x40020800
 8001944:	40020400 	.word	0x40020400
 8001948:	42200000 	.word	0x42200000
 800194c:	42a00000 	.word	0x42a00000
 8001950:	42dc0000 	.word	0x42dc0000
 8001954:	43160000 	.word	0x43160000
 8001958:	43480000 	.word	0x43480000
	else if (x <= 200)
 800195c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001960:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001958 <led+0x354>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	d846      	bhi.n	80019fc <led+0x3f8>
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001974:	4846      	ldr	r0, [pc, #280]	; (8001a90 <led+0x48c>)
 8001976:	f001 f823 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	4845      	ldr	r0, [pc, #276]	; (8001a94 <led+0x490>)
 8001980:	f001 f81e 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198a:	4841      	ldr	r0, [pc, #260]	; (8001a90 <led+0x48c>)
 800198c:	f001 f818 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	4840      	ldr	r0, [pc, #256]	; (8001a98 <led+0x494>)
 8001996:	f001 f813 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a0:	483d      	ldr	r0, [pc, #244]	; (8001a98 <led+0x494>)
 80019a2:	f001 f80d 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	4839      	ldr	r0, [pc, #228]	; (8001a90 <led+0x48c>)
 80019ac:	f001 f808 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2110      	movs	r1, #16
 80019b4:	4838      	ldr	r0, [pc, #224]	; (8001a98 <led+0x494>)
 80019b6:	f001 f803 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2140      	movs	r1, #64	; 0x40
 80019be:	4834      	ldr	r0, [pc, #208]	; (8001a90 <led+0x48c>)
 80019c0:	f000 fffe 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	2120      	movs	r1, #32
 80019c8:	4833      	ldr	r0, [pc, #204]	; (8001a98 <led+0x494>)
 80019ca:	f000 fff9 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	4830      	ldr	r0, [pc, #192]	; (8001a94 <led+0x490>)
 80019d4:	f000 fff4 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2108      	movs	r1, #8
 80019dc:	482e      	ldr	r0, [pc, #184]	; (8001a98 <led+0x494>)
 80019de:	f000 ffef 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e8:	482a      	ldr	r0, [pc, #168]	; (8001a94 <led+0x490>)
 80019ea:	f000 ffe9 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f4:	4826      	ldr	r0, [pc, #152]	; (8001a90 <led+0x48c>)
 80019f6:	f000 ffe3 	bl	80029c0 <HAL_GPIO_WritePin>
}
 80019fa:	e045      	b.n	8001a88 <led+0x484>
		HAL_GPIO_WritePin(Led_G1_GPIO_Port, Led_G1_Pin, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a02:	4823      	ldr	r0, [pc, #140]	; (8001a90 <led+0x48c>)
 8001a04:	f000 ffdc 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G2_GPIO_Port, Led_G2_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <led+0x490>)
 8001a0e:	f000 ffd7 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_G22_GPIO_Port, Led_G22_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <led+0x48c>)
 8001a1a:	f000 ffd1 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y1_GPIO_Port, Led_Y1_Pin, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2140      	movs	r1, #64	; 0x40
 8001a22:	481d      	ldr	r0, [pc, #116]	; (8001a98 <led+0x494>)
 8001a24:	f000 ffcc 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y11_GPIO_Port, Led_Y11_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2e:	481a      	ldr	r0, [pc, #104]	; (8001a98 <led+0x494>)
 8001a30:	f000 ffc6 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y2_GPIO_Port, Led_Y2_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	4815      	ldr	r0, [pc, #84]	; (8001a90 <led+0x48c>)
 8001a3a:	f000 ffc1 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Y22_GPIO_Port, Led_Y22_Pin, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2110      	movs	r1, #16
 8001a42:	4815      	ldr	r0, [pc, #84]	; (8001a98 <led+0x494>)
 8001a44:	f000 ffbc 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R1_GPIO_Port, Led_R1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	4810      	ldr	r0, [pc, #64]	; (8001a90 <led+0x48c>)
 8001a4e:	f000 ffb7 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R11_GPIO_Port, Led_R11_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2120      	movs	r1, #32
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <led+0x494>)
 8001a58:	f000 ffb2 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R2_GPIO_Port, Led_R2_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2140      	movs	r1, #64	; 0x40
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <led+0x490>)
 8001a62:	f000 ffad 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R22_GPIO_Port, Led_R22_Pin, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2108      	movs	r1, #8
 8001a6a:	480b      	ldr	r0, [pc, #44]	; (8001a98 <led+0x494>)
 8001a6c:	f000 ffa8 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R3_GPIO_Port, Led_R3_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <led+0x490>)
 8001a78:	f000 ffa2 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_R33_GPIO_Port, Led_R33_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <led+0x48c>)
 8001a84:	f000 ff9c 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020400 	.word	0x40020400

08001a9c <adxl_check>:

void adxl_check(int16_t x, int16_t y, int16_t z) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	80bb      	strh	r3, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	807b      	strh	r3, [r7, #2]
	if (x == 0 && y == 0 && z == 0) {
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d152      	bne.n	8001b5c <adxl_check+0xc0>
 8001ab6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d14e      	bne.n	8001b5c <adxl_check+0xc0>
 8001abe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d14a      	bne.n	8001b5c <adxl_check+0xc0>
		sprintf((char *)tx, "Bład inicjalizacji adxl...\n");
 8001ac6:	492e      	ldr	r1, [pc, #184]	; (8001b80 <adxl_check+0xe4>)
 8001ac8:	482e      	ldr	r0, [pc, #184]	; (8001b84 <adxl_check+0xe8>)
 8001aca:	f003 ff9f 	bl	8005a0c <siprintf>
		tx_send(tx, strlen((char const *)tx));
 8001ace:	482d      	ldr	r0, [pc, #180]	; (8001b84 <adxl_check+0xe8>)
 8001ad0:	f7fe fb9e 	bl	8000210 <strlen>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482a      	ldr	r0, [pc, #168]	; (8001b84 <adxl_check+0xe8>)
 8001adc:	f7ff fc2e 	bl	800133c <tx_send>
		while (x == 0 && y == 0 && z == 0) {
 8001ae0:	e022      	b.n	8001b28 <adxl_check+0x8c>
			adxl_init();
 8001ae2:	f7ff fc0b 	bl	80012fc <adxl_init>
			HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
 8001ae8:	f000 fccc 	bl	8002484 <HAL_Delay>
			x = ((data_rec[1] << 8 ) | data_rec[0]);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <adxl_check+0xec>)
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <adxl_check+0xec>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
			y = ((data_rec[3] << 8 ) | data_rec[2]);
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <adxl_check+0xec>)
 8001b00:	78db      	ldrb	r3, [r3, #3]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <adxl_check+0xec>)
 8001b08:	789b      	ldrb	r3, [r3, #2]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	80bb      	strh	r3, [r7, #4]
			z = ((data_rec[5] << 8 ) | data_rec[4]);
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <adxl_check+0xec>)
 8001b12:	795b      	ldrb	r3, [r3, #5]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <adxl_check+0xec>)
 8001b1a:	791b      	ldrb	r3, [r3, #4]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	807b      	strh	r3, [r7, #2]
			HAL_Delay(200);
 8001b22:	20c8      	movs	r0, #200	; 0xc8
 8001b24:	f000 fcae 	bl	8002484 <HAL_Delay>
		while (x == 0 && y == 0 && z == 0) {
 8001b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <adxl_check+0xa4>
 8001b30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <adxl_check+0xa4>
 8001b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0d0      	beq.n	8001ae2 <adxl_check+0x46>
		}
		sprintf((char *)tx, "Inicjalizacja zakonczona!\n");
 8001b40:	4912      	ldr	r1, [pc, #72]	; (8001b8c <adxl_check+0xf0>)
 8001b42:	4810      	ldr	r0, [pc, #64]	; (8001b84 <adxl_check+0xe8>)
 8001b44:	f003 ff62 	bl	8005a0c <siprintf>
		tx_send(tx, strlen((char const *)tx));
 8001b48:	480e      	ldr	r0, [pc, #56]	; (8001b84 <adxl_check+0xe8>)
 8001b4a:	f7fe fb61 	bl	8000210 <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <adxl_check+0xe8>)
 8001b56:	f7ff fbf1 	bl	800133c <tx_send>
 8001b5a:	e00d      	b.n	8001b78 <adxl_check+0xdc>
	}
	else {
		sprintf((char *)tx, "Inicjalizacja zakonczona!\n");
 8001b5c:	490b      	ldr	r1, [pc, #44]	; (8001b8c <adxl_check+0xf0>)
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <adxl_check+0xe8>)
 8001b60:	f003 ff54 	bl	8005a0c <siprintf>
		tx_send(tx, strlen((char const *)tx));
 8001b64:	4807      	ldr	r0, [pc, #28]	; (8001b84 <adxl_check+0xe8>)
 8001b66:	f7fe fb53 	bl	8000210 <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <adxl_check+0xe8>)
 8001b72:	f7ff fbe3 	bl	800133c <tx_send>
	}
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	08009608 	.word	0x08009608
 8001b84:	20000270 	.word	0x20000270
 8001b88:	20000250 	.word	0x20000250
 8001b8c:	08009628 	.word	0x08009628

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8001b98:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9a:	f000 fc01 	bl	80023a0 <HAL_Init>
  HAL_Delay(5000);
 8001b9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ba2:	f000 fc6f 	bl	8002484 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba6:	f000 f9c1 	bl	8001f2c <SystemClock_Config>
  HAL_Delay(10);
 8001baa:	200a      	movs	r0, #10
 8001bac:	f000 fc6a 	bl	8002484 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb0:	f7ff fa42 	bl	8001038 <MX_GPIO_Init>
  HAL_Delay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f000 fc65 	bl	8002484 <HAL_Delay>
  MX_USART2_UART_Init();
 8001bba:	f000 fb55 	bl	8002268 <MX_USART2_UART_Init>
  HAL_Delay(10);
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f000 fc60 	bl	8002484 <HAL_Delay>
  MX_I2C1_Init();
 8001bc4:	f7ff fad4 	bl	8001170 <MX_I2C1_Init>
  HAL_Delay(10);
 8001bc8:	200a      	movs	r0, #10
 8001bca:	f000 fc5b 	bl	8002484 <HAL_Delay>
  /* USER CODE BEGIN 2 */
  adxl_init(); // initialize adxl
 8001bce:	f7ff fb95 	bl	80012fc <adxl_init>
  HAL_Delay(10);
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f000 fc56 	bl	8002484 <HAL_Delay>
  led_check();
 8001bd8:	f7ff fbc4 	bl	8001364 <led_check>
  HAL_Delay(10);
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f000 fc51 	bl	8002484 <HAL_Delay>
  adxl_read_values (0x32);
 8001be2:	2032      	movs	r0, #50	; 0x32
 8001be4:	f7ff fb56 	bl	8001294 <adxl_read_values>
  x = ((data_rec[1] << 8 ) | data_rec[0]);
 8001be8:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <main+0x2b0>)
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	4b93      	ldr	r3, [pc, #588]	; (8001e40 <main+0x2b0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <main+0x2b4>)
 8001bfc:	801a      	strh	r2, [r3, #0]
  y = ((data_rec[3] << 8 ) | data_rec[2]);
 8001bfe:	4b90      	ldr	r3, [pc, #576]	; (8001e40 <main+0x2b0>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <main+0x2b0>)
 8001c08:	789b      	ldrb	r3, [r3, #2]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b8d      	ldr	r3, [pc, #564]	; (8001e48 <main+0x2b8>)
 8001c12:	801a      	strh	r2, [r3, #0]
  z = ((data_rec[5] << 8 ) | data_rec[4]);
 8001c14:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <main+0x2b0>)
 8001c16:	795b      	ldrb	r3, [r3, #5]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <main+0x2b0>)
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <main+0x2bc>)
 8001c28:	801a      	strh	r2, [r3, #0]
  adxl_check(x, y, z);
 8001c2a:	4b86      	ldr	r3, [pc, #536]	; (8001e44 <main+0x2b4>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	4a85      	ldr	r2, [pc, #532]	; (8001e48 <main+0x2b8>)
 8001c32:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001c36:	4a85      	ldr	r2, [pc, #532]	; (8001e4c <main+0x2bc>)
 8001c38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff2d 	bl	8001a9c <adxl_check>
  HAL_Delay(2000);
 8001c42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c46:	f000 fc1d 	bl	8002484 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	float xm[81] = {};
 8001c4a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001c4e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8001c52:	4618      	mov	r0, r3
 8001c54:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f003 f84e 	bl	8004cfc <memset>
	float xms[81] = {};
 8001c60:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001c64:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2100      	movs	r1, #0
 8001c72:	f003 f843 	bl	8004cfc <memset>
	int a = 0, count = 1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

	for(int i=0;i<81;i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8001c88:	e0c8      	b.n	8001e1c <main+0x28c>
	adxl_read_values (0x32);
 8001c8a:	2032      	movs	r0, #50	; 0x32
 8001c8c:	f7ff fb02 	bl	8001294 <adxl_read_values>
	x = ((data_rec[1] << 8 ) | data_rec[0]);
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <main+0x2b0>)
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <main+0x2b0>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <main+0x2b4>)
 8001ca4:	801a      	strh	r2, [r3, #0]
	y = ((data_rec[3] << 8 ) | data_rec[2]);
 8001ca6:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <main+0x2b0>)
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <main+0x2b0>)
 8001cb0:	789b      	ldrb	r3, [r3, #2]
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <main+0x2b8>)
 8001cba:	801a      	strh	r2, [r3, #0]
	z = ((data_rec[5] << 8 ) | data_rec[4]);
 8001cbc:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <main+0x2b0>)
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <main+0x2b0>)
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <main+0x2bc>)
 8001cd0:	801a      	strh	r2, [r3, #0]

	xg = x * 7.8;
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <main+0x2b4>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc43 	bl	8000564 <__aeabi_i2d>
 8001cde:	a356      	add	r3, pc, #344	; (adr r3, 8001e38 <main+0x2a8>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fca8 	bl	8000638 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe ff9a 	bl	8000c28 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <main+0x2c0>)
 8001cf8:	6013      	str	r3, [r2, #0]
	yg = y * 7.8;
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <main+0x2b8>)
 8001cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc2f 	bl	8000564 <__aeabi_i2d>
 8001d06:	a34c      	add	r3, pc, #304	; (adr r3, 8001e38 <main+0x2a8>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc94 	bl	8000638 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe ff86 	bl	8000c28 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <main+0x2c4>)
 8001d20:	6013      	str	r3, [r2, #0]
	zg = z * 7.8;
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <main+0x2bc>)
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc1b 	bl	8000564 <__aeabi_i2d>
 8001d2e:	a342      	add	r3, pc, #264	; (adr r3, 8001e38 <main+0x2a8>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc80 	bl	8000638 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff72 	bl	8000c28 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a44      	ldr	r2, [pc, #272]	; (8001e58 <main+0x2c8>)
 8001d48:	6013      	str	r3, [r2, #0]

	if(count%10==0) {
 8001d4a:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <main+0x2cc>)
 8001d50:	fb83 2301 	smull	r2, r3, r3, r1
 8001d54:	109a      	asrs	r2, r3, #2
 8001d56:	17cb      	asrs	r3, r1, #31
 8001d58:	1ad2      	subs	r2, r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	1aca      	subs	r2, r1, r3
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d140      	bne.n	8001dea <main+0x25a>
	sprintf((char *)tx, "a_x = %6.2f [mg]\ta_y = %6.2f[mg]\ta_z = %6.2f [mg]\tx_mediana = %6.2f [mg]\n", xg, yg, zg, mediana);
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <main+0x2c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fc0b 	bl	8000588 <__aeabi_f2d>
 8001d72:	4682      	mov	sl, r0
 8001d74:	468b      	mov	fp, r1
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <main+0x2c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fc04 	bl	8000588 <__aeabi_f2d>
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <main+0x2c8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbfd 	bl	8000588 <__aeabi_f2d>
 8001d8e:	4680      	mov	r8, r0
 8001d90:	4689      	mov	r9, r1
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <main+0x2d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbf6 	bl	8000588 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001da4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001da8:	e9cd 4500 	strd	r4, r5, [sp]
 8001dac:	4652      	mov	r2, sl
 8001dae:	465b      	mov	r3, fp
 8001db0:	492c      	ldr	r1, [pc, #176]	; (8001e64 <main+0x2d4>)
 8001db2:	482d      	ldr	r0, [pc, #180]	; (8001e68 <main+0x2d8>)
 8001db4:	f003 fe2a 	bl	8005a0c <siprintf>
	tx_send(tx, strlen((char const *)tx));
 8001db8:	482b      	ldr	r0, [pc, #172]	; (8001e68 <main+0x2d8>)
 8001dba:	f7fe fa29 	bl	8000210 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4828      	ldr	r0, [pc, #160]	; (8001e68 <main+0x2d8>)
 8001dc6:	f7ff fab9 	bl	800133c <tx_send>
	sprintf((char *)tx, "------------------------------------------------------------------------------------------------\n");
 8001dca:	4928      	ldr	r1, [pc, #160]	; (8001e6c <main+0x2dc>)
 8001dcc:	4826      	ldr	r0, [pc, #152]	; (8001e68 <main+0x2d8>)
 8001dce:	f003 fe1d 	bl	8005a0c <siprintf>
	tx_send(tx, strlen((char const *)tx));
 8001dd2:	4825      	ldr	r0, [pc, #148]	; (8001e68 <main+0x2d8>)
 8001dd4:	f7fe fa1c 	bl	8000210 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4822      	ldr	r0, [pc, #136]	; (8001e68 <main+0x2d8>)
 8001de0:	f7ff faac 	bl	800133c <tx_send>
	count = 0 ;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	}
	count++;
 8001dea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001dee:	3301      	adds	r3, #1
 8001df0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	xm[i] = fabs(xg);
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <main+0x2c0>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dfe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001e02:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8001e06:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<81;i++) {
 8001e12:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001e16:	3301      	adds	r3, #1
 8001e18:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8001e1c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001e20:	2b50      	cmp	r3, #80	; 0x50
 8001e22:	f77f af32 	ble.w	8001c8a <main+0xfa>
	}

	for(int j=0;j<81;j++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001e2c:	e068      	b.n	8001f00 <main+0x370>
		for(int k=0;k<81;k++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001e34:	e050      	b.n	8001ed8 <main+0x348>
 8001e36:	bf00      	nop
 8001e38:	33333333 	.word	0x33333333
 8001e3c:	401f3333 	.word	0x401f3333
 8001e40:	20000250 	.word	0x20000250
 8001e44:	20000258 	.word	0x20000258
 8001e48:	2000025a 	.word	0x2000025a
 8001e4c:	2000025c 	.word	0x2000025c
 8001e50:	20000260 	.word	0x20000260
 8001e54:	20000264 	.word	0x20000264
 8001e58:	20000268 	.word	0x20000268
 8001e5c:	66666667 	.word	0x66666667
 8001e60:	2000026c 	.word	0x2000026c
 8001e64:	08009644 	.word	0x08009644
 8001e68:	20000270 	.word	0x20000270
 8001e6c:	08009690 	.word	0x08009690
			if(xms[j] < xm[k]) {
 8001e70:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001e74:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001e78:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001e88:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8001e8c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d515      	bpl.n	8001ece <main+0x33e>
				xms[j] = xm[k];
 8001ea2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001ea6:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8001eaa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001eb8:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8001ebc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	601a      	str	r2, [r3, #0]
				a=k;
 8001ec6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001eca:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		for(int k=0;k<81;k++) {
 8001ece:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001ed8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001edc:	2b50      	cmp	r3, #80	; 0x50
 8001ede:	ddc7      	ble.n	8001e70 <main+0x2e0>
			}
		}
	xm[a] = 0;
 8001ee0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001ee4:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8001ee8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
	for(int j=0;j<81;j++) {
 8001ef6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001efa:	3301      	adds	r3, #1
 8001efc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001f00:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001f04:	2b50      	cmp	r3, #80	; 0x50
 8001f06:	dd92      	ble.n	8001e2e <main+0x29e>
	}
	mediana = xms[40];
 8001f08:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001f0c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <main+0x398>)
 8001f16:	6013      	str	r3, [r2, #0]
	led(mediana);											//wprowadzam wartość mediany do funckcji
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <main+0x398>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	f7ff fb6f 	bl	8001604 <led>
  {
 8001f26:	e690      	b.n	8001c4a <main+0xba>
 8001f28:	2000026c 	.word	0x2000026c

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b094      	sub	sp, #80	; 0x50
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	2234      	movs	r2, #52	; 0x34
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fede 	bl	8004cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <SystemClock_Config+0xd4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <SystemClock_Config+0xd4>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <SystemClock_Config+0xd4>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <SystemClock_Config+0xd8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <SystemClock_Config+0xd8>)
 8001f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <SystemClock_Config+0xd8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f94:	2310      	movs	r3, #16
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001fa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001faa:	2304      	movs	r3, #4
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 f814 	bl	8003fe8 <HAL_RCC_OscConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fc6:	f000 f81f 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fca:	230f      	movs	r3, #15
 8001fcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fcb4 	bl	8003954 <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ff2:	f000 f809 	bl	8002008 <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3750      	adds	r7, #80	; 0x50
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	e7fe      	b.n	8002010 <Error_Handler+0x8>
	...

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_MspInit+0x4c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002052:	2007      	movs	r0, #7
 8002054:	f000 faec 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 f9c8 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_kill>:

int _kill(int pid, int sig)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020d2:	f002 fde9 	bl	8004ca8 <__errno>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2216      	movs	r2, #22
 80020da:	601a      	str	r2, [r3, #0]
	return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_exit>:

void _exit (int status)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffe7 	bl	80020c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020fa:	e7fe      	b.n	80020fa <_exit+0x12>

080020fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e00a      	b.n	8002124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800210e:	f3af 8000 	nop.w
 8002112:	4601      	mov	r1, r0
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	b2ca      	uxtb	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf0      	blt.n	800210e <_read+0x12>
	}

return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e009      	b.n	800215c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf1      	blt.n	8002148 <_write+0x12>
	}
	return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_close>:

int _close(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	605a      	str	r2, [r3, #4]
	return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_isatty>:

int _isatty(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	return 1;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f002 fd4e 	bl	8004ca8 <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20020000 	.word	0x20020000
 8002238:	00000400 	.word	0x00000400
 800223c:	200002e8 	.word	0x200002e8
 8002240:	20000348 	.word	0x20000348

08002244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <MX_USART2_UART_Init+0x50>)
 8002270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_USART2_UART_Init+0x4c>)
 80022a0:	f002 f940 	bl	8004524 <HAL_UART_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022aa:	f7ff fead 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200002ec 	.word	0x200002ec
 80022b8:	40004400 	.word	0x40004400

080022bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_UART_MspInit+0x84>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12b      	bne.n	8002336 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_UART_MspInit+0x88>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_UART_MspInit+0x88>)
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_MspInit+0x88>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_UART_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <HAL_UART_MspInit+0x88>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_UART_MspInit+0x88>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002316:	230c      	movs	r3, #12
 8002318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002326:	2307      	movs	r3, #7
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <HAL_UART_MspInit+0x8c>)
 8002332:	f000 f9b1 	bl	8002698 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40004400 	.word	0x40004400
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002352:	490e      	ldr	r1, [pc, #56]	; (800238c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002368:	4c0b      	ldr	r4, [pc, #44]	; (8002398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002376:	f7ff ff65 	bl	8002244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f002 fc9b 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff fc07 	bl	8001b90 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800238c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002390:	08009bc4 	.word	0x08009bc4
  ldr r2, =_sbss
 8002394:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002398:	20000344 	.word	0x20000344

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_Init+0x40>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_Init+0x40>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x40>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 f931 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fe1e 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f93b 	bl	800267e <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 f911 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000000 	.word	0x20000000
 800243c:	20000008 	.word	0x20000008
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	20000330 	.word	0x20000330

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000330 	.word	0x20000330

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff47 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff5c 	bl	8002514 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffb0 	bl	80025ec <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e165      	b.n	8002980 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	f040 8154 	bne.w	800297a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d005      	beq.n	80026ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d130      	bne.n	800274c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002720:	2201      	movs	r2, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0201 	and.w	r2, r3, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b03      	cmp	r3, #3
 8002756:	d017      	beq.n	8002788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d123      	bne.n	80027dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3208      	adds	r2, #8
 800279c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	220f      	movs	r2, #15
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80ae 	beq.w	800297a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <HAL_GPIO_Init+0x300>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a5c      	ldr	r2, [pc, #368]	; (8002998 <HAL_GPIO_Init+0x300>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <HAL_GPIO_Init+0x300>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283a:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_GPIO_Init+0x304>)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_GPIO_Init+0x308>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x21a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_GPIO_Init+0x30c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x216>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4d      	ldr	r2, [pc, #308]	; (80029a8 <HAL_GPIO_Init+0x310>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x212>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <HAL_GPIO_Init+0x314>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x20e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4b      	ldr	r2, [pc, #300]	; (80029b0 <HAL_GPIO_Init+0x318>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x20a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4a      	ldr	r2, [pc, #296]	; (80029b4 <HAL_GPIO_Init+0x31c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x206>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a49      	ldr	r2, [pc, #292]	; (80029b8 <HAL_GPIO_Init+0x320>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x202>
 8002896:	2306      	movs	r3, #6
 8002898:	e00c      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 800289a:	2307      	movs	r3, #7
 800289c:	e00a      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 800289e:	2305      	movs	r3, #5
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x21c>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_GPIO_Init+0x304>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_GPIO_Init+0x324>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a31      	ldr	r2, [pc, #196]	; (80029bc <HAL_GPIO_Init+0x324>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_GPIO_Init+0x324>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a26      	ldr	r2, [pc, #152]	; (80029bc <HAL_GPIO_Init+0x324>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_GPIO_Init+0x324>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <HAL_GPIO_Init+0x324>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_GPIO_Init+0x324>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_GPIO_Init+0x324>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f ae96 	bls.w	80026b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40013c00 	.word	0x40013c00

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e12b      	b.n	8002c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fbd6 	bl	80011cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a58:	f001 f86e 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8002a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a81      	ldr	r2, [pc, #516]	; (8002c68 <HAL_I2C_Init+0x274>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d807      	bhi.n	8002a78 <HAL_I2C_Init+0x84>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a80      	ldr	r2, [pc, #512]	; (8002c6c <HAL_I2C_Init+0x278>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e006      	b.n	8002a86 <HAL_I2C_Init+0x92>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a7d      	ldr	r2, [pc, #500]	; (8002c70 <HAL_I2C_Init+0x27c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0e7      	b.n	8002c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a78      	ldr	r2, [pc, #480]	; (8002c74 <HAL_I2C_Init+0x280>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0c9b      	lsrs	r3, r3, #18
 8002a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a6a      	ldr	r2, [pc, #424]	; (8002c68 <HAL_I2C_Init+0x274>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d802      	bhi.n	8002ac8 <HAL_I2C_Init+0xd4>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	e009      	b.n	8002adc <HAL_I2C_Init+0xe8>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_I2C_Init+0x284>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	3301      	adds	r3, #1
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	495c      	ldr	r1, [pc, #368]	; (8002c68 <HAL_I2C_Init+0x274>)
 8002af8:	428b      	cmp	r3, r1
 8002afa:	d819      	bhi.n	8002b30 <HAL_I2C_Init+0x13c>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1e59      	subs	r1, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b10:	400b      	ands	r3, r1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_I2C_Init+0x138>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1e59      	subs	r1, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2a:	e051      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	e04f      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <HAL_I2C_Init+0x168>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e012      	b.n	8002b82 <HAL_I2C_Init+0x18e>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Init+0x196>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e022      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10e      	bne.n	8002bb0 <HAL_I2C_Init+0x1bc>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e58      	subs	r0, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	440b      	add	r3, r1
 8002ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	e00f      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	0099      	lsls	r1, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	6809      	ldr	r1, [r1, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6911      	ldr	r1, [r2, #16]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	000186a0 	.word	0x000186a0
 8002c6c:	001e847f 	.word	0x001e847f
 8002c70:	003d08ff 	.word	0x003d08ff
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	10624dd3 	.word	0x10624dd3

08002c7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	461a      	mov	r2, r3
 8002c88:	460b      	mov	r3, r1
 8002c8a:	817b      	strh	r3, [r7, #10]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff fbec 	bl	800246c <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	f040 80e0 	bne.w	8002e64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2319      	movs	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	4970      	ldr	r1, [pc, #448]	; (8002e70 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fc72 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0d3      	b.n	8002e66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2C_Master_Transmit+0x50>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0cc      	b.n	8002e66 <HAL_I2C_Master_Transmit+0x1ea>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d007      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	893a      	ldrh	r2, [r7, #8]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a50      	ldr	r2, [pc, #320]	; (8002e74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fac2 	bl	80032c4 <I2C_MasterRequestWrite>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e08d      	b.n	8002e66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d60:	e066      	b.n	8002e30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fcec 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d107      	bne.n	8002d8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06b      	b.n	8002e66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11b      	bne.n	8002e04 <HAL_I2C_Master_Transmit+0x188>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	6a39      	ldr	r1, [r7, #32]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fcdc 	bl	80037c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d107      	bne.n	8002e2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e01a      	b.n	8002e66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d194      	bne.n	8002d62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	00100002 	.word	0x00100002
 8002e74:	ffff0000 	.word	0xffff0000

08002e78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e92:	f7ff faeb 	bl	800246c <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 8208 	bne.w	80032b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2319      	movs	r3, #25
 8002eac:	2201      	movs	r2, #1
 8002eae:	497b      	ldr	r1, [pc, #492]	; (800309c <HAL_I2C_Mem_Read+0x224>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fb71 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e1fb      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Mem_Read+0x56>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e1f4      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d007      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2222      	movs	r2, #34	; 0x22
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_I2C_Mem_Read+0x228>)
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f36:	88f8      	ldrh	r0, [r7, #6]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	8979      	ldrh	r1, [r7, #10]
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4603      	mov	r3, r0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa3e 	bl	80033c8 <I2C_RequestMemoryRead>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e1b0      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e184      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e164      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d11b      	bne.n	8003006 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	e144      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800301c:	e138      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b03      	cmp	r3, #3
 8003024:	f200 80f1 	bhi.w	800320a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b01      	cmp	r3, #1
 800302e:	d123      	bne.n	8003078 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fc07 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e139      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003076:	e10b      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b02      	cmp	r3, #2
 800307e:	d14e      	bne.n	800311e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	2200      	movs	r2, #0
 8003088:	4906      	ldr	r1, [pc, #24]	; (80030a4 <HAL_I2C_Mem_Read+0x22c>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa84 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e10e      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000
 80030a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311c:	e0b8      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	2200      	movs	r2, #0
 8003126:	4966      	ldr	r1, [pc, #408]	; (80032c0 <HAL_I2C_Mem_Read+0x448>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fa35 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0bf      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003146:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2200      	movs	r2, #0
 8003182:	494f      	ldr	r1, [pc, #316]	; (80032c0 <HAL_I2C_Mem_Read+0x448>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fa07 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e091      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003208:	e042      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fb1a 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e04c      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d118      	bne.n	8003290 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	f47f aec2 	bne.w	800301e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00010004 	.word	0x00010004

080032c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d006      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d003      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ec:	d108      	bne.n	8003300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00b      	b.n	8003318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b12      	cmp	r3, #18
 8003306:	d107      	bne.n	8003318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f937 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d103      	bne.n	8003348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e035      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003354:	d108      	bne.n	8003368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	e01b      	b.n	80033a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003368:	897b      	ldrh	r3, [r7, #10]
 800336a:	11db      	asrs	r3, r3, #7
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 0306 	and.w	r3, r3, #6
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f063 030f 	orn	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <I2C_MasterRequestWrite+0xfc>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f95d 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e010      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <I2C_MasterRequestWrite+0x100>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f94d 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010008 	.word	0x00010008
 80033c4:	00010002 	.word	0x00010002

080033c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	4608      	mov	r0, r1
 80033d2:	4611      	mov	r1, r2
 80033d4:	461a      	mov	r2, r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	817b      	strh	r3, [r7, #10]
 80033da:	460b      	mov	r3, r1
 80033dc:	813b      	strh	r3, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2200      	movs	r2, #0
 800340a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f8c2 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003428:	d103      	bne.n	8003432 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0aa      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003436:	897b      	ldrh	r3, [r7, #10]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	4952      	ldr	r1, [pc, #328]	; (8003594 <I2C_RequestMemoryRead+0x1cc>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f8fa 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e097      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003474:	6a39      	ldr	r1, [r7, #32]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f964 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e076      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	e021      	b.n	80034f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	6a39      	ldr	r1, [r7, #32]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f93e 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d107      	bne.n	80034e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e050      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	6a39      	ldr	r1, [r7, #32]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f923 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b04      	cmp	r3, #4
 800350a:	d107      	bne.n	800351c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e035      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f82b 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d103      	bne.n	8003560 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e013      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	4906      	ldr	r1, [pc, #24]	; (8003594 <I2C_RequestMemoryRead+0x1cc>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f863 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00010002 	.word	0x00010002

08003598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a8:	e025      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d021      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe ff5b 	bl	800246c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e023      	b.n	800363e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10d      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	e00c      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d0b6      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003654:	e051      	b.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d123      	bne.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e046      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d021      	beq.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fed9 	bl	800246c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d116      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e020      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10c      	bne.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e00b      	b.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d18d      	bne.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003750:	e02d      	b.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f8ce 	bl	80038f4 <I2C_IsAcknowledgeFailed>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02d      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d021      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fe fe7f 	bl	800246c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d116      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d1ca      	bne.n	8003752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d2:	e02d      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f88d 	bl	80038f4 <I2C_IsAcknowledgeFailed>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e02d      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d021      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe fe3e 	bl	800246c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d1ca      	bne.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003854:	e042      	b.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b10      	cmp	r3, #16
 8003862:	d119      	bne.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0210 	mvn.w	r2, #16
 800386c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e029      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fe fde8 	bl	800246c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d1b5      	bne.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d11b      	bne.n	8003944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0cc      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d90c      	bls.n	8003990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b65      	ldr	r3, [pc, #404]	; (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b63      	ldr	r3, [pc, #396]	; (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0b8      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a58      	ldr	r2, [pc, #352]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a52      	ldr	r2, [pc, #328]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	494d      	ldr	r1, [pc, #308]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d044      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d119      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e07f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e067      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4934      	ldr	r1, [pc, #208]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a44:	f7fe fd12 	bl	800246c <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4c:	f7fe fd0e 	bl	800246c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e04f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 020c 	and.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1eb      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d20c      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e032      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4916      	ldr	r1, [pc, #88]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	490e      	ldr	r1, [pc, #56]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ada:	f000 f855 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490a      	ldr	r1, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	fa22 f303 	lsr.w	r3, r2, r3
 8003af2:	4a09      	ldr	r2, [pc, #36]	; (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fc72 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023c00 	.word	0x40023c00
 8003b10:	40023800 	.word	0x40023800
 8003b14:	080096f4 	.word	0x080096f4
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	20000004 	.word	0x20000004

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	08009704 	.word	0x08009704

08003b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b64:	f7ff ffdc 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0b5b      	lsrs	r3, r3, #13
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	08009704 	.word	0x08009704

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b0ae      	sub	sp, #184	; 0xb8
 8003b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bae:	4bcb      	ldr	r3, [pc, #812]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	f200 8206 	bhi.w	8003fc8 <HAL_RCC_GetSysClockFreq+0x440>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003fc9 	.word	0x08003fc9
 8003bcc:	08003fc9 	.word	0x08003fc9
 8003bd0:	08003fc9 	.word	0x08003fc9
 8003bd4:	08003c01 	.word	0x08003c01
 8003bd8:	08003fc9 	.word	0x08003fc9
 8003bdc:	08003fc9 	.word	0x08003fc9
 8003be0:	08003fc9 	.word	0x08003fc9
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003fc9 	.word	0x08003fc9
 8003bec:	08003fc9 	.word	0x08003fc9
 8003bf0:	08003fc9 	.word	0x08003fc9
 8003bf4:	08003df9 	.word	0x08003df9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4bb9      	ldr	r3, [pc, #740]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003bfe:	e1e7      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c00:	4bb8      	ldr	r3, [pc, #736]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c06:	e1e3      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c08:	4bb4      	ldr	r3, [pc, #720]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c14:	4bb1      	ldr	r3, [pc, #708]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d071      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c20:	4bae      	ldr	r3, [pc, #696]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c46:	4622      	mov	r2, r4
 8003c48:	462b      	mov	r3, r5
 8003c4a:	f04f 0000 	mov.w	r0, #0
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	0159      	lsls	r1, r3, #5
 8003c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c58:	0150      	lsls	r0, r2, #5
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4621      	mov	r1, r4
 8003c60:	1a51      	subs	r1, r2, r1
 8003c62:	6439      	str	r1, [r7, #64]	; 0x40
 8003c64:	4629      	mov	r1, r5
 8003c66:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003c78:	4649      	mov	r1, r9
 8003c7a:	018b      	lsls	r3, r1, #6
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c82:	4641      	mov	r1, r8
 8003c84:	018a      	lsls	r2, r1, #6
 8003c86:	4641      	mov	r1, r8
 8003c88:	1a51      	subs	r1, r2, r1
 8003c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4641      	mov	r1, r8
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cba:	462b      	mov	r3, r5
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	eb42 0303 	adc.w	r3, r2, r3
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	024b      	lsls	r3, r1, #9
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cda:	4621      	mov	r1, r4
 8003cdc:	024a      	lsls	r2, r1, #9
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003cf4:	f7fc ffe8 	bl	8000cc8 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d02:	e067      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d04:	4b75      	ldr	r3, [pc, #468]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	099b      	lsrs	r3, r3, #6
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d1e:	2300      	movs	r3, #0
 8003d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	0159      	lsls	r1, r3, #5
 8003d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d38:	0150      	lsls	r0, r2, #5
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4621      	mov	r1, r4
 8003d40:	1a51      	subs	r1, r2, r1
 8003d42:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d44:	4629      	mov	r1, r5
 8003d46:	eb63 0301 	sbc.w	r3, r3, r1
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003d58:	4649      	mov	r1, r9
 8003d5a:	018b      	lsls	r3, r1, #6
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d62:	4641      	mov	r1, r8
 8003d64:	018a      	lsls	r2, r1, #6
 8003d66:	4641      	mov	r1, r8
 8003d68:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d86:	4692      	mov	sl, r2
 8003d88:	469b      	mov	fp, r3
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	eb1a 0303 	adds.w	r3, sl, r3
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	462b      	mov	r3, r5
 8003d94:	eb4b 0303 	adc.w	r3, fp, r3
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003da6:	4629      	mov	r1, r5
 8003da8:	028b      	lsls	r3, r1, #10
 8003daa:	4621      	mov	r1, r4
 8003dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db0:	4621      	mov	r1, r4
 8003db2:	028a      	lsls	r2, r1, #10
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8003dc0:	677a      	str	r2, [r7, #116]	; 0x74
 8003dc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003dc6:	f7fc ff7f 	bl	8000cc8 <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4613      	mov	r3, r2
 8003dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd4:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003df6:	e0eb      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b38      	ldr	r3, [pc, #224]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e04:	4b35      	ldr	r3, [pc, #212]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d06b      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e10:	4b32      	ldr	r3, [pc, #200]	; (8003edc <HAL_RCC_GetSysClockFreq+0x354>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	2200      	movs	r2, #0
 8003e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	663b      	str	r3, [r7, #96]	; 0x60
 8003e24:	2300      	movs	r3, #0
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
 8003e28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	462b      	mov	r3, r5
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3e:	0150      	lsls	r0, r2, #5
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4621      	mov	r1, r4
 8003e46:	1a51      	subs	r1, r2, r1
 8003e48:	61b9      	str	r1, [r7, #24]
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e5e:	4659      	mov	r1, fp
 8003e60:	018b      	lsls	r3, r1, #6
 8003e62:	4651      	mov	r1, sl
 8003e64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e68:	4651      	mov	r1, sl
 8003e6a:	018a      	lsls	r2, r1, #6
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ebb2 0801 	subs.w	r8, r2, r1
 8003e72:	4659      	mov	r1, fp
 8003e74:	eb63 0901 	sbc.w	r9, r3, r1
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8c:	4690      	mov	r8, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	4623      	mov	r3, r4
 8003e92:	eb18 0303 	adds.w	r3, r8, r3
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	462b      	mov	r3, r5
 8003e9a:	eb49 0303 	adc.w	r3, r9, r3
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003eac:	4629      	mov	r1, r5
 8003eae:	024b      	lsls	r3, r1, #9
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	024a      	lsls	r2, r1, #9
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ec6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ec8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ecc:	f7fc fefc 	bl	8000cc8 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eda:	e065      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x420>
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee8:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8003efa:	2300      	movs	r3, #0
 8003efc:	657b      	str	r3, [r7, #84]	; 0x54
 8003efe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f02:	4642      	mov	r2, r8
 8003f04:	464b      	mov	r3, r9
 8003f06:	f04f 0000 	mov.w	r0, #0
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	0159      	lsls	r1, r3, #5
 8003f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f14:	0150      	lsls	r0, r2, #5
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	1a51      	subs	r1, r2, r1
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	4649      	mov	r1, r9
 8003f22:	eb63 0301 	sbc.w	r3, r3, r1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f34:	4659      	mov	r1, fp
 8003f36:	018b      	lsls	r3, r1, #6
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f3e:	4651      	mov	r1, sl
 8003f40:	018a      	lsls	r2, r1, #6
 8003f42:	4651      	mov	r1, sl
 8003f44:	1a54      	subs	r4, r2, r1
 8003f46:	4659      	mov	r1, fp
 8003f48:	eb63 0501 	sbc.w	r5, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	464b      	mov	r3, r9
 8003f68:	eb45 0303 	adc.w	r3, r5, r3
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	028b      	lsls	r3, r1, #10
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f84:	4621      	mov	r1, r4
 8003f86:	028a      	lsls	r2, r1, #10
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f90:	2200      	movs	r2, #0
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f9a:	f7fc fe95 	bl	8000cc8 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	0f1b      	lsrs	r3, r3, #28
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	37b8      	adds	r7, #184	; 0xb8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	00f42400 	.word	0x00f42400

08003fe8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e28d      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8083 	beq.w	800410e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004008:	4b94      	ldr	r3, [pc, #592]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b04      	cmp	r3, #4
 8004012:	d019      	beq.n	8004048 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004014:	4b91      	ldr	r3, [pc, #580]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800401c:	2b08      	cmp	r3, #8
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004020:	4b8e      	ldr	r3, [pc, #568]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402c:	d00c      	beq.n	8004048 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402e:	4b8b      	ldr	r3, [pc, #556]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d112      	bne.n	8004060 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403a:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004046:	d10b      	bne.n	8004060 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	4b84      	ldr	r3, [pc, #528]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d05b      	beq.n	800410c <HAL_RCC_OscConfig+0x124>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d157      	bne.n	800410c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e25a      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004068:	d106      	bne.n	8004078 <HAL_RCC_OscConfig+0x90>
 800406a:	4b7c      	ldr	r3, [pc, #496]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7b      	ldr	r2, [pc, #492]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e01d      	b.n	80040b4 <HAL_RCC_OscConfig+0xcc>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004080:	d10c      	bne.n	800409c <HAL_RCC_OscConfig+0xb4>
 8004082:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a75      	ldr	r2, [pc, #468]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b73      	ldr	r3, [pc, #460]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a72      	ldr	r2, [pc, #456]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e00b      	b.n	80040b4 <HAL_RCC_OscConfig+0xcc>
 800409c:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80040a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	4b6c      	ldr	r3, [pc, #432]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6b      	ldr	r2, [pc, #428]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80040ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d013      	beq.n	80040e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe f9d6 	bl	800246c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fe f9d2 	bl	800246c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e21f      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	4b61      	ldr	r3, [pc, #388]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0xdc>
 80040e2:	e014      	b.n	800410e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe f9c2 	bl	800246c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fe f9be 	bl	800246c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e20b      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	4b57      	ldr	r3, [pc, #348]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x104>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d06f      	beq.n	80041fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800411a:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b00      	cmp	r3, #0
 8004124:	d017      	beq.n	8004156 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004126:	4b4d      	ldr	r3, [pc, #308]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800412e:	2b08      	cmp	r3, #8
 8004130:	d105      	bne.n	800413e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004132:	4b4a      	ldr	r3, [pc, #296]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d11c      	bne.n	8004184 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414a:	4b44      	ldr	r3, [pc, #272]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x186>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1d3      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4937      	ldr	r1, [pc, #220]	; (800425c <HAL_RCC_OscConfig+0x274>)
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	e03a      	b.n	80041fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800418c:	4b34      	ldr	r3, [pc, #208]	; (8004260 <HAL_RCC_OscConfig+0x278>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fe f96b 	bl	800246c <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419a:	f7fe f967 	bl	800246c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e1b4      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b28      	ldr	r3, [pc, #160]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4925      	ldr	r1, [pc, #148]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_OscConfig+0x278>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fe f94a 	bl	800246c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041dc:	f7fe f946 	bl	800246c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e193      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d036      	beq.n	8004274 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_RCC_OscConfig+0x27c>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe f92a 	bl	800246c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe f926 	bl	800246c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e173      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_OscConfig+0x274>)
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x234>
 800423a:	e01b      	b.n	8004274 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_OscConfig+0x27c>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fe f913 	bl	800246c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	e00e      	b.n	8004268 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424a:	f7fe f90f 	bl	800246c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d907      	bls.n	8004268 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e15c      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
 800425c:	40023800 	.word	0x40023800
 8004260:	42470000 	.word	0x42470000
 8004264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	4b8a      	ldr	r3, [pc, #552]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ea      	bne.n	800424a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8097 	beq.w	80043b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b83      	ldr	r3, [pc, #524]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4a7e      	ldr	r2, [pc, #504]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
 80042a2:	4b7c      	ldr	r3, [pc, #496]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_RCC_OscConfig+0x4b0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d118      	bne.n	80042f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x4b0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a75      	ldr	r2, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x4b0>)
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ca:	f7fe f8cf 	bl	800246c <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fe f8cb 	bl	800246c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e118      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	4b6c      	ldr	r3, [pc, #432]	; (8004498 <HAL_RCC_OscConfig+0x4b0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x31e>
 80042f8:	4b66      	ldr	r3, [pc, #408]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a65      	ldr	r2, [pc, #404]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0x358>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0x340>
 800430e:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a60      	ldr	r2, [pc, #384]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	4b5e      	ldr	r3, [pc, #376]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a5d      	ldr	r2, [pc, #372]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6713      	str	r3, [r2, #112]	; 0x70
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0x358>
 8004328:	4b5a      	ldr	r3, [pc, #360]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	4a59      	ldr	r2, [pc, #356]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	6713      	str	r3, [r2, #112]	; 0x70
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a56      	ldr	r2, [pc, #344]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800433a:	f023 0304 	bic.w	r3, r3, #4
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d015      	beq.n	8004374 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fe f890 	bl	800246c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fe f88c 	bl	800246c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e0d7      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004366:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0ee      	beq.n	8004350 <HAL_RCC_OscConfig+0x368>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fe f87a 	bl	800246c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437a:	e00a      	b.n	8004392 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fe f876 	bl	800246c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0c1      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004392:	4b40      	ldr	r3, [pc, #256]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ee      	bne.n	800437c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a4:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	4a3a      	ldr	r2, [pc, #232]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80ad 	beq.w	8004514 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ba:	4b36      	ldr	r3, [pc, #216]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d060      	beq.n	8004488 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d145      	bne.n	800445a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <HAL_RCC_OscConfig+0x4b4>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fe f84a 	bl	800246c <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fe f846 	bl	800246c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e093      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	4b29      	ldr	r3, [pc, #164]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	3b01      	subs	r3, #1
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	491b      	ldr	r1, [pc, #108]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x4b4>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fe f81b 	bl	800246c <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443a:	f7fe f817 	bl	800246c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e064      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x452>
 8004458:	e05c      	b.n	8004514 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x4b4>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe f804 	bl	800246c <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7fe f800 	bl	800246c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e04d      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCC_OscConfig+0x4ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x480>
 8004486:	e045      	b.n	8004514 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e040      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
 8004494:	40023800 	.word	0x40023800
 8004498:	40007000 	.word	0x40007000
 800449c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCC_OscConfig+0x538>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d030      	beq.n	8004510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d129      	bne.n	8004510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d122      	bne.n	8004510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d0:	4013      	ands	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d8:	4293      	cmp	r3, r2
 80044da:	d119      	bne.n	8004510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	3b01      	subs	r3, #1
 80044ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d10f      	bne.n	8004510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800

08004524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e03f      	b.n	80045b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fd feb6 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	; 0x24
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f929 	bl	80047c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800458c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800459c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b08a      	sub	sp, #40	; 0x28
 80045c2:	af02      	add	r7, sp, #8
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d17c      	bne.n	80046d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_UART_Transmit+0x2c>
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e075      	b.n	80046da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Transmit+0x3e>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e06e      	b.n	80046da <HAL_UART_Transmit+0x11c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2221      	movs	r2, #33	; 0x21
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004612:	f7fd ff2b 	bl	800246c <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d108      	bne.n	8004640 <HAL_UART_Transmit+0x82>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e003      	b.n	8004648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004650:	e02a      	b.n	80046a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f840 	bl	80046e2 <UART_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e036      	b.n	80046da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	3302      	adds	r3, #2
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e007      	b.n	800469a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3301      	adds	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1cf      	bne.n	8004652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2140      	movs	r1, #64	; 0x40
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f810 	bl	80046e2 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b090      	sub	sp, #64	; 0x40
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f2:	e050      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d04c      	beq.n	8004796 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <UART_WaitOnFlagUntilTimeout+0x30>
 8004702:	f7fd feb3 	bl	800246c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470e:	429a      	cmp	r2, r3
 8004710:	d241      	bcs.n	8004796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004732:	637a      	str	r2, [r7, #52]	; 0x34
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3314      	adds	r3, #20
 800474c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	613b      	str	r3, [r7, #16]
   return(result);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004766:	623a      	str	r2, [r7, #32]
 8004768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	69f9      	ldr	r1, [r7, #28]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	61bb      	str	r3, [r7, #24]
   return(result);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00f      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4013      	ands	r3, r2
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	bf0c      	ite	eq
 80047a6:	2301      	moveq	r3, #1
 80047a8:	2300      	movne	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d09f      	beq.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3740      	adds	r7, #64	; 0x40
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b0c0      	sub	sp, #256	; 0x100
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	ea40 0301 	orr.w	r3, r0, r1
 80047e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	431a      	orrs	r2, r3
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004818:	f021 010c 	bic.w	r1, r1, #12
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004826:	430b      	orrs	r3, r1
 8004828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	6999      	ldr	r1, [r3, #24]
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	ea40 0301 	orr.w	r3, r0, r1
 8004846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <UART_SetConfig+0x2cc>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d005      	beq.n	8004860 <UART_SetConfig+0xa0>
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <UART_SetConfig+0x2d0>)
 800485c:	429a      	cmp	r2, r3
 800485e:	d104      	bne.n	800486a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7ff f97e 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 8004864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004868:	e003      	b.n	8004872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486a:	f7ff f965 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 800486e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487c:	f040 810c 	bne.w	8004a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800488a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800488e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	1891      	adds	r1, r2, r2
 8004898:	65b9      	str	r1, [r7, #88]	; 0x58
 800489a:	415b      	adcs	r3, r3
 800489c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800489e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048a2:	4621      	mov	r1, r4
 80048a4:	eb12 0801 	adds.w	r8, r2, r1
 80048a8:	4629      	mov	r1, r5
 80048aa:	eb43 0901 	adc.w	r9, r3, r1
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	eb18 0303 	adds.w	r3, r8, r3
 80048cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d0:	462b      	mov	r3, r5
 80048d2:	eb49 0303 	adc.w	r3, r9, r3
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048ee:	460b      	mov	r3, r1
 80048f0:	18db      	adds	r3, r3, r3
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
 80048f4:	4613      	mov	r3, r2
 80048f6:	eb42 0303 	adc.w	r3, r2, r3
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
 80048fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004904:	f7fc f9e0 	bl	8000cc8 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <UART_SetConfig+0x2d4>)
 800490e:	fba3 2302 	umull	r2, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	011c      	lsls	r4, r3, #4
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004930:	415b      	adcs	r3, r3
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004938:	4641      	mov	r1, r8
 800493a:	eb12 0a01 	adds.w	sl, r2, r1
 800493e:	4649      	mov	r1, r9
 8004940:	eb43 0b01 	adc.w	fp, r3, r1
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004958:	4692      	mov	sl, r2
 800495a:	469b      	mov	fp, r3
 800495c:	4643      	mov	r3, r8
 800495e:	eb1a 0303 	adds.w	r3, sl, r3
 8004962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004966:	464b      	mov	r3, r9
 8004968:	eb4b 0303 	adc.w	r3, fp, r3
 800496c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800497c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004984:	460b      	mov	r3, r1
 8004986:	18db      	adds	r3, r3, r3
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
 800498a:	4613      	mov	r3, r2
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	647b      	str	r3, [r7, #68]	; 0x44
 8004992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800499a:	f7fc f995 	bl	8000cc8 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <UART_SetConfig+0x2d4>)
 80049a6:	fba3 2301 	umull	r2, r3, r3, r1
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2264      	movs	r2, #100	; 0x64
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	1acb      	subs	r3, r1, r3
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ba:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <UART_SetConfig+0x2d4>)
 80049bc:	fba3 2302 	umull	r2, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c8:	441c      	add	r4, r3
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e4:	415b      	adcs	r3, r3
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049ec:	4641      	mov	r1, r8
 80049ee:	1851      	adds	r1, r2, r1
 80049f0:	6339      	str	r1, [r7, #48]	; 0x30
 80049f2:	4649      	mov	r1, r9
 80049f4:	414b      	adcs	r3, r1
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a04:	4659      	mov	r1, fp
 8004a06:	00cb      	lsls	r3, r1, #3
 8004a08:	4651      	mov	r1, sl
 8004a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0e:	4651      	mov	r1, sl
 8004a10:	00ca      	lsls	r2, r1, #3
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	4642      	mov	r2, r8
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a20:	464b      	mov	r3, r9
 8004a22:	460a      	mov	r2, r1
 8004a24:	eb42 0303 	adc.w	r3, r2, r3
 8004a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a40:	460b      	mov	r3, r1
 8004a42:	18db      	adds	r3, r3, r3
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a46:	4613      	mov	r3, r2
 8004a48:	eb42 0303 	adc.w	r3, r2, r3
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a56:	f7fc f937 	bl	8000cc8 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <UART_SetConfig+0x2d4>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	; 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3332      	adds	r3, #50	; 0x32
 8004a72:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <UART_SetConfig+0x2d4>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 0207 	and.w	r2, r3, #7
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4422      	add	r2, r4
 8004a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a88:	e105      	b.n	8004c96 <UART_SetConfig+0x4d6>
 8004a8a:	bf00      	nop
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aaa:	4642      	mov	r2, r8
 8004aac:	464b      	mov	r3, r9
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	6239      	str	r1, [r7, #32]
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aba:	4641      	mov	r1, r8
 8004abc:	1854      	adds	r4, r2, r1
 8004abe:	4649      	mov	r1, r9
 8004ac0:	eb43 0501 	adc.w	r5, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	00eb      	lsls	r3, r5, #3
 8004ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad2:	00e2      	lsls	r2, r4, #3
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	4643      	mov	r3, r8
 8004ada:	18e3      	adds	r3, r4, r3
 8004adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	eb45 0303 	adc.w	r3, r5, r3
 8004ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b06:	4629      	mov	r1, r5
 8004b08:	008b      	lsls	r3, r1, #2
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b10:	4621      	mov	r1, r4
 8004b12:	008a      	lsls	r2, r1, #2
 8004b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b18:	f7fc f8d6 	bl	8000cc8 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b60      	ldr	r3, [pc, #384]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004b22:	fba3 2302 	umull	r2, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	011c      	lsls	r4, r3, #4
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	61b9      	str	r1, [r7, #24]
 8004b44:	415b      	adcs	r3, r3
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6139      	str	r1, [r7, #16]
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b80:	464b      	mov	r3, r9
 8004b82:	460a      	mov	r2, r1
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	008b      	lsls	r3, r1, #2
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bae:	4641      	mov	r1, r8
 8004bb0:	008a      	lsls	r2, r1, #2
 8004bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bb6:	f7fc f887 	bl	8000cc8 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	; 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	3332      	adds	r3, #50	; 0x32
 8004bd2:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bde:	441c      	add	r4, r3
 8004be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be4:	2200      	movs	r2, #0
 8004be6:	673b      	str	r3, [r7, #112]	; 0x70
 8004be8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	1891      	adds	r1, r2, r2
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	415b      	adcs	r3, r3
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bfe:	4641      	mov	r1, r8
 8004c00:	1851      	adds	r1, r2, r1
 8004c02:	6039      	str	r1, [r7, #0]
 8004c04:	4649      	mov	r1, r9
 8004c06:	414b      	adcs	r3, r1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c16:	4659      	mov	r1, fp
 8004c18:	00cb      	lsls	r3, r1, #3
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c20:	4651      	mov	r1, sl
 8004c22:	00ca      	lsls	r2, r1, #3
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	464b      	mov	r3, r9
 8004c32:	460a      	mov	r2, r1
 8004c34:	eb42 0303 	adc.w	r3, r2, r3
 8004c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
 8004c44:	667a      	str	r2, [r7, #100]	; 0x64
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c52:	4649      	mov	r1, r9
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	4641      	mov	r1, r8
 8004c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	008a      	lsls	r2, r1, #2
 8004c60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c64:	f7fc f830 	bl	8000cc8 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <UART_SetConfig+0x4e4>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4422      	add	r2, r4
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	51eb851f 	.word	0x51eb851f

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4d0d      	ldr	r5, [pc, #52]	; (8004cec <__libc_init_array+0x38>)
 8004cb8:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	4d0b      	ldr	r5, [pc, #44]	; (8004cf4 <__libc_init_array+0x40>)
 8004cc6:	4c0c      	ldr	r4, [pc, #48]	; (8004cf8 <__libc_init_array+0x44>)
 8004cc8:	f004 fc92 	bl	80095f0 <_init>
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08009bbc 	.word	0x08009bbc
 8004cf0:	08009bbc 	.word	0x08009bbc
 8004cf4:	08009bbc 	.word	0x08009bbc
 8004cf8:	08009bc0 	.word	0x08009bc0

08004cfc <memset>:
 8004cfc:	4402      	add	r2, r0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <memset+0xa>
 8004d04:	4770      	bx	lr
 8004d06:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0a:	e7f9      	b.n	8004d00 <memset+0x4>

08004d0c <__cvt>:
 8004d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	ec55 4b10 	vmov	r4, r5, d0
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	460e      	mov	r6, r1
 8004d18:	4619      	mov	r1, r3
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	bfbb      	ittet	lt
 8004d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d22:	461d      	movlt	r5, r3
 8004d24:	2300      	movge	r3, #0
 8004d26:	232d      	movlt	r3, #45	; 0x2d
 8004d28:	700b      	strb	r3, [r1, #0]
 8004d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d30:	4691      	mov	r9, r2
 8004d32:	f023 0820 	bic.w	r8, r3, #32
 8004d36:	bfbc      	itt	lt
 8004d38:	4622      	movlt	r2, r4
 8004d3a:	4614      	movlt	r4, r2
 8004d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d40:	d005      	beq.n	8004d4e <__cvt+0x42>
 8004d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d46:	d100      	bne.n	8004d4a <__cvt+0x3e>
 8004d48:	3601      	adds	r6, #1
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	e000      	b.n	8004d50 <__cvt+0x44>
 8004d4e:	2103      	movs	r1, #3
 8004d50:	ab03      	add	r3, sp, #12
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	ab02      	add	r3, sp, #8
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	ec45 4b10 	vmov	d0, r4, r5
 8004d5c:	4653      	mov	r3, sl
 8004d5e:	4632      	mov	r2, r6
 8004d60:	f001 fdae 	bl	80068c0 <_dtoa_r>
 8004d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d68:	4607      	mov	r7, r0
 8004d6a:	d102      	bne.n	8004d72 <__cvt+0x66>
 8004d6c:	f019 0f01 	tst.w	r9, #1
 8004d70:	d022      	beq.n	8004db8 <__cvt+0xac>
 8004d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d76:	eb07 0906 	add.w	r9, r7, r6
 8004d7a:	d110      	bne.n	8004d9e <__cvt+0x92>
 8004d7c:	783b      	ldrb	r3, [r7, #0]
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d10a      	bne.n	8004d98 <__cvt+0x8c>
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb febd 	bl	8000b08 <__aeabi_dcmpeq>
 8004d8e:	b918      	cbnz	r0, 8004d98 <__cvt+0x8c>
 8004d90:	f1c6 0601 	rsb	r6, r6, #1
 8004d94:	f8ca 6000 	str.w	r6, [sl]
 8004d98:	f8da 3000 	ldr.w	r3, [sl]
 8004d9c:	4499      	add	r9, r3
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2300      	movs	r3, #0
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb feaf 	bl	8000b08 <__aeabi_dcmpeq>
 8004daa:	b108      	cbz	r0, 8004db0 <__cvt+0xa4>
 8004dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8004db0:	2230      	movs	r2, #48	; 0x30
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	454b      	cmp	r3, r9
 8004db6:	d307      	bcc.n	8004dc8 <__cvt+0xbc>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dbc:	1bdb      	subs	r3, r3, r7
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	b004      	add	sp, #16
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	9103      	str	r1, [sp, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e7f0      	b.n	8004db2 <__cvt+0xa6>

08004dd0 <__exponent>:
 8004dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	bfb8      	it	lt
 8004dd8:	4249      	neglt	r1, r1
 8004dda:	f803 2b02 	strb.w	r2, [r3], #2
 8004dde:	bfb4      	ite	lt
 8004de0:	222d      	movlt	r2, #45	; 0x2d
 8004de2:	222b      	movge	r2, #43	; 0x2b
 8004de4:	2909      	cmp	r1, #9
 8004de6:	7042      	strb	r2, [r0, #1]
 8004de8:	dd2a      	ble.n	8004e40 <__exponent+0x70>
 8004dea:	f10d 0407 	add.w	r4, sp, #7
 8004dee:	46a4      	mov	ip, r4
 8004df0:	270a      	movs	r7, #10
 8004df2:	46a6      	mov	lr, r4
 8004df4:	460a      	mov	r2, r1
 8004df6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dfa:	fb07 1516 	mls	r5, r7, r6, r1
 8004dfe:	3530      	adds	r5, #48	; 0x30
 8004e00:	2a63      	cmp	r2, #99	; 0x63
 8004e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	dcf1      	bgt.n	8004df2 <__exponent+0x22>
 8004e0e:	3130      	adds	r1, #48	; 0x30
 8004e10:	f1ae 0502 	sub.w	r5, lr, #2
 8004e14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e18:	1c44      	adds	r4, r0, #1
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4561      	cmp	r1, ip
 8004e1e:	d30a      	bcc.n	8004e36 <__exponent+0x66>
 8004e20:	f10d 0209 	add.w	r2, sp, #9
 8004e24:	eba2 020e 	sub.w	r2, r2, lr
 8004e28:	4565      	cmp	r5, ip
 8004e2a:	bf88      	it	hi
 8004e2c:	2200      	movhi	r2, #0
 8004e2e:	4413      	add	r3, r2
 8004e30:	1a18      	subs	r0, r3, r0
 8004e32:	b003      	add	sp, #12
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e3e:	e7ed      	b.n	8004e1c <__exponent+0x4c>
 8004e40:	2330      	movs	r3, #48	; 0x30
 8004e42:	3130      	adds	r1, #48	; 0x30
 8004e44:	7083      	strb	r3, [r0, #2]
 8004e46:	70c1      	strb	r1, [r0, #3]
 8004e48:	1d03      	adds	r3, r0, #4
 8004e4a:	e7f1      	b.n	8004e30 <__exponent+0x60>

08004e4c <_printf_float>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	ed2d 8b02 	vpush	{d8}
 8004e54:	b08d      	sub	sp, #52	; 0x34
 8004e56:	460c      	mov	r4, r1
 8004e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	461f      	mov	r7, r3
 8004e60:	4605      	mov	r5, r0
 8004e62:	f002 fe8b 	bl	8007b7c <_localeconv_r>
 8004e66:	f8d0 a000 	ldr.w	sl, [r0]
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	f7fb f9d0 	bl	8000210 <strlen>
 8004e70:	2300      	movs	r3, #0
 8004e72:	930a      	str	r3, [sp, #40]	; 0x28
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e80:	3307      	adds	r3, #7
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	f103 0208 	add.w	r2, r3, #8
 8004e8a:	f8c8 2000 	str.w	r2, [r8]
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e9e:	9307      	str	r3, [sp, #28]
 8004ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ea4:	ee08 0a10 	vmov	s16, r0
 8004ea8:	4b9f      	ldr	r3, [pc, #636]	; (8005128 <_printf_float+0x2dc>)
 8004eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	f7fb fe5b 	bl	8000b6c <__aeabi_dcmpun>
 8004eb6:	bb88      	cbnz	r0, 8004f1c <_printf_float+0xd0>
 8004eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ebc:	4b9a      	ldr	r3, [pc, #616]	; (8005128 <_printf_float+0x2dc>)
 8004ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec2:	f7fb fe35 	bl	8000b30 <__aeabi_dcmple>
 8004ec6:	bb48      	cbnz	r0, 8004f1c <_printf_float+0xd0>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb fe24 	bl	8000b1c <__aeabi_dcmplt>
 8004ed4:	b110      	cbz	r0, 8004edc <_printf_float+0x90>
 8004ed6:	232d      	movs	r3, #45	; 0x2d
 8004ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004edc:	4b93      	ldr	r3, [pc, #588]	; (800512c <_printf_float+0x2e0>)
 8004ede:	4894      	ldr	r0, [pc, #592]	; (8005130 <_printf_float+0x2e4>)
 8004ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ee4:	bf94      	ite	ls
 8004ee6:	4698      	movls	r8, r3
 8004ee8:	4680      	movhi	r8, r0
 8004eea:	2303      	movs	r3, #3
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	9b05      	ldr	r3, [sp, #20]
 8004ef0:	f023 0204 	bic.w	r2, r3, #4
 8004ef4:	6022      	str	r2, [r4, #0]
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	9700      	str	r7, [sp, #0]
 8004efc:	4633      	mov	r3, r6
 8004efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f00:	4621      	mov	r1, r4
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 f9d8 	bl	80052b8 <_printf_common>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f040 8090 	bne.w	800502e <_printf_float+0x1e2>
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b00d      	add	sp, #52	; 0x34
 8004f14:	ecbd 8b02 	vpop	{d8}
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	4649      	mov	r1, r9
 8004f24:	f7fb fe22 	bl	8000b6c <__aeabi_dcmpun>
 8004f28:	b140      	cbz	r0, 8004f3c <_printf_float+0xf0>
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfbc      	itt	lt
 8004f30:	232d      	movlt	r3, #45	; 0x2d
 8004f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f36:	487f      	ldr	r0, [pc, #508]	; (8005134 <_printf_float+0x2e8>)
 8004f38:	4b7f      	ldr	r3, [pc, #508]	; (8005138 <_printf_float+0x2ec>)
 8004f3a:	e7d1      	b.n	8004ee0 <_printf_float+0x94>
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f42:	9206      	str	r2, [sp, #24]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	d13f      	bne.n	8004fc8 <_printf_float+0x17c>
 8004f48:	2306      	movs	r3, #6
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	9b05      	ldr	r3, [sp, #20]
 8004f4e:	6861      	ldr	r1, [r4, #4]
 8004f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f54:	2300      	movs	r3, #0
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	ab0a      	add	r3, sp, #40	; 0x28
 8004f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f5e:	ab09      	add	r3, sp, #36	; 0x24
 8004f60:	ec49 8b10 	vmov	d0, r8, r9
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	6022      	str	r2, [r4, #0]
 8004f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f7ff fecd 	bl	8004d0c <__cvt>
 8004f72:	9b06      	ldr	r3, [sp, #24]
 8004f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f76:	2b47      	cmp	r3, #71	; 0x47
 8004f78:	4680      	mov	r8, r0
 8004f7a:	d108      	bne.n	8004f8e <_printf_float+0x142>
 8004f7c:	1cc8      	adds	r0, r1, #3
 8004f7e:	db02      	blt.n	8004f86 <_printf_float+0x13a>
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	4299      	cmp	r1, r3
 8004f84:	dd41      	ble.n	800500a <_printf_float+0x1be>
 8004f86:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f8a:	fa5f fb8b 	uxtb.w	fp, fp
 8004f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f92:	d820      	bhi.n	8004fd6 <_printf_float+0x18a>
 8004f94:	3901      	subs	r1, #1
 8004f96:	465a      	mov	r2, fp
 8004f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8004f9e:	f7ff ff17 	bl	8004dd0 <__exponent>
 8004fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa4:	1813      	adds	r3, r2, r0
 8004fa6:	2a01      	cmp	r2, #1
 8004fa8:	4681      	mov	r9, r0
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	dc02      	bgt.n	8004fb4 <_printf_float+0x168>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	07d2      	lsls	r2, r2, #31
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_float+0x16c>
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	6123      	str	r3, [r4, #16]
 8004fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d09c      	beq.n	8004efa <_printf_float+0xae>
 8004fc0:	232d      	movs	r3, #45	; 0x2d
 8004fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc6:	e798      	b.n	8004efa <_printf_float+0xae>
 8004fc8:	9a06      	ldr	r2, [sp, #24]
 8004fca:	2a47      	cmp	r2, #71	; 0x47
 8004fcc:	d1be      	bne.n	8004f4c <_printf_float+0x100>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1bc      	bne.n	8004f4c <_printf_float+0x100>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7b9      	b.n	8004f4a <_printf_float+0xfe>
 8004fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fda:	d118      	bne.n	800500e <_printf_float+0x1c2>
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	dd0b      	ble.n	8004ffa <_printf_float+0x1ae>
 8004fe2:	6121      	str	r1, [r4, #16]
 8004fe4:	b913      	cbnz	r3, 8004fec <_printf_float+0x1a0>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	07d0      	lsls	r0, r2, #31
 8004fea:	d502      	bpl.n	8004ff2 <_printf_float+0x1a6>
 8004fec:	3301      	adds	r3, #1
 8004fee:	440b      	add	r3, r1
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ff4:	f04f 0900 	mov.w	r9, #0
 8004ff8:	e7de      	b.n	8004fb8 <_printf_float+0x16c>
 8004ffa:	b913      	cbnz	r3, 8005002 <_printf_float+0x1b6>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	07d2      	lsls	r2, r2, #31
 8005000:	d501      	bpl.n	8005006 <_printf_float+0x1ba>
 8005002:	3302      	adds	r3, #2
 8005004:	e7f4      	b.n	8004ff0 <_printf_float+0x1a4>
 8005006:	2301      	movs	r3, #1
 8005008:	e7f2      	b.n	8004ff0 <_printf_float+0x1a4>
 800500a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800500e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005010:	4299      	cmp	r1, r3
 8005012:	db05      	blt.n	8005020 <_printf_float+0x1d4>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	6121      	str	r1, [r4, #16]
 8005018:	07d8      	lsls	r0, r3, #31
 800501a:	d5ea      	bpl.n	8004ff2 <_printf_float+0x1a6>
 800501c:	1c4b      	adds	r3, r1, #1
 800501e:	e7e7      	b.n	8004ff0 <_printf_float+0x1a4>
 8005020:	2900      	cmp	r1, #0
 8005022:	bfd4      	ite	le
 8005024:	f1c1 0202 	rsble	r2, r1, #2
 8005028:	2201      	movgt	r2, #1
 800502a:	4413      	add	r3, r2
 800502c:	e7e0      	b.n	8004ff0 <_printf_float+0x1a4>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	055a      	lsls	r2, r3, #21
 8005032:	d407      	bmi.n	8005044 <_printf_float+0x1f8>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	4642      	mov	r2, r8
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	d12c      	bne.n	800509c <_printf_float+0x250>
 8005042:	e764      	b.n	8004f0e <_printf_float+0xc2>
 8005044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005048:	f240 80e0 	bls.w	800520c <_printf_float+0x3c0>
 800504c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	f7fb fd58 	bl	8000b08 <__aeabi_dcmpeq>
 8005058:	2800      	cmp	r0, #0
 800505a:	d034      	beq.n	80050c6 <_printf_float+0x27a>
 800505c:	4a37      	ldr	r2, [pc, #220]	; (800513c <_printf_float+0x2f0>)
 800505e:	2301      	movs	r3, #1
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f af51 	beq.w	8004f0e <_printf_float+0xc2>
 800506c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005070:	429a      	cmp	r2, r3
 8005072:	db02      	blt.n	800507a <_printf_float+0x22e>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	07d8      	lsls	r0, r3, #31
 8005078:	d510      	bpl.n	800509c <_printf_float+0x250>
 800507a:	ee18 3a10 	vmov	r3, s16
 800507e:	4652      	mov	r2, sl
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f af41 	beq.w	8004f0e <_printf_float+0xc2>
 800508c:	f04f 0800 	mov.w	r8, #0
 8005090:	f104 091a 	add.w	r9, r4, #26
 8005094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	4543      	cmp	r3, r8
 800509a:	dc09      	bgt.n	80050b0 <_printf_float+0x264>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	079b      	lsls	r3, r3, #30
 80050a0:	f100 8105 	bmi.w	80052ae <_printf_float+0x462>
 80050a4:	68e0      	ldr	r0, [r4, #12]
 80050a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a8:	4298      	cmp	r0, r3
 80050aa:	bfb8      	it	lt
 80050ac:	4618      	movlt	r0, r3
 80050ae:	e730      	b.n	8004f12 <_printf_float+0xc6>
 80050b0:	2301      	movs	r3, #1
 80050b2:	464a      	mov	r2, r9
 80050b4:	4631      	mov	r1, r6
 80050b6:	4628      	mov	r0, r5
 80050b8:	47b8      	blx	r7
 80050ba:	3001      	adds	r0, #1
 80050bc:	f43f af27 	beq.w	8004f0e <_printf_float+0xc2>
 80050c0:	f108 0801 	add.w	r8, r8, #1
 80050c4:	e7e6      	b.n	8005094 <_printf_float+0x248>
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dc39      	bgt.n	8005140 <_printf_float+0x2f4>
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <_printf_float+0x2f0>)
 80050ce:	2301      	movs	r3, #1
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f af19 	beq.w	8004f0e <_printf_float+0xc2>
 80050dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d102      	bne.n	80050ea <_printf_float+0x29e>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	07d9      	lsls	r1, r3, #31
 80050e8:	d5d8      	bpl.n	800509c <_printf_float+0x250>
 80050ea:	ee18 3a10 	vmov	r3, s16
 80050ee:	4652      	mov	r2, sl
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f af09 	beq.w	8004f0e <_printf_float+0xc2>
 80050fc:	f04f 0900 	mov.w	r9, #0
 8005100:	f104 0a1a 	add.w	sl, r4, #26
 8005104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005106:	425b      	negs	r3, r3
 8005108:	454b      	cmp	r3, r9
 800510a:	dc01      	bgt.n	8005110 <_printf_float+0x2c4>
 800510c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510e:	e792      	b.n	8005036 <_printf_float+0x1ea>
 8005110:	2301      	movs	r3, #1
 8005112:	4652      	mov	r2, sl
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	f43f aef7 	beq.w	8004f0e <_printf_float+0xc2>
 8005120:	f109 0901 	add.w	r9, r9, #1
 8005124:	e7ee      	b.n	8005104 <_printf_float+0x2b8>
 8005126:	bf00      	nop
 8005128:	7fefffff 	.word	0x7fefffff
 800512c:	08009710 	.word	0x08009710
 8005130:	08009714 	.word	0x08009714
 8005134:	0800971c 	.word	0x0800971c
 8005138:	08009718 	.word	0x08009718
 800513c:	08009720 	.word	0x08009720
 8005140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005144:	429a      	cmp	r2, r3
 8005146:	bfa8      	it	ge
 8005148:	461a      	movge	r2, r3
 800514a:	2a00      	cmp	r2, #0
 800514c:	4691      	mov	r9, r2
 800514e:	dc37      	bgt.n	80051c0 <_printf_float+0x374>
 8005150:	f04f 0b00 	mov.w	fp, #0
 8005154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005158:	f104 021a 	add.w	r2, r4, #26
 800515c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	eba3 0309 	sub.w	r3, r3, r9
 8005164:	455b      	cmp	r3, fp
 8005166:	dc33      	bgt.n	80051d0 <_printf_float+0x384>
 8005168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800516c:	429a      	cmp	r2, r3
 800516e:	db3b      	blt.n	80051e8 <_printf_float+0x39c>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07da      	lsls	r2, r3, #31
 8005174:	d438      	bmi.n	80051e8 <_printf_float+0x39c>
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	9a05      	ldr	r2, [sp, #20]
 800517a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800517c:	1a9a      	subs	r2, r3, r2
 800517e:	eba3 0901 	sub.w	r9, r3, r1
 8005182:	4591      	cmp	r9, r2
 8005184:	bfa8      	it	ge
 8005186:	4691      	movge	r9, r2
 8005188:	f1b9 0f00 	cmp.w	r9, #0
 800518c:	dc35      	bgt.n	80051fa <_printf_float+0x3ae>
 800518e:	f04f 0800 	mov.w	r8, #0
 8005192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005196:	f104 0a1a 	add.w	sl, r4, #26
 800519a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	eba3 0309 	sub.w	r3, r3, r9
 80051a4:	4543      	cmp	r3, r8
 80051a6:	f77f af79 	ble.w	800509c <_printf_float+0x250>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b8      	blx	r7
 80051b4:	3001      	adds	r0, #1
 80051b6:	f43f aeaa 	beq.w	8004f0e <_printf_float+0xc2>
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	e7ec      	b.n	800519a <_printf_float+0x34e>
 80051c0:	4613      	mov	r3, r2
 80051c2:	4631      	mov	r1, r6
 80051c4:	4642      	mov	r2, r8
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	d1c0      	bne.n	8005150 <_printf_float+0x304>
 80051ce:	e69e      	b.n	8004f0e <_printf_float+0xc2>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	9205      	str	r2, [sp, #20]
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	f43f ae97 	beq.w	8004f0e <_printf_float+0xc2>
 80051e0:	9a05      	ldr	r2, [sp, #20]
 80051e2:	f10b 0b01 	add.w	fp, fp, #1
 80051e6:	e7b9      	b.n	800515c <_printf_float+0x310>
 80051e8:	ee18 3a10 	vmov	r3, s16
 80051ec:	4652      	mov	r2, sl
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	d1be      	bne.n	8005176 <_printf_float+0x32a>
 80051f8:	e689      	b.n	8004f0e <_printf_float+0xc2>
 80051fa:	9a05      	ldr	r2, [sp, #20]
 80051fc:	464b      	mov	r3, r9
 80051fe:	4442      	add	r2, r8
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	d1c1      	bne.n	800518e <_printf_float+0x342>
 800520a:	e680      	b.n	8004f0e <_printf_float+0xc2>
 800520c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800520e:	2a01      	cmp	r2, #1
 8005210:	dc01      	bgt.n	8005216 <_printf_float+0x3ca>
 8005212:	07db      	lsls	r3, r3, #31
 8005214:	d538      	bpl.n	8005288 <_printf_float+0x43c>
 8005216:	2301      	movs	r3, #1
 8005218:	4642      	mov	r2, r8
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f ae74 	beq.w	8004f0e <_printf_float+0xc2>
 8005226:	ee18 3a10 	vmov	r3, s16
 800522a:	4652      	mov	r2, sl
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f ae6b 	beq.w	8004f0e <_printf_float+0xc2>
 8005238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	f7fb fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8005244:	b9d8      	cbnz	r0, 800527e <_printf_float+0x432>
 8005246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005248:	f108 0201 	add.w	r2, r8, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	d10e      	bne.n	8005276 <_printf_float+0x42a>
 8005258:	e659      	b.n	8004f0e <_printf_float+0xc2>
 800525a:	2301      	movs	r3, #1
 800525c:	4652      	mov	r2, sl
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	f43f ae52 	beq.w	8004f0e <_printf_float+0xc2>
 800526a:	f108 0801 	add.w	r8, r8, #1
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	4543      	cmp	r3, r8
 8005274:	dcf1      	bgt.n	800525a <_printf_float+0x40e>
 8005276:	464b      	mov	r3, r9
 8005278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800527c:	e6dc      	b.n	8005038 <_printf_float+0x1ec>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	f104 0a1a 	add.w	sl, r4, #26
 8005286:	e7f2      	b.n	800526e <_printf_float+0x422>
 8005288:	2301      	movs	r3, #1
 800528a:	4642      	mov	r2, r8
 800528c:	e7df      	b.n	800524e <_printf_float+0x402>
 800528e:	2301      	movs	r3, #1
 8005290:	464a      	mov	r2, r9
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae38 	beq.w	8004f0e <_printf_float+0xc2>
 800529e:	f108 0801 	add.w	r8, r8, #1
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	4543      	cmp	r3, r8
 80052aa:	dcf0      	bgt.n	800528e <_printf_float+0x442>
 80052ac:	e6fa      	b.n	80050a4 <_printf_float+0x258>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	f104 0919 	add.w	r9, r4, #25
 80052b6:	e7f4      	b.n	80052a2 <_printf_float+0x456>

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4699      	mov	r9, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfb8      	it	lt
 80052cc:	4613      	movlt	r3, r2
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d4:	4607      	mov	r7, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc26      	bgt.n	800534e <_printf_common+0x96>
 8005300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005304:	1e13      	subs	r3, r2, #0
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42b      	bmi.n	8005368 <_printf_common+0xb0>
 8005310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005314:	4649      	mov	r1, r9
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	3001      	adds	r0, #1
 800531c:	d01e      	beq.n	800535c <_printf_common+0xa4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	68e5      	ldr	r5, [r4, #12]
 8005322:	6832      	ldr	r2, [r6, #0]
 8005324:	f003 0306 	and.w	r3, r3, #6
 8005328:	2b04      	cmp	r3, #4
 800532a:	bf08      	it	eq
 800532c:	1aad      	subeq	r5, r5, r2
 800532e:	68a3      	ldr	r3, [r4, #8]
 8005330:	6922      	ldr	r2, [r4, #16]
 8005332:	bf0c      	ite	eq
 8005334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005338:	2500      	movne	r5, #0
 800533a:	4293      	cmp	r3, r2
 800533c:	bfc4      	itt	gt
 800533e:	1a9b      	subgt	r3, r3, r2
 8005340:	18ed      	addgt	r5, r5, r3
 8005342:	2600      	movs	r6, #0
 8005344:	341a      	adds	r4, #26
 8005346:	42b5      	cmp	r5, r6
 8005348:	d11a      	bne.n	8005380 <_printf_common+0xc8>
 800534a:	2000      	movs	r0, #0
 800534c:	e008      	b.n	8005360 <_printf_common+0xa8>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4649      	mov	r1, r9
 8005354:	4638      	mov	r0, r7
 8005356:	47c0      	blx	r8
 8005358:	3001      	adds	r0, #1
 800535a:	d103      	bne.n	8005364 <_printf_common+0xac>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	3501      	adds	r5, #1
 8005366:	e7c6      	b.n	80052f6 <_printf_common+0x3e>
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	2030      	movs	r0, #48	; 0x30
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005372:	4422      	add	r2, r4
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800537c:	3302      	adds	r3, #2
 800537e:	e7c7      	b.n	8005310 <_printf_common+0x58>
 8005380:	2301      	movs	r3, #1
 8005382:	4622      	mov	r2, r4
 8005384:	4649      	mov	r1, r9
 8005386:	4638      	mov	r0, r7
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0e6      	beq.n	800535c <_printf_common+0xa4>
 800538e:	3601      	adds	r6, #1
 8005390:	e7d9      	b.n	8005346 <_printf_common+0x8e>
	...

08005394 <_printf_i>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	7e0f      	ldrb	r7, [r1, #24]
 800539a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800539c:	2f78      	cmp	r7, #120	; 0x78
 800539e:	4691      	mov	r9, r2
 80053a0:	4680      	mov	r8, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	469a      	mov	sl, r3
 80053a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053aa:	d807      	bhi.n	80053bc <_printf_i+0x28>
 80053ac:	2f62      	cmp	r7, #98	; 0x62
 80053ae:	d80a      	bhi.n	80053c6 <_printf_i+0x32>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	f000 80d8 	beq.w	8005566 <_printf_i+0x1d2>
 80053b6:	2f58      	cmp	r7, #88	; 0x58
 80053b8:	f000 80a3 	beq.w	8005502 <_printf_i+0x16e>
 80053bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c4:	e03a      	b.n	800543c <_printf_i+0xa8>
 80053c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ca:	2b15      	cmp	r3, #21
 80053cc:	d8f6      	bhi.n	80053bc <_printf_i+0x28>
 80053ce:	a101      	add	r1, pc, #4	; (adr r1, 80053d4 <_printf_i+0x40>)
 80053d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080053bd 	.word	0x080053bd
 80053e0:	080053bd 	.word	0x080053bd
 80053e4:	080053bd 	.word	0x080053bd
 80053e8:	080053bd 	.word	0x080053bd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080053bd 	.word	0x080053bd
 80053f4:	080053bd 	.word	0x080053bd
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	080053bd 	.word	0x080053bd
 8005400:	0800554d 	.word	0x0800554d
 8005404:	08005471 	.word	0x08005471
 8005408:	0800552f 	.word	0x0800552f
 800540c:	080053bd 	.word	0x080053bd
 8005410:	080053bd 	.word	0x080053bd
 8005414:	0800556f 	.word	0x0800556f
 8005418:	080053bd 	.word	0x080053bd
 800541c:	08005471 	.word	0x08005471
 8005420:	080053bd 	.word	0x080053bd
 8005424:	080053bd 	.word	0x080053bd
 8005428:	08005537 	.word	0x08005537
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800543c:	2301      	movs	r3, #1
 800543e:	e0a3      	b.n	8005588 <_printf_i+0x1f4>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	6829      	ldr	r1, [r5, #0]
 8005444:	0606      	lsls	r6, r0, #24
 8005446:	f101 0304 	add.w	r3, r1, #4
 800544a:	d50a      	bpl.n	8005462 <_printf_i+0xce>
 800544c:	680e      	ldr	r6, [r1, #0]
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	2e00      	cmp	r6, #0
 8005452:	da03      	bge.n	800545c <_printf_i+0xc8>
 8005454:	232d      	movs	r3, #45	; 0x2d
 8005456:	4276      	negs	r6, r6
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	485e      	ldr	r0, [pc, #376]	; (80055d8 <_printf_i+0x244>)
 800545e:	230a      	movs	r3, #10
 8005460:	e019      	b.n	8005496 <_printf_i+0x102>
 8005462:	680e      	ldr	r6, [r1, #0]
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800546a:	bf18      	it	ne
 800546c:	b236      	sxthne	r6, r6
 800546e:	e7ef      	b.n	8005450 <_printf_i+0xbc>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	6029      	str	r1, [r5, #0]
 8005478:	0601      	lsls	r1, r0, #24
 800547a:	d501      	bpl.n	8005480 <_printf_i+0xec>
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	e002      	b.n	8005486 <_printf_i+0xf2>
 8005480:	0646      	lsls	r6, r0, #25
 8005482:	d5fb      	bpl.n	800547c <_printf_i+0xe8>
 8005484:	881e      	ldrh	r6, [r3, #0]
 8005486:	4854      	ldr	r0, [pc, #336]	; (80055d8 <_printf_i+0x244>)
 8005488:	2f6f      	cmp	r7, #111	; 0x6f
 800548a:	bf0c      	ite	eq
 800548c:	2308      	moveq	r3, #8
 800548e:	230a      	movne	r3, #10
 8005490:	2100      	movs	r1, #0
 8005492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005496:	6865      	ldr	r5, [r4, #4]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	2d00      	cmp	r5, #0
 800549c:	bfa2      	ittt	ge
 800549e:	6821      	ldrge	r1, [r4, #0]
 80054a0:	f021 0104 	bicge.w	r1, r1, #4
 80054a4:	6021      	strge	r1, [r4, #0]
 80054a6:	b90e      	cbnz	r6, 80054ac <_printf_i+0x118>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	d04d      	beq.n	8005548 <_printf_i+0x1b4>
 80054ac:	4615      	mov	r5, r2
 80054ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80054b2:	fb03 6711 	mls	r7, r3, r1, r6
 80054b6:	5dc7      	ldrb	r7, [r0, r7]
 80054b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054bc:	4637      	mov	r7, r6
 80054be:	42bb      	cmp	r3, r7
 80054c0:	460e      	mov	r6, r1
 80054c2:	d9f4      	bls.n	80054ae <_printf_i+0x11a>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10b      	bne.n	80054e0 <_printf_i+0x14c>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	07de      	lsls	r6, r3, #31
 80054cc:	d508      	bpl.n	80054e0 <_printf_i+0x14c>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	4299      	cmp	r1, r3
 80054d4:	bfde      	ittt	le
 80054d6:	2330      	movle	r3, #48	; 0x30
 80054d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054e0:	1b52      	subs	r2, r2, r5
 80054e2:	6122      	str	r2, [r4, #16]
 80054e4:	f8cd a000 	str.w	sl, [sp]
 80054e8:	464b      	mov	r3, r9
 80054ea:	aa03      	add	r2, sp, #12
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7ff fee2 	bl	80052b8 <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d14c      	bne.n	8005592 <_printf_i+0x1fe>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b004      	add	sp, #16
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	4835      	ldr	r0, [pc, #212]	; (80055d8 <_printf_i+0x244>)
 8005504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005508:	6829      	ldr	r1, [r5, #0]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005510:	6029      	str	r1, [r5, #0]
 8005512:	061d      	lsls	r5, r3, #24
 8005514:	d514      	bpl.n	8005540 <_printf_i+0x1ac>
 8005516:	07df      	lsls	r7, r3, #31
 8005518:	bf44      	itt	mi
 800551a:	f043 0320 	orrmi.w	r3, r3, #32
 800551e:	6023      	strmi	r3, [r4, #0]
 8005520:	b91e      	cbnz	r6, 800552a <_printf_i+0x196>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	f023 0320 	bic.w	r3, r3, #32
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	2310      	movs	r3, #16
 800552c:	e7b0      	b.n	8005490 <_printf_i+0xfc>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f043 0320 	orr.w	r3, r3, #32
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	2378      	movs	r3, #120	; 0x78
 8005538:	4828      	ldr	r0, [pc, #160]	; (80055dc <_printf_i+0x248>)
 800553a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800553e:	e7e3      	b.n	8005508 <_printf_i+0x174>
 8005540:	0659      	lsls	r1, r3, #25
 8005542:	bf48      	it	mi
 8005544:	b2b6      	uxthmi	r6, r6
 8005546:	e7e6      	b.n	8005516 <_printf_i+0x182>
 8005548:	4615      	mov	r5, r2
 800554a:	e7bb      	b.n	80054c4 <_printf_i+0x130>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6826      	ldr	r6, [r4, #0]
 8005550:	6961      	ldr	r1, [r4, #20]
 8005552:	1d18      	adds	r0, r3, #4
 8005554:	6028      	str	r0, [r5, #0]
 8005556:	0635      	lsls	r5, r6, #24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	d501      	bpl.n	8005560 <_printf_i+0x1cc>
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0x1d2>
 8005560:	0670      	lsls	r0, r6, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0x1c8>
 8005564:	8019      	strh	r1, [r3, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	4615      	mov	r5, r2
 800556c:	e7ba      	b.n	80054e4 <_printf_i+0x150>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	681d      	ldr	r5, [r3, #0]
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	2100      	movs	r1, #0
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa fe50 	bl	8000220 <memchr>
 8005580:	b108      	cbz	r0, 8005586 <_printf_i+0x1f2>
 8005582:	1b40      	subs	r0, r0, r5
 8005584:	6060      	str	r0, [r4, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	2300      	movs	r3, #0
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005590:	e7a8      	b.n	80054e4 <_printf_i+0x150>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	462a      	mov	r2, r5
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d0ab      	beq.n	80054f8 <_printf_i+0x164>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	079b      	lsls	r3, r3, #30
 80055a4:	d413      	bmi.n	80055ce <_printf_i+0x23a>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	4298      	cmp	r0, r3
 80055ac:	bfb8      	it	lt
 80055ae:	4618      	movlt	r0, r3
 80055b0:	e7a4      	b.n	80054fc <_printf_i+0x168>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4632      	mov	r2, r6
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	47d0      	blx	sl
 80055bc:	3001      	adds	r0, #1
 80055be:	d09b      	beq.n	80054f8 <_printf_i+0x164>
 80055c0:	3501      	adds	r5, #1
 80055c2:	68e3      	ldr	r3, [r4, #12]
 80055c4:	9903      	ldr	r1, [sp, #12]
 80055c6:	1a5b      	subs	r3, r3, r1
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dcf2      	bgt.n	80055b2 <_printf_i+0x21e>
 80055cc:	e7eb      	b.n	80055a6 <_printf_i+0x212>
 80055ce:	2500      	movs	r5, #0
 80055d0:	f104 0619 	add.w	r6, r4, #25
 80055d4:	e7f5      	b.n	80055c2 <_printf_i+0x22e>
 80055d6:	bf00      	nop
 80055d8:	08009722 	.word	0x08009722
 80055dc:	08009733 	.word	0x08009733

080055e0 <_scanf_float>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	b087      	sub	sp, #28
 80055e6:	4617      	mov	r7, r2
 80055e8:	9303      	str	r3, [sp, #12]
 80055ea:	688b      	ldr	r3, [r1, #8]
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055f2:	bf83      	ittte	hi
 80055f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055f8:	195b      	addhi	r3, r3, r5
 80055fa:	9302      	strhi	r3, [sp, #8]
 80055fc:	2300      	movls	r3, #0
 80055fe:	bf86      	itte	hi
 8005600:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005604:	608b      	strhi	r3, [r1, #8]
 8005606:	9302      	strls	r3, [sp, #8]
 8005608:	680b      	ldr	r3, [r1, #0]
 800560a:	468b      	mov	fp, r1
 800560c:	2500      	movs	r5, #0
 800560e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005612:	f84b 3b1c 	str.w	r3, [fp], #28
 8005616:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800561a:	4680      	mov	r8, r0
 800561c:	460c      	mov	r4, r1
 800561e:	465e      	mov	r6, fp
 8005620:	46aa      	mov	sl, r5
 8005622:	46a9      	mov	r9, r5
 8005624:	9501      	str	r5, [sp, #4]
 8005626:	68a2      	ldr	r2, [r4, #8]
 8005628:	b152      	cbz	r2, 8005640 <_scanf_float+0x60>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b4e      	cmp	r3, #78	; 0x4e
 8005630:	d864      	bhi.n	80056fc <_scanf_float+0x11c>
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d83c      	bhi.n	80056b0 <_scanf_float+0xd0>
 8005636:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800563a:	b2c8      	uxtb	r0, r1
 800563c:	280e      	cmp	r0, #14
 800563e:	d93a      	bls.n	80056b6 <_scanf_float+0xd6>
 8005640:	f1b9 0f00 	cmp.w	r9, #0
 8005644:	d003      	beq.n	800564e <_scanf_float+0x6e>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005652:	f1ba 0f01 	cmp.w	sl, #1
 8005656:	f200 8113 	bhi.w	8005880 <_scanf_float+0x2a0>
 800565a:	455e      	cmp	r6, fp
 800565c:	f200 8105 	bhi.w	800586a <_scanf_float+0x28a>
 8005660:	2501      	movs	r5, #1
 8005662:	4628      	mov	r0, r5
 8005664:	b007      	add	sp, #28
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800566e:	2a0d      	cmp	r2, #13
 8005670:	d8e6      	bhi.n	8005640 <_scanf_float+0x60>
 8005672:	a101      	add	r1, pc, #4	; (adr r1, 8005678 <_scanf_float+0x98>)
 8005674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005678:	080057b7 	.word	0x080057b7
 800567c:	08005641 	.word	0x08005641
 8005680:	08005641 	.word	0x08005641
 8005684:	08005641 	.word	0x08005641
 8005688:	08005817 	.word	0x08005817
 800568c:	080057ef 	.word	0x080057ef
 8005690:	08005641 	.word	0x08005641
 8005694:	08005641 	.word	0x08005641
 8005698:	080057c5 	.word	0x080057c5
 800569c:	08005641 	.word	0x08005641
 80056a0:	08005641 	.word	0x08005641
 80056a4:	08005641 	.word	0x08005641
 80056a8:	08005641 	.word	0x08005641
 80056ac:	0800577d 	.word	0x0800577d
 80056b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80056b4:	e7db      	b.n	800566e <_scanf_float+0x8e>
 80056b6:	290e      	cmp	r1, #14
 80056b8:	d8c2      	bhi.n	8005640 <_scanf_float+0x60>
 80056ba:	a001      	add	r0, pc, #4	; (adr r0, 80056c0 <_scanf_float+0xe0>)
 80056bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056c0:	0800576f 	.word	0x0800576f
 80056c4:	08005641 	.word	0x08005641
 80056c8:	0800576f 	.word	0x0800576f
 80056cc:	08005803 	.word	0x08005803
 80056d0:	08005641 	.word	0x08005641
 80056d4:	0800571d 	.word	0x0800571d
 80056d8:	08005759 	.word	0x08005759
 80056dc:	08005759 	.word	0x08005759
 80056e0:	08005759 	.word	0x08005759
 80056e4:	08005759 	.word	0x08005759
 80056e8:	08005759 	.word	0x08005759
 80056ec:	08005759 	.word	0x08005759
 80056f0:	08005759 	.word	0x08005759
 80056f4:	08005759 	.word	0x08005759
 80056f8:	08005759 	.word	0x08005759
 80056fc:	2b6e      	cmp	r3, #110	; 0x6e
 80056fe:	d809      	bhi.n	8005714 <_scanf_float+0x134>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d8b2      	bhi.n	800566a <_scanf_float+0x8a>
 8005704:	2b54      	cmp	r3, #84	; 0x54
 8005706:	d077      	beq.n	80057f8 <_scanf_float+0x218>
 8005708:	2b59      	cmp	r3, #89	; 0x59
 800570a:	d199      	bne.n	8005640 <_scanf_float+0x60>
 800570c:	2d07      	cmp	r5, #7
 800570e:	d197      	bne.n	8005640 <_scanf_float+0x60>
 8005710:	2508      	movs	r5, #8
 8005712:	e029      	b.n	8005768 <_scanf_float+0x188>
 8005714:	2b74      	cmp	r3, #116	; 0x74
 8005716:	d06f      	beq.n	80057f8 <_scanf_float+0x218>
 8005718:	2b79      	cmp	r3, #121	; 0x79
 800571a:	e7f6      	b.n	800570a <_scanf_float+0x12a>
 800571c:	6821      	ldr	r1, [r4, #0]
 800571e:	05c8      	lsls	r0, r1, #23
 8005720:	d51a      	bpl.n	8005758 <_scanf_float+0x178>
 8005722:	9b02      	ldr	r3, [sp, #8]
 8005724:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005728:	6021      	str	r1, [r4, #0]
 800572a:	f109 0901 	add.w	r9, r9, #1
 800572e:	b11b      	cbz	r3, 8005738 <_scanf_float+0x158>
 8005730:	3b01      	subs	r3, #1
 8005732:	3201      	adds	r2, #1
 8005734:	9302      	str	r3, [sp, #8]
 8005736:	60a2      	str	r2, [r4, #8]
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	3b01      	subs	r3, #1
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	3301      	adds	r3, #1
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3b01      	subs	r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	f340 8084 	ble.w	8005858 <_scanf_float+0x278>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	e766      	b.n	8005626 <_scanf_float+0x46>
 8005758:	eb1a 0f05 	cmn.w	sl, r5
 800575c:	f47f af70 	bne.w	8005640 <_scanf_float+0x60>
 8005760:	6822      	ldr	r2, [r4, #0]
 8005762:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	f806 3b01 	strb.w	r3, [r6], #1
 800576c:	e7e4      	b.n	8005738 <_scanf_float+0x158>
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	0610      	lsls	r0, r2, #24
 8005772:	f57f af65 	bpl.w	8005640 <_scanf_float+0x60>
 8005776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800577a:	e7f4      	b.n	8005766 <_scanf_float+0x186>
 800577c:	f1ba 0f00 	cmp.w	sl, #0
 8005780:	d10e      	bne.n	80057a0 <_scanf_float+0x1c0>
 8005782:	f1b9 0f00 	cmp.w	r9, #0
 8005786:	d10e      	bne.n	80057a6 <_scanf_float+0x1c6>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800578e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005792:	d108      	bne.n	80057a6 <_scanf_float+0x1c6>
 8005794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005798:	6022      	str	r2, [r4, #0]
 800579a:	f04f 0a01 	mov.w	sl, #1
 800579e:	e7e3      	b.n	8005768 <_scanf_float+0x188>
 80057a0:	f1ba 0f02 	cmp.w	sl, #2
 80057a4:	d055      	beq.n	8005852 <_scanf_float+0x272>
 80057a6:	2d01      	cmp	r5, #1
 80057a8:	d002      	beq.n	80057b0 <_scanf_float+0x1d0>
 80057aa:	2d04      	cmp	r5, #4
 80057ac:	f47f af48 	bne.w	8005640 <_scanf_float+0x60>
 80057b0:	3501      	adds	r5, #1
 80057b2:	b2ed      	uxtb	r5, r5
 80057b4:	e7d8      	b.n	8005768 <_scanf_float+0x188>
 80057b6:	f1ba 0f01 	cmp.w	sl, #1
 80057ba:	f47f af41 	bne.w	8005640 <_scanf_float+0x60>
 80057be:	f04f 0a02 	mov.w	sl, #2
 80057c2:	e7d1      	b.n	8005768 <_scanf_float+0x188>
 80057c4:	b97d      	cbnz	r5, 80057e6 <_scanf_float+0x206>
 80057c6:	f1b9 0f00 	cmp.w	r9, #0
 80057ca:	f47f af3c 	bne.w	8005646 <_scanf_float+0x66>
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057d8:	f47f af39 	bne.w	800564e <_scanf_float+0x6e>
 80057dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057e0:	6022      	str	r2, [r4, #0]
 80057e2:	2501      	movs	r5, #1
 80057e4:	e7c0      	b.n	8005768 <_scanf_float+0x188>
 80057e6:	2d03      	cmp	r5, #3
 80057e8:	d0e2      	beq.n	80057b0 <_scanf_float+0x1d0>
 80057ea:	2d05      	cmp	r5, #5
 80057ec:	e7de      	b.n	80057ac <_scanf_float+0x1cc>
 80057ee:	2d02      	cmp	r5, #2
 80057f0:	f47f af26 	bne.w	8005640 <_scanf_float+0x60>
 80057f4:	2503      	movs	r5, #3
 80057f6:	e7b7      	b.n	8005768 <_scanf_float+0x188>
 80057f8:	2d06      	cmp	r5, #6
 80057fa:	f47f af21 	bne.w	8005640 <_scanf_float+0x60>
 80057fe:	2507      	movs	r5, #7
 8005800:	e7b2      	b.n	8005768 <_scanf_float+0x188>
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	0591      	lsls	r1, r2, #22
 8005806:	f57f af1b 	bpl.w	8005640 <_scanf_float+0x60>
 800580a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	f8cd 9004 	str.w	r9, [sp, #4]
 8005814:	e7a8      	b.n	8005768 <_scanf_float+0x188>
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800581c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005820:	d006      	beq.n	8005830 <_scanf_float+0x250>
 8005822:	0550      	lsls	r0, r2, #21
 8005824:	f57f af0c 	bpl.w	8005640 <_scanf_float+0x60>
 8005828:	f1b9 0f00 	cmp.w	r9, #0
 800582c:	f43f af0f 	beq.w	800564e <_scanf_float+0x6e>
 8005830:	0591      	lsls	r1, r2, #22
 8005832:	bf58      	it	pl
 8005834:	9901      	ldrpl	r1, [sp, #4]
 8005836:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800583a:	bf58      	it	pl
 800583c:	eba9 0101 	subpl.w	r1, r9, r1
 8005840:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005844:	bf58      	it	pl
 8005846:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800584a:	6022      	str	r2, [r4, #0]
 800584c:	f04f 0900 	mov.w	r9, #0
 8005850:	e78a      	b.n	8005768 <_scanf_float+0x188>
 8005852:	f04f 0a03 	mov.w	sl, #3
 8005856:	e787      	b.n	8005768 <_scanf_float+0x188>
 8005858:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800585c:	4639      	mov	r1, r7
 800585e:	4640      	mov	r0, r8
 8005860:	4798      	blx	r3
 8005862:	2800      	cmp	r0, #0
 8005864:	f43f aedf 	beq.w	8005626 <_scanf_float+0x46>
 8005868:	e6ea      	b.n	8005640 <_scanf_float+0x60>
 800586a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800586e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005872:	463a      	mov	r2, r7
 8005874:	4640      	mov	r0, r8
 8005876:	4798      	blx	r3
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	3b01      	subs	r3, #1
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	e6ec      	b.n	800565a <_scanf_float+0x7a>
 8005880:	1e6b      	subs	r3, r5, #1
 8005882:	2b06      	cmp	r3, #6
 8005884:	d825      	bhi.n	80058d2 <_scanf_float+0x2f2>
 8005886:	2d02      	cmp	r5, #2
 8005888:	d836      	bhi.n	80058f8 <_scanf_float+0x318>
 800588a:	455e      	cmp	r6, fp
 800588c:	f67f aee8 	bls.w	8005660 <_scanf_float+0x80>
 8005890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005894:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005898:	463a      	mov	r2, r7
 800589a:	4640      	mov	r0, r8
 800589c:	4798      	blx	r3
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	e7f1      	b.n	800588a <_scanf_float+0x2aa>
 80058a6:	9802      	ldr	r0, [sp, #8]
 80058a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80058b0:	9002      	str	r0, [sp, #8]
 80058b2:	463a      	mov	r2, r7
 80058b4:	4640      	mov	r0, r8
 80058b6:	4798      	blx	r3
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058c2:	fa5f fa8a 	uxtb.w	sl, sl
 80058c6:	f1ba 0f02 	cmp.w	sl, #2
 80058ca:	d1ec      	bne.n	80058a6 <_scanf_float+0x2c6>
 80058cc:	3d03      	subs	r5, #3
 80058ce:	b2ed      	uxtb	r5, r5
 80058d0:	1b76      	subs	r6, r6, r5
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	05da      	lsls	r2, r3, #23
 80058d6:	d52f      	bpl.n	8005938 <_scanf_float+0x358>
 80058d8:	055b      	lsls	r3, r3, #21
 80058da:	d510      	bpl.n	80058fe <_scanf_float+0x31e>
 80058dc:	455e      	cmp	r6, fp
 80058de:	f67f aebf 	bls.w	8005660 <_scanf_float+0x80>
 80058e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058ea:	463a      	mov	r2, r7
 80058ec:	4640      	mov	r0, r8
 80058ee:	4798      	blx	r3
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	e7f1      	b.n	80058dc <_scanf_float+0x2fc>
 80058f8:	46aa      	mov	sl, r5
 80058fa:	9602      	str	r6, [sp, #8]
 80058fc:	e7df      	b.n	80058be <_scanf_float+0x2de>
 80058fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	2965      	cmp	r1, #101	; 0x65
 8005906:	f103 33ff 	add.w	r3, r3, #4294967295
 800590a:	f106 35ff 	add.w	r5, r6, #4294967295
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	d00c      	beq.n	800592c <_scanf_float+0x34c>
 8005912:	2945      	cmp	r1, #69	; 0x45
 8005914:	d00a      	beq.n	800592c <_scanf_float+0x34c>
 8005916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800591a:	463a      	mov	r2, r7
 800591c:	4640      	mov	r0, r8
 800591e:	4798      	blx	r3
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005926:	3b01      	subs	r3, #1
 8005928:	1eb5      	subs	r5, r6, #2
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005930:	463a      	mov	r2, r7
 8005932:	4640      	mov	r0, r8
 8005934:	4798      	blx	r3
 8005936:	462e      	mov	r6, r5
 8005938:	6825      	ldr	r5, [r4, #0]
 800593a:	f015 0510 	ands.w	r5, r5, #16
 800593e:	d159      	bne.n	80059f4 <_scanf_float+0x414>
 8005940:	7035      	strb	r5, [r6, #0]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594c:	d11b      	bne.n	8005986 <_scanf_float+0x3a6>
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	454b      	cmp	r3, r9
 8005952:	eba3 0209 	sub.w	r2, r3, r9
 8005956:	d123      	bne.n	80059a0 <_scanf_float+0x3c0>
 8005958:	2200      	movs	r2, #0
 800595a:	4659      	mov	r1, fp
 800595c:	4640      	mov	r0, r8
 800595e:	f000 fe99 	bl	8006694 <_strtod_r>
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	f012 0f02 	tst.w	r2, #2
 800596a:	ec57 6b10 	vmov	r6, r7, d0
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	d021      	beq.n	80059b6 <_scanf_float+0x3d6>
 8005972:	9903      	ldr	r1, [sp, #12]
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	600a      	str	r2, [r1, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	e9c3 6700 	strd	r6, r7, [r3]
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60e3      	str	r3, [r4, #12]
 8005984:	e66d      	b.n	8005662 <_scanf_float+0x82>
 8005986:	9b04      	ldr	r3, [sp, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0e5      	beq.n	8005958 <_scanf_float+0x378>
 800598c:	9905      	ldr	r1, [sp, #20]
 800598e:	230a      	movs	r3, #10
 8005990:	462a      	mov	r2, r5
 8005992:	3101      	adds	r1, #1
 8005994:	4640      	mov	r0, r8
 8005996:	f000 ff05 	bl	80067a4 <_strtol_r>
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	9e05      	ldr	r6, [sp, #20]
 800599e:	1ac2      	subs	r2, r0, r3
 80059a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059a4:	429e      	cmp	r6, r3
 80059a6:	bf28      	it	cs
 80059a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059ac:	4912      	ldr	r1, [pc, #72]	; (80059f8 <_scanf_float+0x418>)
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f82c 	bl	8005a0c <siprintf>
 80059b4:	e7d0      	b.n	8005958 <_scanf_float+0x378>
 80059b6:	9903      	ldr	r1, [sp, #12]
 80059b8:	f012 0f04 	tst.w	r2, #4
 80059bc:	f103 0204 	add.w	r2, r3, #4
 80059c0:	600a      	str	r2, [r1, #0]
 80059c2:	d1d9      	bne.n	8005978 <_scanf_float+0x398>
 80059c4:	f8d3 8000 	ldr.w	r8, [r3]
 80059c8:	ee10 2a10 	vmov	r2, s0
 80059cc:	ee10 0a10 	vmov	r0, s0
 80059d0:	463b      	mov	r3, r7
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fb f8ca 	bl	8000b6c <__aeabi_dcmpun>
 80059d8:	b128      	cbz	r0, 80059e6 <_scanf_float+0x406>
 80059da:	4808      	ldr	r0, [pc, #32]	; (80059fc <_scanf_float+0x41c>)
 80059dc:	f000 f810 	bl	8005a00 <nanf>
 80059e0:	ed88 0a00 	vstr	s0, [r8]
 80059e4:	e7cb      	b.n	800597e <_scanf_float+0x39e>
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fb f91d 	bl	8000c28 <__aeabi_d2f>
 80059ee:	f8c8 0000 	str.w	r0, [r8]
 80059f2:	e7c4      	b.n	800597e <_scanf_float+0x39e>
 80059f4:	2500      	movs	r5, #0
 80059f6:	e634      	b.n	8005662 <_scanf_float+0x82>
 80059f8:	08009744 	.word	0x08009744
 80059fc:	08009b50 	.word	0x08009b50

08005a00 <nanf>:
 8005a00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a08 <nanf+0x8>
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	7fc00000 	.word	0x7fc00000

08005a0c <siprintf>:
 8005a0c:	b40e      	push	{r1, r2, r3}
 8005a0e:	b500      	push	{lr}
 8005a10:	b09c      	sub	sp, #112	; 0x70
 8005a12:	ab1d      	add	r3, sp, #116	; 0x74
 8005a14:	9002      	str	r0, [sp, #8]
 8005a16:	9006      	str	r0, [sp, #24]
 8005a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a1c:	4809      	ldr	r0, [pc, #36]	; (8005a44 <siprintf+0x38>)
 8005a1e:	9107      	str	r1, [sp, #28]
 8005a20:	9104      	str	r1, [sp, #16]
 8005a22:	4909      	ldr	r1, [pc, #36]	; (8005a48 <siprintf+0x3c>)
 8005a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a28:	9105      	str	r1, [sp, #20]
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	a902      	add	r1, sp, #8
 8005a30:	f002 fee4 	bl	80087fc <_svfiprintf_r>
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	b01c      	add	sp, #112	; 0x70
 8005a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a40:	b003      	add	sp, #12
 8005a42:	4770      	bx	lr
 8005a44:	2000000c 	.word	0x2000000c
 8005a48:	ffff0208 	.word	0xffff0208

08005a4c <sulp>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4604      	mov	r4, r0
 8005a50:	460d      	mov	r5, r1
 8005a52:	ec45 4b10 	vmov	d0, r4, r5
 8005a56:	4616      	mov	r6, r2
 8005a58:	f002 fc2e 	bl	80082b8 <__ulp>
 8005a5c:	ec51 0b10 	vmov	r0, r1, d0
 8005a60:	b17e      	cbz	r6, 8005a82 <sulp+0x36>
 8005a62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005a66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd09      	ble.n	8005a82 <sulp+0x36>
 8005a6e:	051b      	lsls	r3, r3, #20
 8005a70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a74:	2400      	movs	r4, #0
 8005a76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	f7fa fddb 	bl	8000638 <__aeabi_dmul>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	0000      	movs	r0, r0
	...

08005a88 <_strtod_l>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	ed2d 8b02 	vpush	{d8}
 8005a90:	b09d      	sub	sp, #116	; 0x74
 8005a92:	461f      	mov	r7, r3
 8005a94:	2300      	movs	r3, #0
 8005a96:	9318      	str	r3, [sp, #96]	; 0x60
 8005a98:	4ba2      	ldr	r3, [pc, #648]	; (8005d24 <_strtod_l+0x29c>)
 8005a9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	4688      	mov	r8, r1
 8005aa6:	f7fa fbb3 	bl	8000210 <strlen>
 8005aaa:	f04f 0a00 	mov.w	sl, #0
 8005aae:	4605      	mov	r5, r0
 8005ab0:	f04f 0b00 	mov.w	fp, #0
 8005ab4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	2a2b      	cmp	r2, #43	; 0x2b
 8005abe:	d04e      	beq.n	8005b5e <_strtod_l+0xd6>
 8005ac0:	d83b      	bhi.n	8005b3a <_strtod_l+0xb2>
 8005ac2:	2a0d      	cmp	r2, #13
 8005ac4:	d834      	bhi.n	8005b30 <_strtod_l+0xa8>
 8005ac6:	2a08      	cmp	r2, #8
 8005ac8:	d834      	bhi.n	8005b34 <_strtod_l+0xac>
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d03e      	beq.n	8005b4c <_strtod_l+0xc4>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005ad4:	7833      	ldrb	r3, [r6, #0]
 8005ad6:	2b30      	cmp	r3, #48	; 0x30
 8005ad8:	f040 80b0 	bne.w	8005c3c <_strtod_l+0x1b4>
 8005adc:	7873      	ldrb	r3, [r6, #1]
 8005ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ae2:	2b58      	cmp	r3, #88	; 0x58
 8005ae4:	d168      	bne.n	8005bb8 <_strtod_l+0x130>
 8005ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	ab18      	add	r3, sp, #96	; 0x60
 8005aec:	9702      	str	r7, [sp, #8]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4a8d      	ldr	r2, [pc, #564]	; (8005d28 <_strtod_l+0x2a0>)
 8005af2:	ab19      	add	r3, sp, #100	; 0x64
 8005af4:	a917      	add	r1, sp, #92	; 0x5c
 8005af6:	4620      	mov	r0, r4
 8005af8:	f001 fd38 	bl	800756c <__gethex>
 8005afc:	f010 0707 	ands.w	r7, r0, #7
 8005b00:	4605      	mov	r5, r0
 8005b02:	d005      	beq.n	8005b10 <_strtod_l+0x88>
 8005b04:	2f06      	cmp	r7, #6
 8005b06:	d12c      	bne.n	8005b62 <_strtod_l+0xda>
 8005b08:	3601      	adds	r6, #1
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 8590 	bne.w	8006638 <_strtod_l+0xbb0>
 8005b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1a:	b1eb      	cbz	r3, 8005b58 <_strtod_l+0xd0>
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b22:	ec43 2b10 	vmov	d0, r2, r3
 8005b26:	b01d      	add	sp, #116	; 0x74
 8005b28:	ecbd 8b02 	vpop	{d8}
 8005b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b30:	2a20      	cmp	r2, #32
 8005b32:	d1cc      	bne.n	8005ace <_strtod_l+0x46>
 8005b34:	3301      	adds	r3, #1
 8005b36:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b38:	e7be      	b.n	8005ab8 <_strtod_l+0x30>
 8005b3a:	2a2d      	cmp	r2, #45	; 0x2d
 8005b3c:	d1c7      	bne.n	8005ace <_strtod_l+0x46>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	920a      	str	r2, [sp, #40]	; 0x28
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1c2      	bne.n	8005ad2 <_strtod_l+0x4a>
 8005b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 856e 	bne.w	8006634 <_strtod_l+0xbac>
 8005b58:	4652      	mov	r2, sl
 8005b5a:	465b      	mov	r3, fp
 8005b5c:	e7e1      	b.n	8005b22 <_strtod_l+0x9a>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	e7ee      	b.n	8005b40 <_strtod_l+0xb8>
 8005b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b64:	b13a      	cbz	r2, 8005b76 <_strtod_l+0xee>
 8005b66:	2135      	movs	r1, #53	; 0x35
 8005b68:	a81a      	add	r0, sp, #104	; 0x68
 8005b6a:	f002 fcb0 	bl	80084ce <__copybits>
 8005b6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b70:	4620      	mov	r0, r4
 8005b72:	f002 f86f 	bl	8007c54 <_Bfree>
 8005b76:	3f01      	subs	r7, #1
 8005b78:	2f04      	cmp	r7, #4
 8005b7a:	d806      	bhi.n	8005b8a <_strtod_l+0x102>
 8005b7c:	e8df f007 	tbb	[pc, r7]
 8005b80:	1714030a 	.word	0x1714030a
 8005b84:	0a          	.byte	0x0a
 8005b85:	00          	.byte	0x00
 8005b86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005b8a:	0728      	lsls	r0, r5, #28
 8005b8c:	d5c0      	bpl.n	8005b10 <_strtod_l+0x88>
 8005b8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005b92:	e7bd      	b.n	8005b10 <_strtod_l+0x88>
 8005b94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005b98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ba6:	e7f0      	b.n	8005b8a <_strtod_l+0x102>
 8005ba8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005d2c <_strtod_l+0x2a4>
 8005bac:	e7ed      	b.n	8005b8a <_strtod_l+0x102>
 8005bae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005bb2:	f04f 3aff 	mov.w	sl, #4294967295
 8005bb6:	e7e8      	b.n	8005b8a <_strtod_l+0x102>
 8005bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b30      	cmp	r3, #48	; 0x30
 8005bc2:	d0f9      	beq.n	8005bb8 <_strtod_l+0x130>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0a3      	beq.n	8005b10 <_strtod_l+0x88>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f04f 0900 	mov.w	r9, #0
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bd2:	9308      	str	r3, [sp, #32]
 8005bd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8005bd8:	464f      	mov	r7, r9
 8005bda:	220a      	movs	r2, #10
 8005bdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005bde:	7806      	ldrb	r6, [r0, #0]
 8005be0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005be4:	b2d9      	uxtb	r1, r3
 8005be6:	2909      	cmp	r1, #9
 8005be8:	d92a      	bls.n	8005c40 <_strtod_l+0x1b8>
 8005bea:	9905      	ldr	r1, [sp, #20]
 8005bec:	462a      	mov	r2, r5
 8005bee:	f002 ff1f 	bl	8008a30 <strncmp>
 8005bf2:	b398      	cbz	r0, 8005c5c <_strtod_l+0x1d4>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	463d      	mov	r5, r7
 8005bfa:	9005      	str	r0, [sp, #20]
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2a65      	cmp	r2, #101	; 0x65
 8005c00:	d001      	beq.n	8005c06 <_strtod_l+0x17e>
 8005c02:	2a45      	cmp	r2, #69	; 0x45
 8005c04:	d118      	bne.n	8005c38 <_strtod_l+0x1b0>
 8005c06:	b91d      	cbnz	r5, 8005c10 <_strtod_l+0x188>
 8005c08:	9a04      	ldr	r2, [sp, #16]
 8005c0a:	4302      	orrs	r2, r0
 8005c0c:	d09e      	beq.n	8005b4c <_strtod_l+0xc4>
 8005c0e:	2500      	movs	r5, #0
 8005c10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005c14:	f108 0201 	add.w	r2, r8, #1
 8005c18:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005c1e:	2a2b      	cmp	r2, #43	; 0x2b
 8005c20:	d075      	beq.n	8005d0e <_strtod_l+0x286>
 8005c22:	2a2d      	cmp	r2, #45	; 0x2d
 8005c24:	d07b      	beq.n	8005d1e <_strtod_l+0x296>
 8005c26:	f04f 0c00 	mov.w	ip, #0
 8005c2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005c2e:	2909      	cmp	r1, #9
 8005c30:	f240 8082 	bls.w	8005d38 <_strtod_l+0x2b0>
 8005c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c38:	2600      	movs	r6, #0
 8005c3a:	e09d      	b.n	8005d78 <_strtod_l+0x2f0>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e7c4      	b.n	8005bca <_strtod_l+0x142>
 8005c40:	2f08      	cmp	r7, #8
 8005c42:	bfd8      	it	le
 8005c44:	9907      	ldrle	r1, [sp, #28]
 8005c46:	f100 0001 	add.w	r0, r0, #1
 8005c4a:	bfda      	itte	le
 8005c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c50:	9307      	strle	r3, [sp, #28]
 8005c52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005c56:	3701      	adds	r7, #1
 8005c58:	9017      	str	r0, [sp, #92]	; 0x5c
 8005c5a:	e7bf      	b.n	8005bdc <_strtod_l+0x154>
 8005c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c5e:	195a      	adds	r2, r3, r5
 8005c60:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c62:	5d5a      	ldrb	r2, [r3, r5]
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	d037      	beq.n	8005cd8 <_strtod_l+0x250>
 8005c68:	9005      	str	r0, [sp, #20]
 8005c6a:	463d      	mov	r5, r7
 8005c6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c70:	2b09      	cmp	r3, #9
 8005c72:	d912      	bls.n	8005c9a <_strtod_l+0x212>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e7c2      	b.n	8005bfe <_strtod_l+0x176>
 8005c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c7e:	785a      	ldrb	r2, [r3, #1]
 8005c80:	3001      	adds	r0, #1
 8005c82:	2a30      	cmp	r2, #48	; 0x30
 8005c84:	d0f8      	beq.n	8005c78 <_strtod_l+0x1f0>
 8005c86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	f200 84d9 	bhi.w	8006642 <_strtod_l+0xbba>
 8005c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c92:	9005      	str	r0, [sp, #20]
 8005c94:	2000      	movs	r0, #0
 8005c96:	9308      	str	r3, [sp, #32]
 8005c98:	4605      	mov	r5, r0
 8005c9a:	3a30      	subs	r2, #48	; 0x30
 8005c9c:	f100 0301 	add.w	r3, r0, #1
 8005ca0:	d014      	beq.n	8005ccc <_strtod_l+0x244>
 8005ca2:	9905      	ldr	r1, [sp, #20]
 8005ca4:	4419      	add	r1, r3
 8005ca6:	9105      	str	r1, [sp, #20]
 8005ca8:	462b      	mov	r3, r5
 8005caa:	eb00 0e05 	add.w	lr, r0, r5
 8005cae:	210a      	movs	r1, #10
 8005cb0:	4573      	cmp	r3, lr
 8005cb2:	d113      	bne.n	8005cdc <_strtod_l+0x254>
 8005cb4:	182b      	adds	r3, r5, r0
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	f105 0501 	add.w	r5, r5, #1
 8005cbc:	4405      	add	r5, r0
 8005cbe:	dc1c      	bgt.n	8005cfa <_strtod_l+0x272>
 8005cc0:	9907      	ldr	r1, [sp, #28]
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	fb03 2301 	mla	r3, r3, r1, r2
 8005cc8:	9307      	str	r3, [sp, #28]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cce:	1c51      	adds	r1, r2, #1
 8005cd0:	9117      	str	r1, [sp, #92]	; 0x5c
 8005cd2:	7852      	ldrb	r2, [r2, #1]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	e7c9      	b.n	8005c6c <_strtod_l+0x1e4>
 8005cd8:	4638      	mov	r0, r7
 8005cda:	e7d2      	b.n	8005c82 <_strtod_l+0x1fa>
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	dc04      	bgt.n	8005cea <_strtod_l+0x262>
 8005ce0:	9e07      	ldr	r6, [sp, #28]
 8005ce2:	434e      	muls	r6, r1
 8005ce4:	9607      	str	r6, [sp, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	e7e2      	b.n	8005cb0 <_strtod_l+0x228>
 8005cea:	f103 0c01 	add.w	ip, r3, #1
 8005cee:	f1bc 0f10 	cmp.w	ip, #16
 8005cf2:	bfd8      	it	le
 8005cf4:	fb01 f909 	mulle.w	r9, r1, r9
 8005cf8:	e7f5      	b.n	8005ce6 <_strtod_l+0x25e>
 8005cfa:	2d10      	cmp	r5, #16
 8005cfc:	bfdc      	itt	le
 8005cfe:	230a      	movle	r3, #10
 8005d00:	fb03 2909 	mlale	r9, r3, r9, r2
 8005d04:	e7e1      	b.n	8005cca <_strtod_l+0x242>
 8005d06:	2300      	movs	r3, #0
 8005d08:	9305      	str	r3, [sp, #20]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e77c      	b.n	8005c08 <_strtod_l+0x180>
 8005d0e:	f04f 0c00 	mov.w	ip, #0
 8005d12:	f108 0202 	add.w	r2, r8, #2
 8005d16:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005d1c:	e785      	b.n	8005c2a <_strtod_l+0x1a2>
 8005d1e:	f04f 0c01 	mov.w	ip, #1
 8005d22:	e7f6      	b.n	8005d12 <_strtod_l+0x28a>
 8005d24:	08009998 	.word	0x08009998
 8005d28:	0800974c 	.word	0x0800974c
 8005d2c:	7ff00000 	.word	0x7ff00000
 8005d30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d32:	1c51      	adds	r1, r2, #1
 8005d34:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d36:	7852      	ldrb	r2, [r2, #1]
 8005d38:	2a30      	cmp	r2, #48	; 0x30
 8005d3a:	d0f9      	beq.n	8005d30 <_strtod_l+0x2a8>
 8005d3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d40:	2908      	cmp	r1, #8
 8005d42:	f63f af79 	bhi.w	8005c38 <_strtod_l+0x1b0>
 8005d46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d4c:	9206      	str	r2, [sp, #24]
 8005d4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d50:	1c51      	adds	r1, r2, #1
 8005d52:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d54:	7852      	ldrb	r2, [r2, #1]
 8005d56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005d5a:	2e09      	cmp	r6, #9
 8005d5c:	d937      	bls.n	8005dce <_strtod_l+0x346>
 8005d5e:	9e06      	ldr	r6, [sp, #24]
 8005d60:	1b89      	subs	r1, r1, r6
 8005d62:	2908      	cmp	r1, #8
 8005d64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005d68:	dc02      	bgt.n	8005d70 <_strtod_l+0x2e8>
 8005d6a:	4576      	cmp	r6, lr
 8005d6c:	bfa8      	it	ge
 8005d6e:	4676      	movge	r6, lr
 8005d70:	f1bc 0f00 	cmp.w	ip, #0
 8005d74:	d000      	beq.n	8005d78 <_strtod_l+0x2f0>
 8005d76:	4276      	negs	r6, r6
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	d14d      	bne.n	8005e18 <_strtod_l+0x390>
 8005d7c:	9904      	ldr	r1, [sp, #16]
 8005d7e:	4301      	orrs	r1, r0
 8005d80:	f47f aec6 	bne.w	8005b10 <_strtod_l+0x88>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f47f aee1 	bne.w	8005b4c <_strtod_l+0xc4>
 8005d8a:	2a69      	cmp	r2, #105	; 0x69
 8005d8c:	d027      	beq.n	8005dde <_strtod_l+0x356>
 8005d8e:	dc24      	bgt.n	8005dda <_strtod_l+0x352>
 8005d90:	2a49      	cmp	r2, #73	; 0x49
 8005d92:	d024      	beq.n	8005dde <_strtod_l+0x356>
 8005d94:	2a4e      	cmp	r2, #78	; 0x4e
 8005d96:	f47f aed9 	bne.w	8005b4c <_strtod_l+0xc4>
 8005d9a:	499f      	ldr	r1, [pc, #636]	; (8006018 <_strtod_l+0x590>)
 8005d9c:	a817      	add	r0, sp, #92	; 0x5c
 8005d9e:	f001 fe3d 	bl	8007a1c <__match>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f43f aed2 	beq.w	8005b4c <_strtod_l+0xc4>
 8005da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b28      	cmp	r3, #40	; 0x28
 8005dae:	d12d      	bne.n	8005e0c <_strtod_l+0x384>
 8005db0:	499a      	ldr	r1, [pc, #616]	; (800601c <_strtod_l+0x594>)
 8005db2:	aa1a      	add	r2, sp, #104	; 0x68
 8005db4:	a817      	add	r0, sp, #92	; 0x5c
 8005db6:	f001 fe45 	bl	8007a44 <__hexnan>
 8005dba:	2805      	cmp	r0, #5
 8005dbc:	d126      	bne.n	8005e0c <_strtod_l+0x384>
 8005dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005dc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005dc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005dcc:	e6a0      	b.n	8005b10 <_strtod_l+0x88>
 8005dce:	210a      	movs	r1, #10
 8005dd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005dd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005dd8:	e7b9      	b.n	8005d4e <_strtod_l+0x2c6>
 8005dda:	2a6e      	cmp	r2, #110	; 0x6e
 8005ddc:	e7db      	b.n	8005d96 <_strtod_l+0x30e>
 8005dde:	4990      	ldr	r1, [pc, #576]	; (8006020 <_strtod_l+0x598>)
 8005de0:	a817      	add	r0, sp, #92	; 0x5c
 8005de2:	f001 fe1b 	bl	8007a1c <__match>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f43f aeb0 	beq.w	8005b4c <_strtod_l+0xc4>
 8005dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dee:	498d      	ldr	r1, [pc, #564]	; (8006024 <_strtod_l+0x59c>)
 8005df0:	3b01      	subs	r3, #1
 8005df2:	a817      	add	r0, sp, #92	; 0x5c
 8005df4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005df6:	f001 fe11 	bl	8007a1c <__match>
 8005dfa:	b910      	cbnz	r0, 8005e02 <_strtod_l+0x37a>
 8005dfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006034 <_strtod_l+0x5ac>
 8005e06:	f04f 0a00 	mov.w	sl, #0
 8005e0a:	e681      	b.n	8005b10 <_strtod_l+0x88>
 8005e0c:	4886      	ldr	r0, [pc, #536]	; (8006028 <_strtod_l+0x5a0>)
 8005e0e:	f002 fdf7 	bl	8008a00 <nan>
 8005e12:	ec5b ab10 	vmov	sl, fp, d0
 8005e16:	e67b      	b.n	8005b10 <_strtod_l+0x88>
 8005e18:	9b05      	ldr	r3, [sp, #20]
 8005e1a:	9807      	ldr	r0, [sp, #28]
 8005e1c:	1af3      	subs	r3, r6, r3
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	bf08      	it	eq
 8005e22:	462f      	moveq	r7, r5
 8005e24:	2d10      	cmp	r5, #16
 8005e26:	9306      	str	r3, [sp, #24]
 8005e28:	46a8      	mov	r8, r5
 8005e2a:	bfa8      	it	ge
 8005e2c:	f04f 0810 	movge.w	r8, #16
 8005e30:	f7fa fb88 	bl	8000544 <__aeabi_ui2d>
 8005e34:	2d09      	cmp	r5, #9
 8005e36:	4682      	mov	sl, r0
 8005e38:	468b      	mov	fp, r1
 8005e3a:	dd13      	ble.n	8005e64 <_strtod_l+0x3dc>
 8005e3c:	4b7b      	ldr	r3, [pc, #492]	; (800602c <_strtod_l+0x5a4>)
 8005e3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e46:	f7fa fbf7 	bl	8000638 <__aeabi_dmul>
 8005e4a:	4682      	mov	sl, r0
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	468b      	mov	fp, r1
 8005e50:	f7fa fb78 	bl	8000544 <__aeabi_ui2d>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4650      	mov	r0, sl
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	f7fa fa36 	bl	80002cc <__adddf3>
 8005e60:	4682      	mov	sl, r0
 8005e62:	468b      	mov	fp, r1
 8005e64:	2d0f      	cmp	r5, #15
 8005e66:	dc38      	bgt.n	8005eda <_strtod_l+0x452>
 8005e68:	9b06      	ldr	r3, [sp, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f43f ae50 	beq.w	8005b10 <_strtod_l+0x88>
 8005e70:	dd24      	ble.n	8005ebc <_strtod_l+0x434>
 8005e72:	2b16      	cmp	r3, #22
 8005e74:	dc0b      	bgt.n	8005e8e <_strtod_l+0x406>
 8005e76:	496d      	ldr	r1, [pc, #436]	; (800602c <_strtod_l+0x5a4>)
 8005e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e80:	4652      	mov	r2, sl
 8005e82:	465b      	mov	r3, fp
 8005e84:	f7fa fbd8 	bl	8000638 <__aeabi_dmul>
 8005e88:	4682      	mov	sl, r0
 8005e8a:	468b      	mov	fp, r1
 8005e8c:	e640      	b.n	8005b10 <_strtod_l+0x88>
 8005e8e:	9a06      	ldr	r2, [sp, #24]
 8005e90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005e94:	4293      	cmp	r3, r2
 8005e96:	db20      	blt.n	8005eda <_strtod_l+0x452>
 8005e98:	4c64      	ldr	r4, [pc, #400]	; (800602c <_strtod_l+0x5a4>)
 8005e9a:	f1c5 050f 	rsb	r5, r5, #15
 8005e9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	465b      	mov	r3, fp
 8005ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eaa:	f7fa fbc5 	bl	8000638 <__aeabi_dmul>
 8005eae:	9b06      	ldr	r3, [sp, #24]
 8005eb0:	1b5d      	subs	r5, r3, r5
 8005eb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005eba:	e7e3      	b.n	8005e84 <_strtod_l+0x3fc>
 8005ebc:	9b06      	ldr	r3, [sp, #24]
 8005ebe:	3316      	adds	r3, #22
 8005ec0:	db0b      	blt.n	8005eda <_strtod_l+0x452>
 8005ec2:	9b05      	ldr	r3, [sp, #20]
 8005ec4:	1b9e      	subs	r6, r3, r6
 8005ec6:	4b59      	ldr	r3, [pc, #356]	; (800602c <_strtod_l+0x5a4>)
 8005ec8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005ecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	4659      	mov	r1, fp
 8005ed4:	f7fa fcda 	bl	800088c <__aeabi_ddiv>
 8005ed8:	e7d6      	b.n	8005e88 <_strtod_l+0x400>
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	eba5 0808 	sub.w	r8, r5, r8
 8005ee0:	4498      	add	r8, r3
 8005ee2:	f1b8 0f00 	cmp.w	r8, #0
 8005ee6:	dd74      	ble.n	8005fd2 <_strtod_l+0x54a>
 8005ee8:	f018 030f 	ands.w	r3, r8, #15
 8005eec:	d00a      	beq.n	8005f04 <_strtod_l+0x47c>
 8005eee:	494f      	ldr	r1, [pc, #316]	; (800602c <_strtod_l+0x5a4>)
 8005ef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005efc:	f7fa fb9c 	bl	8000638 <__aeabi_dmul>
 8005f00:	4682      	mov	sl, r0
 8005f02:	468b      	mov	fp, r1
 8005f04:	f038 080f 	bics.w	r8, r8, #15
 8005f08:	d04f      	beq.n	8005faa <_strtod_l+0x522>
 8005f0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f0e:	dd22      	ble.n	8005f56 <_strtod_l+0x4ce>
 8005f10:	2500      	movs	r5, #0
 8005f12:	462e      	mov	r6, r5
 8005f14:	9507      	str	r5, [sp, #28]
 8005f16:	9505      	str	r5, [sp, #20]
 8005f18:	2322      	movs	r3, #34	; 0x22
 8005f1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006034 <_strtod_l+0x5ac>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	f04f 0a00 	mov.w	sl, #0
 8005f24:	9b07      	ldr	r3, [sp, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f43f adf2 	beq.w	8005b10 <_strtod_l+0x88>
 8005f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 fe90 	bl	8007c54 <_Bfree>
 8005f34:	9905      	ldr	r1, [sp, #20]
 8005f36:	4620      	mov	r0, r4
 8005f38:	f001 fe8c 	bl	8007c54 <_Bfree>
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f001 fe88 	bl	8007c54 <_Bfree>
 8005f44:	9907      	ldr	r1, [sp, #28]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f001 fe84 	bl	8007c54 <_Bfree>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f001 fe80 	bl	8007c54 <_Bfree>
 8005f54:	e5dc      	b.n	8005b10 <_strtod_l+0x88>
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <_strtod_l+0x5a8>)
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005f60:	4650      	mov	r0, sl
 8005f62:	4659      	mov	r1, fp
 8005f64:	4699      	mov	r9, r3
 8005f66:	f1b8 0f01 	cmp.w	r8, #1
 8005f6a:	dc21      	bgt.n	8005fb0 <_strtod_l+0x528>
 8005f6c:	b10b      	cbz	r3, 8005f72 <_strtod_l+0x4ea>
 8005f6e:	4682      	mov	sl, r0
 8005f70:	468b      	mov	fp, r1
 8005f72:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <_strtod_l+0x5a8>)
 8005f74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005f78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005f7c:	4652      	mov	r2, sl
 8005f7e:	465b      	mov	r3, fp
 8005f80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005f84:	f7fa fb58 	bl	8000638 <__aeabi_dmul>
 8005f88:	4b2a      	ldr	r3, [pc, #168]	; (8006034 <_strtod_l+0x5ac>)
 8005f8a:	460a      	mov	r2, r1
 8005f8c:	400b      	ands	r3, r1
 8005f8e:	492a      	ldr	r1, [pc, #168]	; (8006038 <_strtod_l+0x5b0>)
 8005f90:	428b      	cmp	r3, r1
 8005f92:	4682      	mov	sl, r0
 8005f94:	d8bc      	bhi.n	8005f10 <_strtod_l+0x488>
 8005f96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f9a:	428b      	cmp	r3, r1
 8005f9c:	bf86      	itte	hi
 8005f9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800603c <_strtod_l+0x5b4>
 8005fa2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005fa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005faa:	2300      	movs	r3, #0
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	e084      	b.n	80060ba <_strtod_l+0x632>
 8005fb0:	f018 0f01 	tst.w	r8, #1
 8005fb4:	d005      	beq.n	8005fc2 <_strtod_l+0x53a>
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f7fa fb3c 	bl	8000638 <__aeabi_dmul>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	3208      	adds	r2, #8
 8005fc6:	f109 0901 	add.w	r9, r9, #1
 8005fca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005fce:	9204      	str	r2, [sp, #16]
 8005fd0:	e7c9      	b.n	8005f66 <_strtod_l+0x4de>
 8005fd2:	d0ea      	beq.n	8005faa <_strtod_l+0x522>
 8005fd4:	f1c8 0800 	rsb	r8, r8, #0
 8005fd8:	f018 020f 	ands.w	r2, r8, #15
 8005fdc:	d00a      	beq.n	8005ff4 <_strtod_l+0x56c>
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <_strtod_l+0x5a4>)
 8005fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	4659      	mov	r1, fp
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa fc4e 	bl	800088c <__aeabi_ddiv>
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	468b      	mov	fp, r1
 8005ff4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ff8:	d0d7      	beq.n	8005faa <_strtod_l+0x522>
 8005ffa:	f1b8 0f1f 	cmp.w	r8, #31
 8005ffe:	dd1f      	ble.n	8006040 <_strtod_l+0x5b8>
 8006000:	2500      	movs	r5, #0
 8006002:	462e      	mov	r6, r5
 8006004:	9507      	str	r5, [sp, #28]
 8006006:	9505      	str	r5, [sp, #20]
 8006008:	2322      	movs	r3, #34	; 0x22
 800600a:	f04f 0a00 	mov.w	sl, #0
 800600e:	f04f 0b00 	mov.w	fp, #0
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	e786      	b.n	8005f24 <_strtod_l+0x49c>
 8006016:	bf00      	nop
 8006018:	0800971d 	.word	0x0800971d
 800601c:	08009760 	.word	0x08009760
 8006020:	08009715 	.word	0x08009715
 8006024:	080098a4 	.word	0x080098a4
 8006028:	08009b50 	.word	0x08009b50
 800602c:	08009a30 	.word	0x08009a30
 8006030:	08009a08 	.word	0x08009a08
 8006034:	7ff00000 	.word	0x7ff00000
 8006038:	7ca00000 	.word	0x7ca00000
 800603c:	7fefffff 	.word	0x7fefffff
 8006040:	f018 0310 	ands.w	r3, r8, #16
 8006044:	bf18      	it	ne
 8006046:	236a      	movne	r3, #106	; 0x6a
 8006048:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80063f8 <_strtod_l+0x970>
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	4650      	mov	r0, sl
 8006050:	4659      	mov	r1, fp
 8006052:	2300      	movs	r3, #0
 8006054:	f018 0f01 	tst.w	r8, #1
 8006058:	d004      	beq.n	8006064 <_strtod_l+0x5dc>
 800605a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800605e:	f7fa faeb 	bl	8000638 <__aeabi_dmul>
 8006062:	2301      	movs	r3, #1
 8006064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006068:	f109 0908 	add.w	r9, r9, #8
 800606c:	d1f2      	bne.n	8006054 <_strtod_l+0x5cc>
 800606e:	b10b      	cbz	r3, 8006074 <_strtod_l+0x5ec>
 8006070:	4682      	mov	sl, r0
 8006072:	468b      	mov	fp, r1
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	b1c3      	cbz	r3, 80060aa <_strtod_l+0x622>
 8006078:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800607c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006080:	2b00      	cmp	r3, #0
 8006082:	4659      	mov	r1, fp
 8006084:	dd11      	ble.n	80060aa <_strtod_l+0x622>
 8006086:	2b1f      	cmp	r3, #31
 8006088:	f340 8124 	ble.w	80062d4 <_strtod_l+0x84c>
 800608c:	2b34      	cmp	r3, #52	; 0x34
 800608e:	bfde      	ittt	le
 8006090:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006094:	f04f 33ff 	movle.w	r3, #4294967295
 8006098:	fa03 f202 	lslle.w	r2, r3, r2
 800609c:	f04f 0a00 	mov.w	sl, #0
 80060a0:	bfcc      	ite	gt
 80060a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80060a6:	ea02 0b01 	andle.w	fp, r2, r1
 80060aa:	2200      	movs	r2, #0
 80060ac:	2300      	movs	r3, #0
 80060ae:	4650      	mov	r0, sl
 80060b0:	4659      	mov	r1, fp
 80060b2:	f7fa fd29 	bl	8000b08 <__aeabi_dcmpeq>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d1a2      	bne.n	8006000 <_strtod_l+0x578>
 80060ba:	9b07      	ldr	r3, [sp, #28]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	9908      	ldr	r1, [sp, #32]
 80060c0:	462b      	mov	r3, r5
 80060c2:	463a      	mov	r2, r7
 80060c4:	4620      	mov	r0, r4
 80060c6:	f001 fe2d 	bl	8007d24 <__s2b>
 80060ca:	9007      	str	r0, [sp, #28]
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f43f af1f 	beq.w	8005f10 <_strtod_l+0x488>
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	1b9e      	subs	r6, r3, r6
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bfb4      	ite	lt
 80060dc:	4633      	movlt	r3, r6
 80060de:	2300      	movge	r3, #0
 80060e0:	930c      	str	r3, [sp, #48]	; 0x30
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	2500      	movs	r5, #0
 80060e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060ea:	9312      	str	r3, [sp, #72]	; 0x48
 80060ec:	462e      	mov	r6, r5
 80060ee:	9b07      	ldr	r3, [sp, #28]
 80060f0:	4620      	mov	r0, r4
 80060f2:	6859      	ldr	r1, [r3, #4]
 80060f4:	f001 fd6e 	bl	8007bd4 <_Balloc>
 80060f8:	9005      	str	r0, [sp, #20]
 80060fa:	2800      	cmp	r0, #0
 80060fc:	f43f af0c 	beq.w	8005f18 <_strtod_l+0x490>
 8006100:	9b07      	ldr	r3, [sp, #28]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	3202      	adds	r2, #2
 8006106:	f103 010c 	add.w	r1, r3, #12
 800610a:	0092      	lsls	r2, r2, #2
 800610c:	300c      	adds	r0, #12
 800610e:	f001 fd53 	bl	8007bb8 <memcpy>
 8006112:	ec4b ab10 	vmov	d0, sl, fp
 8006116:	aa1a      	add	r2, sp, #104	; 0x68
 8006118:	a919      	add	r1, sp, #100	; 0x64
 800611a:	4620      	mov	r0, r4
 800611c:	f002 f948 	bl	80083b0 <__d2b>
 8006120:	ec4b ab18 	vmov	d8, sl, fp
 8006124:	9018      	str	r0, [sp, #96]	; 0x60
 8006126:	2800      	cmp	r0, #0
 8006128:	f43f aef6 	beq.w	8005f18 <_strtod_l+0x490>
 800612c:	2101      	movs	r1, #1
 800612e:	4620      	mov	r0, r4
 8006130:	f001 fe92 	bl	8007e58 <__i2b>
 8006134:	4606      	mov	r6, r0
 8006136:	2800      	cmp	r0, #0
 8006138:	f43f aeee 	beq.w	8005f18 <_strtod_l+0x490>
 800613c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800613e:	9904      	ldr	r1, [sp, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	bfab      	itete	ge
 8006144:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006148:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800614a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800614e:	bfac      	ite	ge
 8006150:	eb03 0902 	addge.w	r9, r3, r2
 8006154:	1ad7      	sublt	r7, r2, r3
 8006156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006158:	eba3 0801 	sub.w	r8, r3, r1
 800615c:	4490      	add	r8, r2
 800615e:	4ba1      	ldr	r3, [pc, #644]	; (80063e4 <_strtod_l+0x95c>)
 8006160:	f108 38ff 	add.w	r8, r8, #4294967295
 8006164:	4598      	cmp	r8, r3
 8006166:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800616a:	f280 80c7 	bge.w	80062fc <_strtod_l+0x874>
 800616e:	eba3 0308 	sub.w	r3, r3, r8
 8006172:	2b1f      	cmp	r3, #31
 8006174:	eba2 0203 	sub.w	r2, r2, r3
 8006178:	f04f 0101 	mov.w	r1, #1
 800617c:	f300 80b1 	bgt.w	80062e2 <_strtod_l+0x85a>
 8006180:	fa01 f303 	lsl.w	r3, r1, r3
 8006184:	930d      	str	r3, [sp, #52]	; 0x34
 8006186:	2300      	movs	r3, #0
 8006188:	9308      	str	r3, [sp, #32]
 800618a:	eb09 0802 	add.w	r8, r9, r2
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	45c1      	cmp	r9, r8
 8006192:	4417      	add	r7, r2
 8006194:	441f      	add	r7, r3
 8006196:	464b      	mov	r3, r9
 8006198:	bfa8      	it	ge
 800619a:	4643      	movge	r3, r8
 800619c:	42bb      	cmp	r3, r7
 800619e:	bfa8      	it	ge
 80061a0:	463b      	movge	r3, r7
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	bfc2      	ittt	gt
 80061a6:	eba8 0803 	subgt.w	r8, r8, r3
 80061aa:	1aff      	subgt	r7, r7, r3
 80061ac:	eba9 0903 	subgt.w	r9, r9, r3
 80061b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd17      	ble.n	80061e6 <_strtod_l+0x75e>
 80061b6:	4631      	mov	r1, r6
 80061b8:	461a      	mov	r2, r3
 80061ba:	4620      	mov	r0, r4
 80061bc:	f001 ff0c 	bl	8007fd8 <__pow5mult>
 80061c0:	4606      	mov	r6, r0
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f43f aea8 	beq.w	8005f18 <_strtod_l+0x490>
 80061c8:	4601      	mov	r1, r0
 80061ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80061cc:	4620      	mov	r0, r4
 80061ce:	f001 fe59 	bl	8007e84 <__multiply>
 80061d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f43f ae9f 	beq.w	8005f18 <_strtod_l+0x490>
 80061da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80061dc:	4620      	mov	r0, r4
 80061de:	f001 fd39 	bl	8007c54 <_Bfree>
 80061e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e4:	9318      	str	r3, [sp, #96]	; 0x60
 80061e6:	f1b8 0f00 	cmp.w	r8, #0
 80061ea:	f300 808c 	bgt.w	8006306 <_strtod_l+0x87e>
 80061ee:	9b06      	ldr	r3, [sp, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dd08      	ble.n	8006206 <_strtod_l+0x77e>
 80061f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061f6:	9905      	ldr	r1, [sp, #20]
 80061f8:	4620      	mov	r0, r4
 80061fa:	f001 feed 	bl	8007fd8 <__pow5mult>
 80061fe:	9005      	str	r0, [sp, #20]
 8006200:	2800      	cmp	r0, #0
 8006202:	f43f ae89 	beq.w	8005f18 <_strtod_l+0x490>
 8006206:	2f00      	cmp	r7, #0
 8006208:	dd08      	ble.n	800621c <_strtod_l+0x794>
 800620a:	9905      	ldr	r1, [sp, #20]
 800620c:	463a      	mov	r2, r7
 800620e:	4620      	mov	r0, r4
 8006210:	f001 ff3c 	bl	800808c <__lshift>
 8006214:	9005      	str	r0, [sp, #20]
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f ae7e 	beq.w	8005f18 <_strtod_l+0x490>
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	dd08      	ble.n	8006234 <_strtod_l+0x7ac>
 8006222:	4631      	mov	r1, r6
 8006224:	464a      	mov	r2, r9
 8006226:	4620      	mov	r0, r4
 8006228:	f001 ff30 	bl	800808c <__lshift>
 800622c:	4606      	mov	r6, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f ae72 	beq.w	8005f18 <_strtod_l+0x490>
 8006234:	9a05      	ldr	r2, [sp, #20]
 8006236:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006238:	4620      	mov	r0, r4
 800623a:	f001 ffb3 	bl	80081a4 <__mdiff>
 800623e:	4605      	mov	r5, r0
 8006240:	2800      	cmp	r0, #0
 8006242:	f43f ae69 	beq.w	8005f18 <_strtod_l+0x490>
 8006246:	68c3      	ldr	r3, [r0, #12]
 8006248:	930b      	str	r3, [sp, #44]	; 0x2c
 800624a:	2300      	movs	r3, #0
 800624c:	60c3      	str	r3, [r0, #12]
 800624e:	4631      	mov	r1, r6
 8006250:	f001 ff8c 	bl	800816c <__mcmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	da60      	bge.n	800631a <_strtod_l+0x892>
 8006258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800625a:	ea53 030a 	orrs.w	r3, r3, sl
 800625e:	f040 8082 	bne.w	8006366 <_strtod_l+0x8de>
 8006262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006266:	2b00      	cmp	r3, #0
 8006268:	d17d      	bne.n	8006366 <_strtod_l+0x8de>
 800626a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800626e:	0d1b      	lsrs	r3, r3, #20
 8006270:	051b      	lsls	r3, r3, #20
 8006272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006276:	d976      	bls.n	8006366 <_strtod_l+0x8de>
 8006278:	696b      	ldr	r3, [r5, #20]
 800627a:	b913      	cbnz	r3, 8006282 <_strtod_l+0x7fa>
 800627c:	692b      	ldr	r3, [r5, #16]
 800627e:	2b01      	cmp	r3, #1
 8006280:	dd71      	ble.n	8006366 <_strtod_l+0x8de>
 8006282:	4629      	mov	r1, r5
 8006284:	2201      	movs	r2, #1
 8006286:	4620      	mov	r0, r4
 8006288:	f001 ff00 	bl	800808c <__lshift>
 800628c:	4631      	mov	r1, r6
 800628e:	4605      	mov	r5, r0
 8006290:	f001 ff6c 	bl	800816c <__mcmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	dd66      	ble.n	8006366 <_strtod_l+0x8de>
 8006298:	9904      	ldr	r1, [sp, #16]
 800629a:	4a53      	ldr	r2, [pc, #332]	; (80063e8 <_strtod_l+0x960>)
 800629c:	465b      	mov	r3, fp
 800629e:	2900      	cmp	r1, #0
 80062a0:	f000 8081 	beq.w	80063a6 <_strtod_l+0x91e>
 80062a4:	ea02 010b 	and.w	r1, r2, fp
 80062a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80062ac:	dc7b      	bgt.n	80063a6 <_strtod_l+0x91e>
 80062ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80062b2:	f77f aea9 	ble.w	8006008 <_strtod_l+0x580>
 80062b6:	4b4d      	ldr	r3, [pc, #308]	; (80063ec <_strtod_l+0x964>)
 80062b8:	4650      	mov	r0, sl
 80062ba:	4659      	mov	r1, fp
 80062bc:	2200      	movs	r2, #0
 80062be:	f7fa f9bb 	bl	8000638 <__aeabi_dmul>
 80062c2:	460b      	mov	r3, r1
 80062c4:	4303      	orrs	r3, r0
 80062c6:	bf08      	it	eq
 80062c8:	2322      	moveq	r3, #34	; 0x22
 80062ca:	4682      	mov	sl, r0
 80062cc:	468b      	mov	fp, r1
 80062ce:	bf08      	it	eq
 80062d0:	6023      	streq	r3, [r4, #0]
 80062d2:	e62b      	b.n	8005f2c <_strtod_l+0x4a4>
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	ea03 0a0a 	and.w	sl, r3, sl
 80062e0:	e6e3      	b.n	80060aa <_strtod_l+0x622>
 80062e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80062e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80062ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80062ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80062f2:	fa01 f308 	lsl.w	r3, r1, r8
 80062f6:	9308      	str	r3, [sp, #32]
 80062f8:	910d      	str	r1, [sp, #52]	; 0x34
 80062fa:	e746      	b.n	800618a <_strtod_l+0x702>
 80062fc:	2300      	movs	r3, #0
 80062fe:	9308      	str	r3, [sp, #32]
 8006300:	2301      	movs	r3, #1
 8006302:	930d      	str	r3, [sp, #52]	; 0x34
 8006304:	e741      	b.n	800618a <_strtod_l+0x702>
 8006306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006308:	4642      	mov	r2, r8
 800630a:	4620      	mov	r0, r4
 800630c:	f001 febe 	bl	800808c <__lshift>
 8006310:	9018      	str	r0, [sp, #96]	; 0x60
 8006312:	2800      	cmp	r0, #0
 8006314:	f47f af6b 	bne.w	80061ee <_strtod_l+0x766>
 8006318:	e5fe      	b.n	8005f18 <_strtod_l+0x490>
 800631a:	465f      	mov	r7, fp
 800631c:	d16e      	bne.n	80063fc <_strtod_l+0x974>
 800631e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006324:	b342      	cbz	r2, 8006378 <_strtod_l+0x8f0>
 8006326:	4a32      	ldr	r2, [pc, #200]	; (80063f0 <_strtod_l+0x968>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d128      	bne.n	800637e <_strtod_l+0x8f6>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	4651      	mov	r1, sl
 8006330:	b1eb      	cbz	r3, 800636e <_strtod_l+0x8e6>
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <_strtod_l+0x960>)
 8006334:	403b      	ands	r3, r7
 8006336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	d819      	bhi.n	8006374 <_strtod_l+0x8ec>
 8006340:	0d1b      	lsrs	r3, r3, #20
 8006342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	4299      	cmp	r1, r3
 800634c:	d117      	bne.n	800637e <_strtod_l+0x8f6>
 800634e:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <_strtod_l+0x96c>)
 8006350:	429f      	cmp	r7, r3
 8006352:	d102      	bne.n	800635a <_strtod_l+0x8d2>
 8006354:	3101      	adds	r1, #1
 8006356:	f43f addf 	beq.w	8005f18 <_strtod_l+0x490>
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <_strtod_l+0x960>)
 800635c:	403b      	ands	r3, r7
 800635e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006362:	f04f 0a00 	mov.w	sl, #0
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1a4      	bne.n	80062b6 <_strtod_l+0x82e>
 800636c:	e5de      	b.n	8005f2c <_strtod_l+0x4a4>
 800636e:	f04f 33ff 	mov.w	r3, #4294967295
 8006372:	e7ea      	b.n	800634a <_strtod_l+0x8c2>
 8006374:	4613      	mov	r3, r2
 8006376:	e7e8      	b.n	800634a <_strtod_l+0x8c2>
 8006378:	ea53 030a 	orrs.w	r3, r3, sl
 800637c:	d08c      	beq.n	8006298 <_strtod_l+0x810>
 800637e:	9b08      	ldr	r3, [sp, #32]
 8006380:	b1db      	cbz	r3, 80063ba <_strtod_l+0x932>
 8006382:	423b      	tst	r3, r7
 8006384:	d0ef      	beq.n	8006366 <_strtod_l+0x8de>
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	9a04      	ldr	r2, [sp, #16]
 800638a:	4650      	mov	r0, sl
 800638c:	4659      	mov	r1, fp
 800638e:	b1c3      	cbz	r3, 80063c2 <_strtod_l+0x93a>
 8006390:	f7ff fb5c 	bl	8005a4c <sulp>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	ec51 0b18 	vmov	r0, r1, d8
 800639c:	f7f9 ff96 	bl	80002cc <__adddf3>
 80063a0:	4682      	mov	sl, r0
 80063a2:	468b      	mov	fp, r1
 80063a4:	e7df      	b.n	8006366 <_strtod_l+0x8de>
 80063a6:	4013      	ands	r3, r2
 80063a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80063ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063b4:	f04f 3aff 	mov.w	sl, #4294967295
 80063b8:	e7d5      	b.n	8006366 <_strtod_l+0x8de>
 80063ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063bc:	ea13 0f0a 	tst.w	r3, sl
 80063c0:	e7e0      	b.n	8006384 <_strtod_l+0x8fc>
 80063c2:	f7ff fb43 	bl	8005a4c <sulp>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	ec51 0b18 	vmov	r0, r1, d8
 80063ce:	f7f9 ff7b 	bl	80002c8 <__aeabi_dsub>
 80063d2:	2200      	movs	r2, #0
 80063d4:	2300      	movs	r3, #0
 80063d6:	4682      	mov	sl, r0
 80063d8:	468b      	mov	fp, r1
 80063da:	f7fa fb95 	bl	8000b08 <__aeabi_dcmpeq>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d0c1      	beq.n	8006366 <_strtod_l+0x8de>
 80063e2:	e611      	b.n	8006008 <_strtod_l+0x580>
 80063e4:	fffffc02 	.word	0xfffffc02
 80063e8:	7ff00000 	.word	0x7ff00000
 80063ec:	39500000 	.word	0x39500000
 80063f0:	000fffff 	.word	0x000fffff
 80063f4:	7fefffff 	.word	0x7fefffff
 80063f8:	08009778 	.word	0x08009778
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	f002 f832 	bl	8008468 <__ratio>
 8006404:	ec59 8b10 	vmov	r8, r9, d0
 8006408:	ee10 0a10 	vmov	r0, s0
 800640c:	2200      	movs	r2, #0
 800640e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006412:	4649      	mov	r1, r9
 8006414:	f7fa fb8c 	bl	8000b30 <__aeabi_dcmple>
 8006418:	2800      	cmp	r0, #0
 800641a:	d07a      	beq.n	8006512 <_strtod_l+0xa8a>
 800641c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d04a      	beq.n	80064b8 <_strtod_l+0xa30>
 8006422:	4b95      	ldr	r3, [pc, #596]	; (8006678 <_strtod_l+0xbf0>)
 8006424:	2200      	movs	r2, #0
 8006426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800642a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006678 <_strtod_l+0xbf0>
 800642e:	f04f 0800 	mov.w	r8, #0
 8006432:	4b92      	ldr	r3, [pc, #584]	; (800667c <_strtod_l+0xbf4>)
 8006434:	403b      	ands	r3, r7
 8006436:	930d      	str	r3, [sp, #52]	; 0x34
 8006438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800643a:	4b91      	ldr	r3, [pc, #580]	; (8006680 <_strtod_l+0xbf8>)
 800643c:	429a      	cmp	r2, r3
 800643e:	f040 80b0 	bne.w	80065a2 <_strtod_l+0xb1a>
 8006442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006446:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800644a:	ec4b ab10 	vmov	d0, sl, fp
 800644e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006452:	f001 ff31 	bl	80082b8 <__ulp>
 8006456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800645a:	ec53 2b10 	vmov	r2, r3, d0
 800645e:	f7fa f8eb 	bl	8000638 <__aeabi_dmul>
 8006462:	4652      	mov	r2, sl
 8006464:	465b      	mov	r3, fp
 8006466:	f7f9 ff31 	bl	80002cc <__adddf3>
 800646a:	460b      	mov	r3, r1
 800646c:	4983      	ldr	r1, [pc, #524]	; (800667c <_strtod_l+0xbf4>)
 800646e:	4a85      	ldr	r2, [pc, #532]	; (8006684 <_strtod_l+0xbfc>)
 8006470:	4019      	ands	r1, r3
 8006472:	4291      	cmp	r1, r2
 8006474:	4682      	mov	sl, r0
 8006476:	d960      	bls.n	800653a <_strtod_l+0xab2>
 8006478:	ee18 3a90 	vmov	r3, s17
 800647c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006480:	4293      	cmp	r3, r2
 8006482:	d104      	bne.n	800648e <_strtod_l+0xa06>
 8006484:	ee18 3a10 	vmov	r3, s16
 8006488:	3301      	adds	r3, #1
 800648a:	f43f ad45 	beq.w	8005f18 <_strtod_l+0x490>
 800648e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006690 <_strtod_l+0xc08>
 8006492:	f04f 3aff 	mov.w	sl, #4294967295
 8006496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006498:	4620      	mov	r0, r4
 800649a:	f001 fbdb 	bl	8007c54 <_Bfree>
 800649e:	9905      	ldr	r1, [sp, #20]
 80064a0:	4620      	mov	r0, r4
 80064a2:	f001 fbd7 	bl	8007c54 <_Bfree>
 80064a6:	4631      	mov	r1, r6
 80064a8:	4620      	mov	r0, r4
 80064aa:	f001 fbd3 	bl	8007c54 <_Bfree>
 80064ae:	4629      	mov	r1, r5
 80064b0:	4620      	mov	r0, r4
 80064b2:	f001 fbcf 	bl	8007c54 <_Bfree>
 80064b6:	e61a      	b.n	80060ee <_strtod_l+0x666>
 80064b8:	f1ba 0f00 	cmp.w	sl, #0
 80064bc:	d11b      	bne.n	80064f6 <_strtod_l+0xa6e>
 80064be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064c2:	b9f3      	cbnz	r3, 8006502 <_strtod_l+0xa7a>
 80064c4:	4b6c      	ldr	r3, [pc, #432]	; (8006678 <_strtod_l+0xbf0>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	f7fa fb26 	bl	8000b1c <__aeabi_dcmplt>
 80064d0:	b9d0      	cbnz	r0, 8006508 <_strtod_l+0xa80>
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	4b6c      	ldr	r3, [pc, #432]	; (8006688 <_strtod_l+0xc00>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f7fa f8ad 	bl	8000638 <__aeabi_dmul>
 80064de:	4680      	mov	r8, r0
 80064e0:	4689      	mov	r9, r1
 80064e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80064ea:	9315      	str	r3, [sp, #84]	; 0x54
 80064ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80064f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80064f4:	e79d      	b.n	8006432 <_strtod_l+0x9aa>
 80064f6:	f1ba 0f01 	cmp.w	sl, #1
 80064fa:	d102      	bne.n	8006502 <_strtod_l+0xa7a>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f43f ad83 	beq.w	8006008 <_strtod_l+0x580>
 8006502:	4b62      	ldr	r3, [pc, #392]	; (800668c <_strtod_l+0xc04>)
 8006504:	2200      	movs	r2, #0
 8006506:	e78e      	b.n	8006426 <_strtod_l+0x99e>
 8006508:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006688 <_strtod_l+0xc00>
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	e7e7      	b.n	80064e2 <_strtod_l+0xa5a>
 8006512:	4b5d      	ldr	r3, [pc, #372]	; (8006688 <_strtod_l+0xc00>)
 8006514:	4640      	mov	r0, r8
 8006516:	4649      	mov	r1, r9
 8006518:	2200      	movs	r2, #0
 800651a:	f7fa f88d 	bl	8000638 <__aeabi_dmul>
 800651e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006520:	4680      	mov	r8, r0
 8006522:	4689      	mov	r9, r1
 8006524:	b933      	cbnz	r3, 8006534 <_strtod_l+0xaac>
 8006526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800652a:	900e      	str	r0, [sp, #56]	; 0x38
 800652c:	930f      	str	r3, [sp, #60]	; 0x3c
 800652e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006532:	e7dd      	b.n	80064f0 <_strtod_l+0xa68>
 8006534:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006538:	e7f9      	b.n	800652e <_strtod_l+0xaa6>
 800653a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1a8      	bne.n	8006496 <_strtod_l+0xa0e>
 8006544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800654a:	0d1b      	lsrs	r3, r3, #20
 800654c:	051b      	lsls	r3, r3, #20
 800654e:	429a      	cmp	r2, r3
 8006550:	d1a1      	bne.n	8006496 <_strtod_l+0xa0e>
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7fa fbcf 	bl	8000cf8 <__aeabi_d2lz>
 800655a:	f7fa f83f 	bl	80005dc <__aeabi_l2d>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4640      	mov	r0, r8
 8006564:	4649      	mov	r1, r9
 8006566:	f7f9 feaf 	bl	80002c8 <__aeabi_dsub>
 800656a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800656c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006570:	ea43 030a 	orr.w	r3, r3, sl
 8006574:	4313      	orrs	r3, r2
 8006576:	4680      	mov	r8, r0
 8006578:	4689      	mov	r9, r1
 800657a:	d055      	beq.n	8006628 <_strtod_l+0xba0>
 800657c:	a336      	add	r3, pc, #216	; (adr r3, 8006658 <_strtod_l+0xbd0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7fa facb 	bl	8000b1c <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f47f acd0 	bne.w	8005f2c <_strtod_l+0x4a4>
 800658c:	a334      	add	r3, pc, #208	; (adr r3, 8006660 <_strtod_l+0xbd8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7fa fadf 	bl	8000b58 <__aeabi_dcmpgt>
 800659a:	2800      	cmp	r0, #0
 800659c:	f43f af7b 	beq.w	8006496 <_strtod_l+0xa0e>
 80065a0:	e4c4      	b.n	8005f2c <_strtod_l+0x4a4>
 80065a2:	9b04      	ldr	r3, [sp, #16]
 80065a4:	b333      	cbz	r3, 80065f4 <_strtod_l+0xb6c>
 80065a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80065ac:	d822      	bhi.n	80065f4 <_strtod_l+0xb6c>
 80065ae:	a32e      	add	r3, pc, #184	; (adr r3, 8006668 <_strtod_l+0xbe0>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	4640      	mov	r0, r8
 80065b6:	4649      	mov	r1, r9
 80065b8:	f7fa faba 	bl	8000b30 <__aeabi_dcmple>
 80065bc:	b1a0      	cbz	r0, 80065e8 <_strtod_l+0xb60>
 80065be:	4649      	mov	r1, r9
 80065c0:	4640      	mov	r0, r8
 80065c2:	f7fa fb11 	bl	8000be8 <__aeabi_d2uiz>
 80065c6:	2801      	cmp	r0, #1
 80065c8:	bf38      	it	cc
 80065ca:	2001      	movcc	r0, #1
 80065cc:	f7f9 ffba 	bl	8000544 <__aeabi_ui2d>
 80065d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d2:	4680      	mov	r8, r0
 80065d4:	4689      	mov	r9, r1
 80065d6:	bb23      	cbnz	r3, 8006622 <_strtod_l+0xb9a>
 80065d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065dc:	9010      	str	r0, [sp, #64]	; 0x40
 80065de:	9311      	str	r3, [sp, #68]	; 0x44
 80065e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	9309      	str	r3, [sp, #36]	; 0x24
 80065f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065f8:	eeb0 0a48 	vmov.f32	s0, s16
 80065fc:	eef0 0a68 	vmov.f32	s1, s17
 8006600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006604:	f001 fe58 	bl	80082b8 <__ulp>
 8006608:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800660c:	ec53 2b10 	vmov	r2, r3, d0
 8006610:	f7fa f812 	bl	8000638 <__aeabi_dmul>
 8006614:	ec53 2b18 	vmov	r2, r3, d8
 8006618:	f7f9 fe58 	bl	80002cc <__adddf3>
 800661c:	4682      	mov	sl, r0
 800661e:	468b      	mov	fp, r1
 8006620:	e78d      	b.n	800653e <_strtod_l+0xab6>
 8006622:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006626:	e7db      	b.n	80065e0 <_strtod_l+0xb58>
 8006628:	a311      	add	r3, pc, #68	; (adr r3, 8006670 <_strtod_l+0xbe8>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7fa fa75 	bl	8000b1c <__aeabi_dcmplt>
 8006632:	e7b2      	b.n	800659a <_strtod_l+0xb12>
 8006634:	2300      	movs	r3, #0
 8006636:	930a      	str	r3, [sp, #40]	; 0x28
 8006638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800663a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	f7ff ba6b 	b.w	8005b18 <_strtod_l+0x90>
 8006642:	2a65      	cmp	r2, #101	; 0x65
 8006644:	f43f ab5f 	beq.w	8005d06 <_strtod_l+0x27e>
 8006648:	2a45      	cmp	r2, #69	; 0x45
 800664a:	f43f ab5c 	beq.w	8005d06 <_strtod_l+0x27e>
 800664e:	2301      	movs	r3, #1
 8006650:	f7ff bb94 	b.w	8005d7c <_strtod_l+0x2f4>
 8006654:	f3af 8000 	nop.w
 8006658:	94a03595 	.word	0x94a03595
 800665c:	3fdfffff 	.word	0x3fdfffff
 8006660:	35afe535 	.word	0x35afe535
 8006664:	3fe00000 	.word	0x3fe00000
 8006668:	ffc00000 	.word	0xffc00000
 800666c:	41dfffff 	.word	0x41dfffff
 8006670:	94a03595 	.word	0x94a03595
 8006674:	3fcfffff 	.word	0x3fcfffff
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	7ff00000 	.word	0x7ff00000
 8006680:	7fe00000 	.word	0x7fe00000
 8006684:	7c9fffff 	.word	0x7c9fffff
 8006688:	3fe00000 	.word	0x3fe00000
 800668c:	bff00000 	.word	0xbff00000
 8006690:	7fefffff 	.word	0x7fefffff

08006694 <_strtod_r>:
 8006694:	4b01      	ldr	r3, [pc, #4]	; (800669c <_strtod_r+0x8>)
 8006696:	f7ff b9f7 	b.w	8005a88 <_strtod_l>
 800669a:	bf00      	nop
 800669c:	20000074 	.word	0x20000074

080066a0 <_strtol_l.constprop.0>:
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a6:	d001      	beq.n	80066ac <_strtol_l.constprop.0+0xc>
 80066a8:	2b24      	cmp	r3, #36	; 0x24
 80066aa:	d906      	bls.n	80066ba <_strtol_l.constprop.0+0x1a>
 80066ac:	f7fe fafc 	bl	8004ca8 <__errno>
 80066b0:	2316      	movs	r3, #22
 80066b2:	6003      	str	r3, [r0, #0]
 80066b4:	2000      	movs	r0, #0
 80066b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067a0 <_strtol_l.constprop.0+0x100>
 80066be:	460d      	mov	r5, r1
 80066c0:	462e      	mov	r6, r5
 80066c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80066ca:	f017 0708 	ands.w	r7, r7, #8
 80066ce:	d1f7      	bne.n	80066c0 <_strtol_l.constprop.0+0x20>
 80066d0:	2c2d      	cmp	r4, #45	; 0x2d
 80066d2:	d132      	bne.n	800673a <_strtol_l.constprop.0+0x9a>
 80066d4:	782c      	ldrb	r4, [r5, #0]
 80066d6:	2701      	movs	r7, #1
 80066d8:	1cb5      	adds	r5, r6, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d05b      	beq.n	8006796 <_strtol_l.constprop.0+0xf6>
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d109      	bne.n	80066f6 <_strtol_l.constprop.0+0x56>
 80066e2:	2c30      	cmp	r4, #48	; 0x30
 80066e4:	d107      	bne.n	80066f6 <_strtol_l.constprop.0+0x56>
 80066e6:	782c      	ldrb	r4, [r5, #0]
 80066e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80066ec:	2c58      	cmp	r4, #88	; 0x58
 80066ee:	d14d      	bne.n	800678c <_strtol_l.constprop.0+0xec>
 80066f0:	786c      	ldrb	r4, [r5, #1]
 80066f2:	2310      	movs	r3, #16
 80066f4:	3502      	adds	r5, #2
 80066f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80066fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80066fe:	f04f 0c00 	mov.w	ip, #0
 8006702:	fbb8 f9f3 	udiv	r9, r8, r3
 8006706:	4666      	mov	r6, ip
 8006708:	fb03 8a19 	mls	sl, r3, r9, r8
 800670c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006710:	f1be 0f09 	cmp.w	lr, #9
 8006714:	d816      	bhi.n	8006744 <_strtol_l.constprop.0+0xa4>
 8006716:	4674      	mov	r4, lr
 8006718:	42a3      	cmp	r3, r4
 800671a:	dd24      	ble.n	8006766 <_strtol_l.constprop.0+0xc6>
 800671c:	f1bc 0f00 	cmp.w	ip, #0
 8006720:	db1e      	blt.n	8006760 <_strtol_l.constprop.0+0xc0>
 8006722:	45b1      	cmp	r9, r6
 8006724:	d31c      	bcc.n	8006760 <_strtol_l.constprop.0+0xc0>
 8006726:	d101      	bne.n	800672c <_strtol_l.constprop.0+0x8c>
 8006728:	45a2      	cmp	sl, r4
 800672a:	db19      	blt.n	8006760 <_strtol_l.constprop.0+0xc0>
 800672c:	fb06 4603 	mla	r6, r6, r3, r4
 8006730:	f04f 0c01 	mov.w	ip, #1
 8006734:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006738:	e7e8      	b.n	800670c <_strtol_l.constprop.0+0x6c>
 800673a:	2c2b      	cmp	r4, #43	; 0x2b
 800673c:	bf04      	itt	eq
 800673e:	782c      	ldrbeq	r4, [r5, #0]
 8006740:	1cb5      	addeq	r5, r6, #2
 8006742:	e7ca      	b.n	80066da <_strtol_l.constprop.0+0x3a>
 8006744:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006748:	f1be 0f19 	cmp.w	lr, #25
 800674c:	d801      	bhi.n	8006752 <_strtol_l.constprop.0+0xb2>
 800674e:	3c37      	subs	r4, #55	; 0x37
 8006750:	e7e2      	b.n	8006718 <_strtol_l.constprop.0+0x78>
 8006752:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006756:	f1be 0f19 	cmp.w	lr, #25
 800675a:	d804      	bhi.n	8006766 <_strtol_l.constprop.0+0xc6>
 800675c:	3c57      	subs	r4, #87	; 0x57
 800675e:	e7db      	b.n	8006718 <_strtol_l.constprop.0+0x78>
 8006760:	f04f 3cff 	mov.w	ip, #4294967295
 8006764:	e7e6      	b.n	8006734 <_strtol_l.constprop.0+0x94>
 8006766:	f1bc 0f00 	cmp.w	ip, #0
 800676a:	da05      	bge.n	8006778 <_strtol_l.constprop.0+0xd8>
 800676c:	2322      	movs	r3, #34	; 0x22
 800676e:	6003      	str	r3, [r0, #0]
 8006770:	4646      	mov	r6, r8
 8006772:	b942      	cbnz	r2, 8006786 <_strtol_l.constprop.0+0xe6>
 8006774:	4630      	mov	r0, r6
 8006776:	e79e      	b.n	80066b6 <_strtol_l.constprop.0+0x16>
 8006778:	b107      	cbz	r7, 800677c <_strtol_l.constprop.0+0xdc>
 800677a:	4276      	negs	r6, r6
 800677c:	2a00      	cmp	r2, #0
 800677e:	d0f9      	beq.n	8006774 <_strtol_l.constprop.0+0xd4>
 8006780:	f1bc 0f00 	cmp.w	ip, #0
 8006784:	d000      	beq.n	8006788 <_strtol_l.constprop.0+0xe8>
 8006786:	1e69      	subs	r1, r5, #1
 8006788:	6011      	str	r1, [r2, #0]
 800678a:	e7f3      	b.n	8006774 <_strtol_l.constprop.0+0xd4>
 800678c:	2430      	movs	r4, #48	; 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1b1      	bne.n	80066f6 <_strtol_l.constprop.0+0x56>
 8006792:	2308      	movs	r3, #8
 8006794:	e7af      	b.n	80066f6 <_strtol_l.constprop.0+0x56>
 8006796:	2c30      	cmp	r4, #48	; 0x30
 8006798:	d0a5      	beq.n	80066e6 <_strtol_l.constprop.0+0x46>
 800679a:	230a      	movs	r3, #10
 800679c:	e7ab      	b.n	80066f6 <_strtol_l.constprop.0+0x56>
 800679e:	bf00      	nop
 80067a0:	080097a1 	.word	0x080097a1

080067a4 <_strtol_r>:
 80067a4:	f7ff bf7c 	b.w	80066a0 <_strtol_l.constprop.0>

080067a8 <quorem>:
 80067a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	6903      	ldr	r3, [r0, #16]
 80067ae:	690c      	ldr	r4, [r1, #16]
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	4607      	mov	r7, r0
 80067b4:	f2c0 8081 	blt.w	80068ba <quorem+0x112>
 80067b8:	3c01      	subs	r4, #1
 80067ba:	f101 0814 	add.w	r8, r1, #20
 80067be:	f100 0514 	add.w	r5, r0, #20
 80067c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d0:	3301      	adds	r3, #1
 80067d2:	429a      	cmp	r2, r3
 80067d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80067e0:	d331      	bcc.n	8006846 <quorem+0x9e>
 80067e2:	f04f 0e00 	mov.w	lr, #0
 80067e6:	4640      	mov	r0, r8
 80067e8:	46ac      	mov	ip, r5
 80067ea:	46f2      	mov	sl, lr
 80067ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80067f0:	b293      	uxth	r3, r2
 80067f2:	fb06 e303 	mla	r3, r6, r3, lr
 80067f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006800:	f8dc a000 	ldr.w	sl, [ip]
 8006804:	0c12      	lsrs	r2, r2, #16
 8006806:	fa13 f38a 	uxtah	r3, r3, sl
 800680a:	fb06 e202 	mla	r2, r6, r2, lr
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	9b00      	ldr	r3, [sp, #0]
 8006812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006816:	b292      	uxth	r2, r2
 8006818:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800681c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006820:	f8bd 3000 	ldrh.w	r3, [sp]
 8006824:	4581      	cmp	r9, r0
 8006826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800682a:	f84c 3b04 	str.w	r3, [ip], #4
 800682e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006832:	d2db      	bcs.n	80067ec <quorem+0x44>
 8006834:	f855 300b 	ldr.w	r3, [r5, fp]
 8006838:	b92b      	cbnz	r3, 8006846 <quorem+0x9e>
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	3b04      	subs	r3, #4
 800683e:	429d      	cmp	r5, r3
 8006840:	461a      	mov	r2, r3
 8006842:	d32e      	bcc.n	80068a2 <quorem+0xfa>
 8006844:	613c      	str	r4, [r7, #16]
 8006846:	4638      	mov	r0, r7
 8006848:	f001 fc90 	bl	800816c <__mcmp>
 800684c:	2800      	cmp	r0, #0
 800684e:	db24      	blt.n	800689a <quorem+0xf2>
 8006850:	3601      	adds	r6, #1
 8006852:	4628      	mov	r0, r5
 8006854:	f04f 0c00 	mov.w	ip, #0
 8006858:	f858 2b04 	ldr.w	r2, [r8], #4
 800685c:	f8d0 e000 	ldr.w	lr, [r0]
 8006860:	b293      	uxth	r3, r2
 8006862:	ebac 0303 	sub.w	r3, ip, r3
 8006866:	0c12      	lsrs	r2, r2, #16
 8006868:	fa13 f38e 	uxtah	r3, r3, lr
 800686c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687a:	45c1      	cmp	r9, r8
 800687c:	f840 3b04 	str.w	r3, [r0], #4
 8006880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006884:	d2e8      	bcs.n	8006858 <quorem+0xb0>
 8006886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800688a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800688e:	b922      	cbnz	r2, 800689a <quorem+0xf2>
 8006890:	3b04      	subs	r3, #4
 8006892:	429d      	cmp	r5, r3
 8006894:	461a      	mov	r2, r3
 8006896:	d30a      	bcc.n	80068ae <quorem+0x106>
 8006898:	613c      	str	r4, [r7, #16]
 800689a:	4630      	mov	r0, r6
 800689c:	b003      	add	sp, #12
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	3b04      	subs	r3, #4
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	d1cc      	bne.n	8006844 <quorem+0x9c>
 80068aa:	3c01      	subs	r4, #1
 80068ac:	e7c7      	b.n	800683e <quorem+0x96>
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d1f0      	bne.n	8006898 <quorem+0xf0>
 80068b6:	3c01      	subs	r4, #1
 80068b8:	e7eb      	b.n	8006892 <quorem+0xea>
 80068ba:	2000      	movs	r0, #0
 80068bc:	e7ee      	b.n	800689c <quorem+0xf4>
	...

080068c0 <_dtoa_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	ed2d 8b04 	vpush	{d8-d9}
 80068c8:	ec57 6b10 	vmov	r6, r7, d0
 80068cc:	b093      	sub	sp, #76	; 0x4c
 80068ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068d4:	9106      	str	r1, [sp, #24]
 80068d6:	ee10 aa10 	vmov	sl, s0
 80068da:	4604      	mov	r4, r0
 80068dc:	9209      	str	r2, [sp, #36]	; 0x24
 80068de:	930c      	str	r3, [sp, #48]	; 0x30
 80068e0:	46bb      	mov	fp, r7
 80068e2:	b975      	cbnz	r5, 8006902 <_dtoa_r+0x42>
 80068e4:	2010      	movs	r0, #16
 80068e6:	f001 f94d 	bl	8007b84 <malloc>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6260      	str	r0, [r4, #36]	; 0x24
 80068ee:	b920      	cbnz	r0, 80068fa <_dtoa_r+0x3a>
 80068f0:	4ba7      	ldr	r3, [pc, #668]	; (8006b90 <_dtoa_r+0x2d0>)
 80068f2:	21ea      	movs	r1, #234	; 0xea
 80068f4:	48a7      	ldr	r0, [pc, #668]	; (8006b94 <_dtoa_r+0x2d4>)
 80068f6:	f002 f8bd 	bl	8008a74 <__assert_func>
 80068fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068fe:	6005      	str	r5, [r0, #0]
 8006900:	60c5      	str	r5, [r0, #12]
 8006902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006904:	6819      	ldr	r1, [r3, #0]
 8006906:	b151      	cbz	r1, 800691e <_dtoa_r+0x5e>
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	604a      	str	r2, [r1, #4]
 800690c:	2301      	movs	r3, #1
 800690e:	4093      	lsls	r3, r2
 8006910:	608b      	str	r3, [r1, #8]
 8006912:	4620      	mov	r0, r4
 8006914:	f001 f99e 	bl	8007c54 <_Bfree>
 8006918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	1e3b      	subs	r3, r7, #0
 8006920:	bfaa      	itet	ge
 8006922:	2300      	movge	r3, #0
 8006924:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006928:	f8c8 3000 	strge.w	r3, [r8]
 800692c:	4b9a      	ldr	r3, [pc, #616]	; (8006b98 <_dtoa_r+0x2d8>)
 800692e:	bfbc      	itt	lt
 8006930:	2201      	movlt	r2, #1
 8006932:	f8c8 2000 	strlt.w	r2, [r8]
 8006936:	ea33 030b 	bics.w	r3, r3, fp
 800693a:	d11b      	bne.n	8006974 <_dtoa_r+0xb4>
 800693c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800693e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006948:	4333      	orrs	r3, r6
 800694a:	f000 8592 	beq.w	8007472 <_dtoa_r+0xbb2>
 800694e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006950:	b963      	cbnz	r3, 800696c <_dtoa_r+0xac>
 8006952:	4b92      	ldr	r3, [pc, #584]	; (8006b9c <_dtoa_r+0x2dc>)
 8006954:	e022      	b.n	800699c <_dtoa_r+0xdc>
 8006956:	4b92      	ldr	r3, [pc, #584]	; (8006ba0 <_dtoa_r+0x2e0>)
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	3308      	adds	r3, #8
 800695c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	9801      	ldr	r0, [sp, #4]
 8006962:	b013      	add	sp, #76	; 0x4c
 8006964:	ecbd 8b04 	vpop	{d8-d9}
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4b8b      	ldr	r3, [pc, #556]	; (8006b9c <_dtoa_r+0x2dc>)
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	3303      	adds	r3, #3
 8006972:	e7f3      	b.n	800695c <_dtoa_r+0x9c>
 8006974:	2200      	movs	r2, #0
 8006976:	2300      	movs	r3, #0
 8006978:	4650      	mov	r0, sl
 800697a:	4659      	mov	r1, fp
 800697c:	f7fa f8c4 	bl	8000b08 <__aeabi_dcmpeq>
 8006980:	ec4b ab19 	vmov	d9, sl, fp
 8006984:	4680      	mov	r8, r0
 8006986:	b158      	cbz	r0, 80069a0 <_dtoa_r+0xe0>
 8006988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800698a:	2301      	movs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 856b 	beq.w	800746c <_dtoa_r+0xbac>
 8006996:	4883      	ldr	r0, [pc, #524]	; (8006ba4 <_dtoa_r+0x2e4>)
 8006998:	6018      	str	r0, [r3, #0]
 800699a:	1e43      	subs	r3, r0, #1
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	e7df      	b.n	8006960 <_dtoa_r+0xa0>
 80069a0:	ec4b ab10 	vmov	d0, sl, fp
 80069a4:	aa10      	add	r2, sp, #64	; 0x40
 80069a6:	a911      	add	r1, sp, #68	; 0x44
 80069a8:	4620      	mov	r0, r4
 80069aa:	f001 fd01 	bl	80083b0 <__d2b>
 80069ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80069b2:	ee08 0a10 	vmov	s16, r0
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	f000 8084 	beq.w	8006ac4 <_dtoa_r+0x204>
 80069bc:	ee19 3a90 	vmov	r3, s19
 80069c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069c8:	4656      	mov	r6, sl
 80069ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80069d6:	4b74      	ldr	r3, [pc, #464]	; (8006ba8 <_dtoa_r+0x2e8>)
 80069d8:	2200      	movs	r2, #0
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7f9 fc73 	bl	80002c8 <__aeabi_dsub>
 80069e2:	a365      	add	r3, pc, #404	; (adr r3, 8006b78 <_dtoa_r+0x2b8>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fe26 	bl	8000638 <__aeabi_dmul>
 80069ec:	a364      	add	r3, pc, #400	; (adr r3, 8006b80 <_dtoa_r+0x2c0>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fc6b 	bl	80002cc <__adddf3>
 80069f6:	4606      	mov	r6, r0
 80069f8:	4628      	mov	r0, r5
 80069fa:	460f      	mov	r7, r1
 80069fc:	f7f9 fdb2 	bl	8000564 <__aeabi_i2d>
 8006a00:	a361      	add	r3, pc, #388	; (adr r3, 8006b88 <_dtoa_r+0x2c8>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fe17 	bl	8000638 <__aeabi_dmul>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4639      	mov	r1, r7
 8006a12:	f7f9 fc5b 	bl	80002cc <__adddf3>
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	f7fa f8bd 	bl	8000b98 <__aeabi_d2iz>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	9000      	str	r0, [sp, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	4630      	mov	r0, r6
 8006a26:	4639      	mov	r1, r7
 8006a28:	f7fa f878 	bl	8000b1c <__aeabi_dcmplt>
 8006a2c:	b150      	cbz	r0, 8006a44 <_dtoa_r+0x184>
 8006a2e:	9800      	ldr	r0, [sp, #0]
 8006a30:	f7f9 fd98 	bl	8000564 <__aeabi_i2d>
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	f7fa f866 	bl	8000b08 <__aeabi_dcmpeq>
 8006a3c:	b910      	cbnz	r0, 8006a44 <_dtoa_r+0x184>
 8006a3e:	9b00      	ldr	r3, [sp, #0]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	2b16      	cmp	r3, #22
 8006a48:	d85a      	bhi.n	8006b00 <_dtoa_r+0x240>
 8006a4a:	9a00      	ldr	r2, [sp, #0]
 8006a4c:	4b57      	ldr	r3, [pc, #348]	; (8006bac <_dtoa_r+0x2ec>)
 8006a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	ec51 0b19 	vmov	r0, r1, d9
 8006a5a:	f7fa f85f 	bl	8000b1c <__aeabi_dcmplt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d050      	beq.n	8006b04 <_dtoa_r+0x244>
 8006a62:	9b00      	ldr	r3, [sp, #0]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a6e:	1b5d      	subs	r5, r3, r5
 8006a70:	1e6b      	subs	r3, r5, #1
 8006a72:	9305      	str	r3, [sp, #20]
 8006a74:	bf45      	ittet	mi
 8006a76:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a7a:	9304      	strmi	r3, [sp, #16]
 8006a7c:	2300      	movpl	r3, #0
 8006a7e:	2300      	movmi	r3, #0
 8006a80:	bf4c      	ite	mi
 8006a82:	9305      	strmi	r3, [sp, #20]
 8006a84:	9304      	strpl	r3, [sp, #16]
 8006a86:	9b00      	ldr	r3, [sp, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	db3d      	blt.n	8006b08 <_dtoa_r+0x248>
 8006a8c:	9b05      	ldr	r3, [sp, #20]
 8006a8e:	9a00      	ldr	r2, [sp, #0]
 8006a90:	920a      	str	r2, [sp, #40]	; 0x28
 8006a92:	4413      	add	r3, r2
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9307      	str	r3, [sp, #28]
 8006a9a:	9b06      	ldr	r3, [sp, #24]
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	f200 8089 	bhi.w	8006bb4 <_dtoa_r+0x2f4>
 8006aa2:	2b05      	cmp	r3, #5
 8006aa4:	bfc4      	itt	gt
 8006aa6:	3b04      	subgt	r3, #4
 8006aa8:	9306      	strgt	r3, [sp, #24]
 8006aaa:	9b06      	ldr	r3, [sp, #24]
 8006aac:	f1a3 0302 	sub.w	r3, r3, #2
 8006ab0:	bfcc      	ite	gt
 8006ab2:	2500      	movgt	r5, #0
 8006ab4:	2501      	movle	r5, #1
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	f200 8087 	bhi.w	8006bca <_dtoa_r+0x30a>
 8006abc:	e8df f003 	tbb	[pc, r3]
 8006ac0:	59383a2d 	.word	0x59383a2d
 8006ac4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ac8:	441d      	add	r5, r3
 8006aca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	bfc1      	itttt	gt
 8006ad2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ad6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ada:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ade:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ae2:	bfda      	itte	le
 8006ae4:	f1c3 0320 	rsble	r3, r3, #32
 8006ae8:	fa06 f003 	lslle.w	r0, r6, r3
 8006aec:	4318      	orrgt	r0, r3
 8006aee:	f7f9 fd29 	bl	8000544 <__aeabi_ui2d>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4606      	mov	r6, r0
 8006af6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006afa:	3d01      	subs	r5, #1
 8006afc:	930e      	str	r3, [sp, #56]	; 0x38
 8006afe:	e76a      	b.n	80069d6 <_dtoa_r+0x116>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e7b2      	b.n	8006a6a <_dtoa_r+0x1aa>
 8006b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b06:	e7b1      	b.n	8006a6c <_dtoa_r+0x1ac>
 8006b08:	9b04      	ldr	r3, [sp, #16]
 8006b0a:	9a00      	ldr	r2, [sp, #0]
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	4253      	negs	r3, r2
 8006b12:	9307      	str	r3, [sp, #28]
 8006b14:	2300      	movs	r3, #0
 8006b16:	930a      	str	r3, [sp, #40]	; 0x28
 8006b18:	e7bf      	b.n	8006a9a <_dtoa_r+0x1da>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9308      	str	r3, [sp, #32]
 8006b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	dc55      	bgt.n	8006bd0 <_dtoa_r+0x310>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2e:	e00c      	b.n	8006b4a <_dtoa_r+0x28a>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e7f3      	b.n	8006b1c <_dtoa_r+0x25c>
 8006b34:	2300      	movs	r3, #0
 8006b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b38:	9308      	str	r3, [sp, #32]
 8006b3a:	9b00      	ldr	r3, [sp, #0]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	9302      	str	r3, [sp, #8]
 8006b40:	3301      	adds	r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	bfb8      	it	lt
 8006b48:	2301      	movlt	r3, #1
 8006b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	6042      	str	r2, [r0, #4]
 8006b50:	2204      	movs	r2, #4
 8006b52:	f102 0614 	add.w	r6, r2, #20
 8006b56:	429e      	cmp	r6, r3
 8006b58:	6841      	ldr	r1, [r0, #4]
 8006b5a:	d93d      	bls.n	8006bd8 <_dtoa_r+0x318>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f001 f839 	bl	8007bd4 <_Balloc>
 8006b62:	9001      	str	r0, [sp, #4]
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d13b      	bne.n	8006be0 <_dtoa_r+0x320>
 8006b68:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <_dtoa_r+0x2f0>)
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b70:	e6c0      	b.n	80068f4 <_dtoa_r+0x34>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7df      	b.n	8006b36 <_dtoa_r+0x276>
 8006b76:	bf00      	nop
 8006b78:	636f4361 	.word	0x636f4361
 8006b7c:	3fd287a7 	.word	0x3fd287a7
 8006b80:	8b60c8b3 	.word	0x8b60c8b3
 8006b84:	3fc68a28 	.word	0x3fc68a28
 8006b88:	509f79fb 	.word	0x509f79fb
 8006b8c:	3fd34413 	.word	0x3fd34413
 8006b90:	080098ae 	.word	0x080098ae
 8006b94:	080098c5 	.word	0x080098c5
 8006b98:	7ff00000 	.word	0x7ff00000
 8006b9c:	080098aa 	.word	0x080098aa
 8006ba0:	080098a1 	.word	0x080098a1
 8006ba4:	08009721 	.word	0x08009721
 8006ba8:	3ff80000 	.word	0x3ff80000
 8006bac:	08009a30 	.word	0x08009a30
 8006bb0:	08009920 	.word	0x08009920
 8006bb4:	2501      	movs	r5, #1
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9306      	str	r3, [sp, #24]
 8006bba:	9508      	str	r5, [sp, #32]
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2312      	movs	r3, #18
 8006bc8:	e7b0      	b.n	8006b2c <_dtoa_r+0x26c>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	9308      	str	r3, [sp, #32]
 8006bce:	e7f5      	b.n	8006bbc <_dtoa_r+0x2fc>
 8006bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bd6:	e7b8      	b.n	8006b4a <_dtoa_r+0x28a>
 8006bd8:	3101      	adds	r1, #1
 8006bda:	6041      	str	r1, [r0, #4]
 8006bdc:	0052      	lsls	r2, r2, #1
 8006bde:	e7b8      	b.n	8006b52 <_dtoa_r+0x292>
 8006be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	2b0e      	cmp	r3, #14
 8006bea:	f200 809d 	bhi.w	8006d28 <_dtoa_r+0x468>
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	f000 809a 	beq.w	8006d28 <_dtoa_r+0x468>
 8006bf4:	9b00      	ldr	r3, [sp, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd32      	ble.n	8006c60 <_dtoa_r+0x3a0>
 8006bfa:	4ab7      	ldr	r2, [pc, #732]	; (8006ed8 <_dtoa_r+0x618>)
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c08:	9b00      	ldr	r3, [sp, #0]
 8006c0a:	05d8      	lsls	r0, r3, #23
 8006c0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c10:	d516      	bpl.n	8006c40 <_dtoa_r+0x380>
 8006c12:	4bb2      	ldr	r3, [pc, #712]	; (8006edc <_dtoa_r+0x61c>)
 8006c14:	ec51 0b19 	vmov	r0, r1, d9
 8006c18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c1c:	f7f9 fe36 	bl	800088c <__aeabi_ddiv>
 8006c20:	f007 070f 	and.w	r7, r7, #15
 8006c24:	4682      	mov	sl, r0
 8006c26:	468b      	mov	fp, r1
 8006c28:	2503      	movs	r5, #3
 8006c2a:	4eac      	ldr	r6, [pc, #688]	; (8006edc <_dtoa_r+0x61c>)
 8006c2c:	b957      	cbnz	r7, 8006c44 <_dtoa_r+0x384>
 8006c2e:	4642      	mov	r2, r8
 8006c30:	464b      	mov	r3, r9
 8006c32:	4650      	mov	r0, sl
 8006c34:	4659      	mov	r1, fp
 8006c36:	f7f9 fe29 	bl	800088c <__aeabi_ddiv>
 8006c3a:	4682      	mov	sl, r0
 8006c3c:	468b      	mov	fp, r1
 8006c3e:	e028      	b.n	8006c92 <_dtoa_r+0x3d2>
 8006c40:	2502      	movs	r5, #2
 8006c42:	e7f2      	b.n	8006c2a <_dtoa_r+0x36a>
 8006c44:	07f9      	lsls	r1, r7, #31
 8006c46:	d508      	bpl.n	8006c5a <_dtoa_r+0x39a>
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c50:	f7f9 fcf2 	bl	8000638 <__aeabi_dmul>
 8006c54:	3501      	adds	r5, #1
 8006c56:	4680      	mov	r8, r0
 8006c58:	4689      	mov	r9, r1
 8006c5a:	107f      	asrs	r7, r7, #1
 8006c5c:	3608      	adds	r6, #8
 8006c5e:	e7e5      	b.n	8006c2c <_dtoa_r+0x36c>
 8006c60:	f000 809b 	beq.w	8006d9a <_dtoa_r+0x4da>
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	4f9d      	ldr	r7, [pc, #628]	; (8006edc <_dtoa_r+0x61c>)
 8006c68:	425e      	negs	r6, r3
 8006c6a:	4b9b      	ldr	r3, [pc, #620]	; (8006ed8 <_dtoa_r+0x618>)
 8006c6c:	f006 020f 	and.w	r2, r6, #15
 8006c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	ec51 0b19 	vmov	r0, r1, d9
 8006c7c:	f7f9 fcdc 	bl	8000638 <__aeabi_dmul>
 8006c80:	1136      	asrs	r6, r6, #4
 8006c82:	4682      	mov	sl, r0
 8006c84:	468b      	mov	fp, r1
 8006c86:	2300      	movs	r3, #0
 8006c88:	2502      	movs	r5, #2
 8006c8a:	2e00      	cmp	r6, #0
 8006c8c:	d17a      	bne.n	8006d84 <_dtoa_r+0x4c4>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1d3      	bne.n	8006c3a <_dtoa_r+0x37a>
 8006c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8082 	beq.w	8006d9e <_dtoa_r+0x4de>
 8006c9a:	4b91      	ldr	r3, [pc, #580]	; (8006ee0 <_dtoa_r+0x620>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	4659      	mov	r1, fp
 8006ca2:	f7f9 ff3b 	bl	8000b1c <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d079      	beq.n	8006d9e <_dtoa_r+0x4de>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d076      	beq.n	8006d9e <_dtoa_r+0x4de>
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dd36      	ble.n	8006d24 <_dtoa_r+0x464>
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	1e5f      	subs	r7, r3, #1
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4b88      	ldr	r3, [pc, #544]	; (8006ee4 <_dtoa_r+0x624>)
 8006cc2:	f7f9 fcb9 	bl	8000638 <__aeabi_dmul>
 8006cc6:	9e02      	ldr	r6, [sp, #8]
 8006cc8:	4682      	mov	sl, r0
 8006cca:	468b      	mov	fp, r1
 8006ccc:	3501      	adds	r5, #1
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f7f9 fc48 	bl	8000564 <__aeabi_i2d>
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	f7f9 fcae 	bl	8000638 <__aeabi_dmul>
 8006cdc:	4b82      	ldr	r3, [pc, #520]	; (8006ee8 <_dtoa_r+0x628>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f7f9 faf4 	bl	80002cc <__adddf3>
 8006ce4:	46d0      	mov	r8, sl
 8006ce6:	46d9      	mov	r9, fp
 8006ce8:	4682      	mov	sl, r0
 8006cea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d158      	bne.n	8006da4 <_dtoa_r+0x4e4>
 8006cf2:	4b7e      	ldr	r3, [pc, #504]	; (8006eec <_dtoa_r+0x62c>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fae5 	bl	80002c8 <__aeabi_dsub>
 8006cfe:	4652      	mov	r2, sl
 8006d00:	465b      	mov	r3, fp
 8006d02:	4680      	mov	r8, r0
 8006d04:	4689      	mov	r9, r1
 8006d06:	f7f9 ff27 	bl	8000b58 <__aeabi_dcmpgt>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f040 8295 	bne.w	800723a <_dtoa_r+0x97a>
 8006d10:	4652      	mov	r2, sl
 8006d12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d16:	4640      	mov	r0, r8
 8006d18:	4649      	mov	r1, r9
 8006d1a:	f7f9 feff 	bl	8000b1c <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f040 8289 	bne.w	8007236 <_dtoa_r+0x976>
 8006d24:	ec5b ab19 	vmov	sl, fp, d9
 8006d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f2c0 8148 	blt.w	8006fc0 <_dtoa_r+0x700>
 8006d30:	9a00      	ldr	r2, [sp, #0]
 8006d32:	2a0e      	cmp	r2, #14
 8006d34:	f300 8144 	bgt.w	8006fc0 <_dtoa_r+0x700>
 8006d38:	4b67      	ldr	r3, [pc, #412]	; (8006ed8 <_dtoa_r+0x618>)
 8006d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f280 80d5 	bge.w	8006ef4 <_dtoa_r+0x634>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f300 80d1 	bgt.w	8006ef4 <_dtoa_r+0x634>
 8006d52:	f040 826f 	bne.w	8007234 <_dtoa_r+0x974>
 8006d56:	4b65      	ldr	r3, [pc, #404]	; (8006eec <_dtoa_r+0x62c>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fc6b 	bl	8000638 <__aeabi_dmul>
 8006d62:	4652      	mov	r2, sl
 8006d64:	465b      	mov	r3, fp
 8006d66:	f7f9 feed 	bl	8000b44 <__aeabi_dcmpge>
 8006d6a:	9e03      	ldr	r6, [sp, #12]
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f040 8245 	bne.w	80071fe <_dtoa_r+0x93e>
 8006d74:	9d01      	ldr	r5, [sp, #4]
 8006d76:	2331      	movs	r3, #49	; 0x31
 8006d78:	f805 3b01 	strb.w	r3, [r5], #1
 8006d7c:	9b00      	ldr	r3, [sp, #0]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	e240      	b.n	8007206 <_dtoa_r+0x946>
 8006d84:	07f2      	lsls	r2, r6, #31
 8006d86:	d505      	bpl.n	8006d94 <_dtoa_r+0x4d4>
 8006d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8c:	f7f9 fc54 	bl	8000638 <__aeabi_dmul>
 8006d90:	3501      	adds	r5, #1
 8006d92:	2301      	movs	r3, #1
 8006d94:	1076      	asrs	r6, r6, #1
 8006d96:	3708      	adds	r7, #8
 8006d98:	e777      	b.n	8006c8a <_dtoa_r+0x3ca>
 8006d9a:	2502      	movs	r5, #2
 8006d9c:	e779      	b.n	8006c92 <_dtoa_r+0x3d2>
 8006d9e:	9f00      	ldr	r7, [sp, #0]
 8006da0:	9e03      	ldr	r6, [sp, #12]
 8006da2:	e794      	b.n	8006cce <_dtoa_r+0x40e>
 8006da4:	9901      	ldr	r1, [sp, #4]
 8006da6:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <_dtoa_r+0x618>)
 8006da8:	4431      	add	r1, r6
 8006daa:	910d      	str	r1, [sp, #52]	; 0x34
 8006dac:	9908      	ldr	r1, [sp, #32]
 8006dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006db6:	2900      	cmp	r1, #0
 8006db8:	d043      	beq.n	8006e42 <_dtoa_r+0x582>
 8006dba:	494d      	ldr	r1, [pc, #308]	; (8006ef0 <_dtoa_r+0x630>)
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	f7f9 fd65 	bl	800088c <__aeabi_ddiv>
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	465b      	mov	r3, fp
 8006dc6:	f7f9 fa7f 	bl	80002c8 <__aeabi_dsub>
 8006dca:	9d01      	ldr	r5, [sp, #4]
 8006dcc:	4682      	mov	sl, r0
 8006dce:	468b      	mov	fp, r1
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	f7f9 fee0 	bl	8000b98 <__aeabi_d2iz>
 8006dd8:	4606      	mov	r6, r0
 8006dda:	f7f9 fbc3 	bl	8000564 <__aeabi_i2d>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fa6f 	bl	80002c8 <__aeabi_dsub>
 8006dea:	3630      	adds	r6, #48	; 0x30
 8006dec:	f805 6b01 	strb.w	r6, [r5], #1
 8006df0:	4652      	mov	r2, sl
 8006df2:	465b      	mov	r3, fp
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	f7f9 fe90 	bl	8000b1c <__aeabi_dcmplt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d163      	bne.n	8006ec8 <_dtoa_r+0x608>
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	4936      	ldr	r1, [pc, #216]	; (8006ee0 <_dtoa_r+0x620>)
 8006e06:	2000      	movs	r0, #0
 8006e08:	f7f9 fa5e 	bl	80002c8 <__aeabi_dsub>
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	465b      	mov	r3, fp
 8006e10:	f7f9 fe84 	bl	8000b1c <__aeabi_dcmplt>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f040 80b5 	bne.w	8006f84 <_dtoa_r+0x6c4>
 8006e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e1c:	429d      	cmp	r5, r3
 8006e1e:	d081      	beq.n	8006d24 <_dtoa_r+0x464>
 8006e20:	4b30      	ldr	r3, [pc, #192]	; (8006ee4 <_dtoa_r+0x624>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	4650      	mov	r0, sl
 8006e26:	4659      	mov	r1, fp
 8006e28:	f7f9 fc06 	bl	8000638 <__aeabi_dmul>
 8006e2c:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <_dtoa_r+0x624>)
 8006e2e:	4682      	mov	sl, r0
 8006e30:	468b      	mov	fp, r1
 8006e32:	4640      	mov	r0, r8
 8006e34:	4649      	mov	r1, r9
 8006e36:	2200      	movs	r2, #0
 8006e38:	f7f9 fbfe 	bl	8000638 <__aeabi_dmul>
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	4689      	mov	r9, r1
 8006e40:	e7c6      	b.n	8006dd0 <_dtoa_r+0x510>
 8006e42:	4650      	mov	r0, sl
 8006e44:	4659      	mov	r1, fp
 8006e46:	f7f9 fbf7 	bl	8000638 <__aeabi_dmul>
 8006e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e4c:	9d01      	ldr	r5, [sp, #4]
 8006e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e50:	4682      	mov	sl, r0
 8006e52:	468b      	mov	fp, r1
 8006e54:	4649      	mov	r1, r9
 8006e56:	4640      	mov	r0, r8
 8006e58:	f7f9 fe9e 	bl	8000b98 <__aeabi_d2iz>
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	f7f9 fb81 	bl	8000564 <__aeabi_i2d>
 8006e62:	3630      	adds	r6, #48	; 0x30
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fa2c 	bl	80002c8 <__aeabi_dsub>
 8006e70:	f805 6b01 	strb.w	r6, [r5], #1
 8006e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e76:	429d      	cmp	r5, r3
 8006e78:	4680      	mov	r8, r0
 8006e7a:	4689      	mov	r9, r1
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	d124      	bne.n	8006ecc <_dtoa_r+0x60c>
 8006e82:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <_dtoa_r+0x630>)
 8006e84:	4650      	mov	r0, sl
 8006e86:	4659      	mov	r1, fp
 8006e88:	f7f9 fa20 	bl	80002cc <__adddf3>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fe60 	bl	8000b58 <__aeabi_dcmpgt>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d173      	bne.n	8006f84 <_dtoa_r+0x6c4>
 8006e9c:	4652      	mov	r2, sl
 8006e9e:	465b      	mov	r3, fp
 8006ea0:	4913      	ldr	r1, [pc, #76]	; (8006ef0 <_dtoa_r+0x630>)
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f7f9 fa10 	bl	80002c8 <__aeabi_dsub>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 fe34 	bl	8000b1c <__aeabi_dcmplt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f43f af35 	beq.w	8006d24 <_dtoa_r+0x464>
 8006eba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ebc:	1e6b      	subs	r3, r5, #1
 8006ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ec4:	2b30      	cmp	r3, #48	; 0x30
 8006ec6:	d0f8      	beq.n	8006eba <_dtoa_r+0x5fa>
 8006ec8:	9700      	str	r7, [sp, #0]
 8006eca:	e049      	b.n	8006f60 <_dtoa_r+0x6a0>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <_dtoa_r+0x624>)
 8006ece:	f7f9 fbb3 	bl	8000638 <__aeabi_dmul>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	4689      	mov	r9, r1
 8006ed6:	e7bd      	b.n	8006e54 <_dtoa_r+0x594>
 8006ed8:	08009a30 	.word	0x08009a30
 8006edc:	08009a08 	.word	0x08009a08
 8006ee0:	3ff00000 	.word	0x3ff00000
 8006ee4:	40240000 	.word	0x40240000
 8006ee8:	401c0000 	.word	0x401c0000
 8006eec:	40140000 	.word	0x40140000
 8006ef0:	3fe00000 	.word	0x3fe00000
 8006ef4:	9d01      	ldr	r5, [sp, #4]
 8006ef6:	4656      	mov	r6, sl
 8006ef8:	465f      	mov	r7, fp
 8006efa:	4642      	mov	r2, r8
 8006efc:	464b      	mov	r3, r9
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 fcc3 	bl	800088c <__aeabi_ddiv>
 8006f06:	f7f9 fe47 	bl	8000b98 <__aeabi_d2iz>
 8006f0a:	4682      	mov	sl, r0
 8006f0c:	f7f9 fb2a 	bl	8000564 <__aeabi_i2d>
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	f7f9 fb90 	bl	8000638 <__aeabi_dmul>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	4639      	mov	r1, r7
 8006f20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f24:	f7f9 f9d0 	bl	80002c8 <__aeabi_dsub>
 8006f28:	f805 6b01 	strb.w	r6, [r5], #1
 8006f2c:	9e01      	ldr	r6, [sp, #4]
 8006f2e:	9f03      	ldr	r7, [sp, #12]
 8006f30:	1bae      	subs	r6, r5, r6
 8006f32:	42b7      	cmp	r7, r6
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	d135      	bne.n	8006fa6 <_dtoa_r+0x6e6>
 8006f3a:	f7f9 f9c7 	bl	80002cc <__adddf3>
 8006f3e:	4642      	mov	r2, r8
 8006f40:	464b      	mov	r3, r9
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	f7f9 fe07 	bl	8000b58 <__aeabi_dcmpgt>
 8006f4a:	b9d0      	cbnz	r0, 8006f82 <_dtoa_r+0x6c2>
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	4630      	mov	r0, r6
 8006f52:	4639      	mov	r1, r7
 8006f54:	f7f9 fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8006f58:	b110      	cbz	r0, 8006f60 <_dtoa_r+0x6a0>
 8006f5a:	f01a 0f01 	tst.w	sl, #1
 8006f5e:	d110      	bne.n	8006f82 <_dtoa_r+0x6c2>
 8006f60:	4620      	mov	r0, r4
 8006f62:	ee18 1a10 	vmov	r1, s16
 8006f66:	f000 fe75 	bl	8007c54 <_Bfree>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9800      	ldr	r0, [sp, #0]
 8006f6e:	702b      	strb	r3, [r5, #0]
 8006f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f72:	3001      	adds	r0, #1
 8006f74:	6018      	str	r0, [r3, #0]
 8006f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f43f acf1 	beq.w	8006960 <_dtoa_r+0xa0>
 8006f7e:	601d      	str	r5, [r3, #0]
 8006f80:	e4ee      	b.n	8006960 <_dtoa_r+0xa0>
 8006f82:	9f00      	ldr	r7, [sp, #0]
 8006f84:	462b      	mov	r3, r5
 8006f86:	461d      	mov	r5, r3
 8006f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f8c:	2a39      	cmp	r2, #57	; 0x39
 8006f8e:	d106      	bne.n	8006f9e <_dtoa_r+0x6de>
 8006f90:	9a01      	ldr	r2, [sp, #4]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d1f7      	bne.n	8006f86 <_dtoa_r+0x6c6>
 8006f96:	9901      	ldr	r1, [sp, #4]
 8006f98:	2230      	movs	r2, #48	; 0x30
 8006f9a:	3701      	adds	r7, #1
 8006f9c:	700a      	strb	r2, [r1, #0]
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	3201      	adds	r2, #1
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e790      	b.n	8006ec8 <_dtoa_r+0x608>
 8006fa6:	4ba6      	ldr	r3, [pc, #664]	; (8007240 <_dtoa_r+0x980>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f7f9 fb45 	bl	8000638 <__aeabi_dmul>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	f7f9 fda7 	bl	8000b08 <__aeabi_dcmpeq>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d09d      	beq.n	8006efa <_dtoa_r+0x63a>
 8006fbe:	e7cf      	b.n	8006f60 <_dtoa_r+0x6a0>
 8006fc0:	9a08      	ldr	r2, [sp, #32]
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	f000 80d7 	beq.w	8007176 <_dtoa_r+0x8b6>
 8006fc8:	9a06      	ldr	r2, [sp, #24]
 8006fca:	2a01      	cmp	r2, #1
 8006fcc:	f300 80ba 	bgt.w	8007144 <_dtoa_r+0x884>
 8006fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fd2:	2a00      	cmp	r2, #0
 8006fd4:	f000 80b2 	beq.w	800713c <_dtoa_r+0x87c>
 8006fd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fdc:	9e07      	ldr	r6, [sp, #28]
 8006fde:	9d04      	ldr	r5, [sp, #16]
 8006fe0:	9a04      	ldr	r2, [sp, #16]
 8006fe2:	441a      	add	r2, r3
 8006fe4:	9204      	str	r2, [sp, #16]
 8006fe6:	9a05      	ldr	r2, [sp, #20]
 8006fe8:	2101      	movs	r1, #1
 8006fea:	441a      	add	r2, r3
 8006fec:	4620      	mov	r0, r4
 8006fee:	9205      	str	r2, [sp, #20]
 8006ff0:	f000 ff32 	bl	8007e58 <__i2b>
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	dd0c      	ble.n	8007014 <_dtoa_r+0x754>
 8006ffa:	9b05      	ldr	r3, [sp, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dd09      	ble.n	8007014 <_dtoa_r+0x754>
 8007000:	42ab      	cmp	r3, r5
 8007002:	9a04      	ldr	r2, [sp, #16]
 8007004:	bfa8      	it	ge
 8007006:	462b      	movge	r3, r5
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	9204      	str	r2, [sp, #16]
 800700c:	9a05      	ldr	r2, [sp, #20]
 800700e:	1aed      	subs	r5, r5, r3
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	9b07      	ldr	r3, [sp, #28]
 8007016:	b31b      	cbz	r3, 8007060 <_dtoa_r+0x7a0>
 8007018:	9b08      	ldr	r3, [sp, #32]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80af 	beq.w	800717e <_dtoa_r+0x8be>
 8007020:	2e00      	cmp	r6, #0
 8007022:	dd13      	ble.n	800704c <_dtoa_r+0x78c>
 8007024:	4639      	mov	r1, r7
 8007026:	4632      	mov	r2, r6
 8007028:	4620      	mov	r0, r4
 800702a:	f000 ffd5 	bl	8007fd8 <__pow5mult>
 800702e:	ee18 2a10 	vmov	r2, s16
 8007032:	4601      	mov	r1, r0
 8007034:	4607      	mov	r7, r0
 8007036:	4620      	mov	r0, r4
 8007038:	f000 ff24 	bl	8007e84 <__multiply>
 800703c:	ee18 1a10 	vmov	r1, s16
 8007040:	4680      	mov	r8, r0
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fe06 	bl	8007c54 <_Bfree>
 8007048:	ee08 8a10 	vmov	s16, r8
 800704c:	9b07      	ldr	r3, [sp, #28]
 800704e:	1b9a      	subs	r2, r3, r6
 8007050:	d006      	beq.n	8007060 <_dtoa_r+0x7a0>
 8007052:	ee18 1a10 	vmov	r1, s16
 8007056:	4620      	mov	r0, r4
 8007058:	f000 ffbe 	bl	8007fd8 <__pow5mult>
 800705c:	ee08 0a10 	vmov	s16, r0
 8007060:	2101      	movs	r1, #1
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fef8 	bl	8007e58 <__i2b>
 8007068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	4606      	mov	r6, r0
 800706e:	f340 8088 	ble.w	8007182 <_dtoa_r+0x8c2>
 8007072:	461a      	mov	r2, r3
 8007074:	4601      	mov	r1, r0
 8007076:	4620      	mov	r0, r4
 8007078:	f000 ffae 	bl	8007fd8 <__pow5mult>
 800707c:	9b06      	ldr	r3, [sp, #24]
 800707e:	2b01      	cmp	r3, #1
 8007080:	4606      	mov	r6, r0
 8007082:	f340 8081 	ble.w	8007188 <_dtoa_r+0x8c8>
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	6933      	ldr	r3, [r6, #16]
 800708c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007090:	6918      	ldr	r0, [r3, #16]
 8007092:	f000 fe91 	bl	8007db8 <__hi0bits>
 8007096:	f1c0 0020 	rsb	r0, r0, #32
 800709a:	9b05      	ldr	r3, [sp, #20]
 800709c:	4418      	add	r0, r3
 800709e:	f010 001f 	ands.w	r0, r0, #31
 80070a2:	f000 8092 	beq.w	80071ca <_dtoa_r+0x90a>
 80070a6:	f1c0 0320 	rsb	r3, r0, #32
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	f340 808a 	ble.w	80071c4 <_dtoa_r+0x904>
 80070b0:	f1c0 001c 	rsb	r0, r0, #28
 80070b4:	9b04      	ldr	r3, [sp, #16]
 80070b6:	4403      	add	r3, r0
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	4403      	add	r3, r0
 80070be:	4405      	add	r5, r0
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dd07      	ble.n	80070d8 <_dtoa_r+0x818>
 80070c8:	ee18 1a10 	vmov	r1, s16
 80070cc:	461a      	mov	r2, r3
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 ffdc 	bl	800808c <__lshift>
 80070d4:	ee08 0a10 	vmov	s16, r0
 80070d8:	9b05      	ldr	r3, [sp, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dd05      	ble.n	80070ea <_dtoa_r+0x82a>
 80070de:	4631      	mov	r1, r6
 80070e0:	461a      	mov	r2, r3
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 ffd2 	bl	800808c <__lshift>
 80070e8:	4606      	mov	r6, r0
 80070ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d06e      	beq.n	80071ce <_dtoa_r+0x90e>
 80070f0:	ee18 0a10 	vmov	r0, s16
 80070f4:	4631      	mov	r1, r6
 80070f6:	f001 f839 	bl	800816c <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	da67      	bge.n	80071ce <_dtoa_r+0x90e>
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	3b01      	subs	r3, #1
 8007102:	ee18 1a10 	vmov	r1, s16
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	220a      	movs	r2, #10
 800710a:	2300      	movs	r3, #0
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fdc3 	bl	8007c98 <__multadd>
 8007112:	9b08      	ldr	r3, [sp, #32]
 8007114:	ee08 0a10 	vmov	s16, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 81b1 	beq.w	8007480 <_dtoa_r+0xbc0>
 800711e:	2300      	movs	r3, #0
 8007120:	4639      	mov	r1, r7
 8007122:	220a      	movs	r2, #10
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fdb7 	bl	8007c98 <__multadd>
 800712a:	9b02      	ldr	r3, [sp, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	4607      	mov	r7, r0
 8007130:	f300 808e 	bgt.w	8007250 <_dtoa_r+0x990>
 8007134:	9b06      	ldr	r3, [sp, #24]
 8007136:	2b02      	cmp	r3, #2
 8007138:	dc51      	bgt.n	80071de <_dtoa_r+0x91e>
 800713a:	e089      	b.n	8007250 <_dtoa_r+0x990>
 800713c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800713e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007142:	e74b      	b.n	8006fdc <_dtoa_r+0x71c>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	1e5e      	subs	r6, r3, #1
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	42b3      	cmp	r3, r6
 800714c:	bfbf      	itttt	lt
 800714e:	9b07      	ldrlt	r3, [sp, #28]
 8007150:	9607      	strlt	r6, [sp, #28]
 8007152:	1af2      	sublt	r2, r6, r3
 8007154:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007156:	bfb6      	itet	lt
 8007158:	189b      	addlt	r3, r3, r2
 800715a:	1b9e      	subge	r6, r3, r6
 800715c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	bfb8      	it	lt
 8007162:	2600      	movlt	r6, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfb7      	itett	lt
 8007168:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800716c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007170:	1a9d      	sublt	r5, r3, r2
 8007172:	2300      	movlt	r3, #0
 8007174:	e734      	b.n	8006fe0 <_dtoa_r+0x720>
 8007176:	9e07      	ldr	r6, [sp, #28]
 8007178:	9d04      	ldr	r5, [sp, #16]
 800717a:	9f08      	ldr	r7, [sp, #32]
 800717c:	e73b      	b.n	8006ff6 <_dtoa_r+0x736>
 800717e:	9a07      	ldr	r2, [sp, #28]
 8007180:	e767      	b.n	8007052 <_dtoa_r+0x792>
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	2b01      	cmp	r3, #1
 8007186:	dc18      	bgt.n	80071ba <_dtoa_r+0x8fa>
 8007188:	f1ba 0f00 	cmp.w	sl, #0
 800718c:	d115      	bne.n	80071ba <_dtoa_r+0x8fa>
 800718e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007192:	b993      	cbnz	r3, 80071ba <_dtoa_r+0x8fa>
 8007194:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007198:	0d1b      	lsrs	r3, r3, #20
 800719a:	051b      	lsls	r3, r3, #20
 800719c:	b183      	cbz	r3, 80071c0 <_dtoa_r+0x900>
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	3301      	adds	r3, #1
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	9b05      	ldr	r3, [sp, #20]
 80071a6:	3301      	adds	r3, #1
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	f04f 0801 	mov.w	r8, #1
 80071ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f47f af6a 	bne.w	800708a <_dtoa_r+0x7ca>
 80071b6:	2001      	movs	r0, #1
 80071b8:	e76f      	b.n	800709a <_dtoa_r+0x7da>
 80071ba:	f04f 0800 	mov.w	r8, #0
 80071be:	e7f6      	b.n	80071ae <_dtoa_r+0x8ee>
 80071c0:	4698      	mov	r8, r3
 80071c2:	e7f4      	b.n	80071ae <_dtoa_r+0x8ee>
 80071c4:	f43f af7d 	beq.w	80070c2 <_dtoa_r+0x802>
 80071c8:	4618      	mov	r0, r3
 80071ca:	301c      	adds	r0, #28
 80071cc:	e772      	b.n	80070b4 <_dtoa_r+0x7f4>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dc37      	bgt.n	8007244 <_dtoa_r+0x984>
 80071d4:	9b06      	ldr	r3, [sp, #24]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	dd34      	ble.n	8007244 <_dtoa_r+0x984>
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	b96b      	cbnz	r3, 80071fe <_dtoa_r+0x93e>
 80071e2:	4631      	mov	r1, r6
 80071e4:	2205      	movs	r2, #5
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fd56 	bl	8007c98 <__multadd>
 80071ec:	4601      	mov	r1, r0
 80071ee:	4606      	mov	r6, r0
 80071f0:	ee18 0a10 	vmov	r0, s16
 80071f4:	f000 ffba 	bl	800816c <__mcmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f73f adbb 	bgt.w	8006d74 <_dtoa_r+0x4b4>
 80071fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007200:	9d01      	ldr	r5, [sp, #4]
 8007202:	43db      	mvns	r3, r3
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	4631      	mov	r1, r6
 800720c:	4620      	mov	r0, r4
 800720e:	f000 fd21 	bl	8007c54 <_Bfree>
 8007212:	2f00      	cmp	r7, #0
 8007214:	f43f aea4 	beq.w	8006f60 <_dtoa_r+0x6a0>
 8007218:	f1b8 0f00 	cmp.w	r8, #0
 800721c:	d005      	beq.n	800722a <_dtoa_r+0x96a>
 800721e:	45b8      	cmp	r8, r7
 8007220:	d003      	beq.n	800722a <_dtoa_r+0x96a>
 8007222:	4641      	mov	r1, r8
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fd15 	bl	8007c54 <_Bfree>
 800722a:	4639      	mov	r1, r7
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fd11 	bl	8007c54 <_Bfree>
 8007232:	e695      	b.n	8006f60 <_dtoa_r+0x6a0>
 8007234:	2600      	movs	r6, #0
 8007236:	4637      	mov	r7, r6
 8007238:	e7e1      	b.n	80071fe <_dtoa_r+0x93e>
 800723a:	9700      	str	r7, [sp, #0]
 800723c:	4637      	mov	r7, r6
 800723e:	e599      	b.n	8006d74 <_dtoa_r+0x4b4>
 8007240:	40240000 	.word	0x40240000
 8007244:	9b08      	ldr	r3, [sp, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80ca 	beq.w	80073e0 <_dtoa_r+0xb20>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	9302      	str	r3, [sp, #8]
 8007250:	2d00      	cmp	r5, #0
 8007252:	dd05      	ble.n	8007260 <_dtoa_r+0x9a0>
 8007254:	4639      	mov	r1, r7
 8007256:	462a      	mov	r2, r5
 8007258:	4620      	mov	r0, r4
 800725a:	f000 ff17 	bl	800808c <__lshift>
 800725e:	4607      	mov	r7, r0
 8007260:	f1b8 0f00 	cmp.w	r8, #0
 8007264:	d05b      	beq.n	800731e <_dtoa_r+0xa5e>
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fcb3 	bl	8007bd4 <_Balloc>
 800726e:	4605      	mov	r5, r0
 8007270:	b928      	cbnz	r0, 800727e <_dtoa_r+0x9be>
 8007272:	4b87      	ldr	r3, [pc, #540]	; (8007490 <_dtoa_r+0xbd0>)
 8007274:	4602      	mov	r2, r0
 8007276:	f240 21ea 	movw	r1, #746	; 0x2ea
 800727a:	f7ff bb3b 	b.w	80068f4 <_dtoa_r+0x34>
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	3202      	adds	r2, #2
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	f107 010c 	add.w	r1, r7, #12
 8007288:	300c      	adds	r0, #12
 800728a:	f000 fc95 	bl	8007bb8 <memcpy>
 800728e:	2201      	movs	r2, #1
 8007290:	4629      	mov	r1, r5
 8007292:	4620      	mov	r0, r4
 8007294:	f000 fefa 	bl	800808c <__lshift>
 8007298:	9b01      	ldr	r3, [sp, #4]
 800729a:	f103 0901 	add.w	r9, r3, #1
 800729e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	9305      	str	r3, [sp, #20]
 80072a6:	f00a 0301 	and.w	r3, sl, #1
 80072aa:	46b8      	mov	r8, r7
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	4607      	mov	r7, r0
 80072b0:	4631      	mov	r1, r6
 80072b2:	ee18 0a10 	vmov	r0, s16
 80072b6:	f7ff fa77 	bl	80067a8 <quorem>
 80072ba:	4641      	mov	r1, r8
 80072bc:	9002      	str	r0, [sp, #8]
 80072be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072c2:	ee18 0a10 	vmov	r0, s16
 80072c6:	f000 ff51 	bl	800816c <__mcmp>
 80072ca:	463a      	mov	r2, r7
 80072cc:	9003      	str	r0, [sp, #12]
 80072ce:	4631      	mov	r1, r6
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 ff67 	bl	80081a4 <__mdiff>
 80072d6:	68c2      	ldr	r2, [r0, #12]
 80072d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80072dc:	4605      	mov	r5, r0
 80072de:	bb02      	cbnz	r2, 8007322 <_dtoa_r+0xa62>
 80072e0:	4601      	mov	r1, r0
 80072e2:	ee18 0a10 	vmov	r0, s16
 80072e6:	f000 ff41 	bl	800816c <__mcmp>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4629      	mov	r1, r5
 80072ee:	4620      	mov	r0, r4
 80072f0:	9207      	str	r2, [sp, #28]
 80072f2:	f000 fcaf 	bl	8007c54 <_Bfree>
 80072f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80072fa:	ea43 0102 	orr.w	r1, r3, r2
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	430b      	orrs	r3, r1
 8007302:	464d      	mov	r5, r9
 8007304:	d10f      	bne.n	8007326 <_dtoa_r+0xa66>
 8007306:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800730a:	d02a      	beq.n	8007362 <_dtoa_r+0xaa2>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd02      	ble.n	8007318 <_dtoa_r+0xa58>
 8007312:	9b02      	ldr	r3, [sp, #8]
 8007314:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007318:	f88b a000 	strb.w	sl, [fp]
 800731c:	e775      	b.n	800720a <_dtoa_r+0x94a>
 800731e:	4638      	mov	r0, r7
 8007320:	e7ba      	b.n	8007298 <_dtoa_r+0x9d8>
 8007322:	2201      	movs	r2, #1
 8007324:	e7e2      	b.n	80072ec <_dtoa_r+0xa2c>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db04      	blt.n	8007336 <_dtoa_r+0xa76>
 800732c:	9906      	ldr	r1, [sp, #24]
 800732e:	430b      	orrs	r3, r1
 8007330:	9904      	ldr	r1, [sp, #16]
 8007332:	430b      	orrs	r3, r1
 8007334:	d122      	bne.n	800737c <_dtoa_r+0xabc>
 8007336:	2a00      	cmp	r2, #0
 8007338:	ddee      	ble.n	8007318 <_dtoa_r+0xa58>
 800733a:	ee18 1a10 	vmov	r1, s16
 800733e:	2201      	movs	r2, #1
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fea3 	bl	800808c <__lshift>
 8007346:	4631      	mov	r1, r6
 8007348:	ee08 0a10 	vmov	s16, r0
 800734c:	f000 ff0e 	bl	800816c <__mcmp>
 8007350:	2800      	cmp	r0, #0
 8007352:	dc03      	bgt.n	800735c <_dtoa_r+0xa9c>
 8007354:	d1e0      	bne.n	8007318 <_dtoa_r+0xa58>
 8007356:	f01a 0f01 	tst.w	sl, #1
 800735a:	d0dd      	beq.n	8007318 <_dtoa_r+0xa58>
 800735c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007360:	d1d7      	bne.n	8007312 <_dtoa_r+0xa52>
 8007362:	2339      	movs	r3, #57	; 0x39
 8007364:	f88b 3000 	strb.w	r3, [fp]
 8007368:	462b      	mov	r3, r5
 800736a:	461d      	mov	r5, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007372:	2a39      	cmp	r2, #57	; 0x39
 8007374:	d071      	beq.n	800745a <_dtoa_r+0xb9a>
 8007376:	3201      	adds	r2, #1
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	e746      	b.n	800720a <_dtoa_r+0x94a>
 800737c:	2a00      	cmp	r2, #0
 800737e:	dd07      	ble.n	8007390 <_dtoa_r+0xad0>
 8007380:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007384:	d0ed      	beq.n	8007362 <_dtoa_r+0xaa2>
 8007386:	f10a 0301 	add.w	r3, sl, #1
 800738a:	f88b 3000 	strb.w	r3, [fp]
 800738e:	e73c      	b.n	800720a <_dtoa_r+0x94a>
 8007390:	9b05      	ldr	r3, [sp, #20]
 8007392:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007396:	4599      	cmp	r9, r3
 8007398:	d047      	beq.n	800742a <_dtoa_r+0xb6a>
 800739a:	ee18 1a10 	vmov	r1, s16
 800739e:	2300      	movs	r3, #0
 80073a0:	220a      	movs	r2, #10
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fc78 	bl	8007c98 <__multadd>
 80073a8:	45b8      	cmp	r8, r7
 80073aa:	ee08 0a10 	vmov	s16, r0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	f04f 020a 	mov.w	r2, #10
 80073b6:	4641      	mov	r1, r8
 80073b8:	4620      	mov	r0, r4
 80073ba:	d106      	bne.n	80073ca <_dtoa_r+0xb0a>
 80073bc:	f000 fc6c 	bl	8007c98 <__multadd>
 80073c0:	4680      	mov	r8, r0
 80073c2:	4607      	mov	r7, r0
 80073c4:	f109 0901 	add.w	r9, r9, #1
 80073c8:	e772      	b.n	80072b0 <_dtoa_r+0x9f0>
 80073ca:	f000 fc65 	bl	8007c98 <__multadd>
 80073ce:	4639      	mov	r1, r7
 80073d0:	4680      	mov	r8, r0
 80073d2:	2300      	movs	r3, #0
 80073d4:	220a      	movs	r2, #10
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 fc5e 	bl	8007c98 <__multadd>
 80073dc:	4607      	mov	r7, r0
 80073de:	e7f1      	b.n	80073c4 <_dtoa_r+0xb04>
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	9302      	str	r3, [sp, #8]
 80073e4:	9d01      	ldr	r5, [sp, #4]
 80073e6:	ee18 0a10 	vmov	r0, s16
 80073ea:	4631      	mov	r1, r6
 80073ec:	f7ff f9dc 	bl	80067a8 <quorem>
 80073f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	f805 ab01 	strb.w	sl, [r5], #1
 80073fa:	1aea      	subs	r2, r5, r3
 80073fc:	9b02      	ldr	r3, [sp, #8]
 80073fe:	4293      	cmp	r3, r2
 8007400:	dd09      	ble.n	8007416 <_dtoa_r+0xb56>
 8007402:	ee18 1a10 	vmov	r1, s16
 8007406:	2300      	movs	r3, #0
 8007408:	220a      	movs	r2, #10
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fc44 	bl	8007c98 <__multadd>
 8007410:	ee08 0a10 	vmov	s16, r0
 8007414:	e7e7      	b.n	80073e6 <_dtoa_r+0xb26>
 8007416:	9b02      	ldr	r3, [sp, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	bfc8      	it	gt
 800741c:	461d      	movgt	r5, r3
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	bfd8      	it	le
 8007422:	2501      	movle	r5, #1
 8007424:	441d      	add	r5, r3
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	ee18 1a10 	vmov	r1, s16
 800742e:	2201      	movs	r2, #1
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fe2b 	bl	800808c <__lshift>
 8007436:	4631      	mov	r1, r6
 8007438:	ee08 0a10 	vmov	s16, r0
 800743c:	f000 fe96 	bl	800816c <__mcmp>
 8007440:	2800      	cmp	r0, #0
 8007442:	dc91      	bgt.n	8007368 <_dtoa_r+0xaa8>
 8007444:	d102      	bne.n	800744c <_dtoa_r+0xb8c>
 8007446:	f01a 0f01 	tst.w	sl, #1
 800744a:	d18d      	bne.n	8007368 <_dtoa_r+0xaa8>
 800744c:	462b      	mov	r3, r5
 800744e:	461d      	mov	r5, r3
 8007450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007454:	2a30      	cmp	r2, #48	; 0x30
 8007456:	d0fa      	beq.n	800744e <_dtoa_r+0xb8e>
 8007458:	e6d7      	b.n	800720a <_dtoa_r+0x94a>
 800745a:	9a01      	ldr	r2, [sp, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d184      	bne.n	800736a <_dtoa_r+0xaaa>
 8007460:	9b00      	ldr	r3, [sp, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2331      	movs	r3, #49	; 0x31
 8007468:	7013      	strb	r3, [r2, #0]
 800746a:	e6ce      	b.n	800720a <_dtoa_r+0x94a>
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <_dtoa_r+0xbd4>)
 800746e:	f7ff ba95 	b.w	800699c <_dtoa_r+0xdc>
 8007472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007474:	2b00      	cmp	r3, #0
 8007476:	f47f aa6e 	bne.w	8006956 <_dtoa_r+0x96>
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <_dtoa_r+0xbd8>)
 800747c:	f7ff ba8e 	b.w	800699c <_dtoa_r+0xdc>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	dcae      	bgt.n	80073e4 <_dtoa_r+0xb24>
 8007486:	9b06      	ldr	r3, [sp, #24]
 8007488:	2b02      	cmp	r3, #2
 800748a:	f73f aea8 	bgt.w	80071de <_dtoa_r+0x91e>
 800748e:	e7a9      	b.n	80073e4 <_dtoa_r+0xb24>
 8007490:	08009920 	.word	0x08009920
 8007494:	08009720 	.word	0x08009720
 8007498:	080098a1 	.word	0x080098a1

0800749c <rshift>:
 800749c:	6903      	ldr	r3, [r0, #16]
 800749e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074aa:	f100 0414 	add.w	r4, r0, #20
 80074ae:	dd45      	ble.n	800753c <rshift+0xa0>
 80074b0:	f011 011f 	ands.w	r1, r1, #31
 80074b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074bc:	d10c      	bne.n	80074d8 <rshift+0x3c>
 80074be:	f100 0710 	add.w	r7, r0, #16
 80074c2:	4629      	mov	r1, r5
 80074c4:	42b1      	cmp	r1, r6
 80074c6:	d334      	bcc.n	8007532 <rshift+0x96>
 80074c8:	1a9b      	subs	r3, r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	1eea      	subs	r2, r5, #3
 80074ce:	4296      	cmp	r6, r2
 80074d0:	bf38      	it	cc
 80074d2:	2300      	movcc	r3, #0
 80074d4:	4423      	add	r3, r4
 80074d6:	e015      	b.n	8007504 <rshift+0x68>
 80074d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074dc:	f1c1 0820 	rsb	r8, r1, #32
 80074e0:	40cf      	lsrs	r7, r1
 80074e2:	f105 0e04 	add.w	lr, r5, #4
 80074e6:	46a1      	mov	r9, r4
 80074e8:	4576      	cmp	r6, lr
 80074ea:	46f4      	mov	ip, lr
 80074ec:	d815      	bhi.n	800751a <rshift+0x7e>
 80074ee:	1a9a      	subs	r2, r3, r2
 80074f0:	0092      	lsls	r2, r2, #2
 80074f2:	3a04      	subs	r2, #4
 80074f4:	3501      	adds	r5, #1
 80074f6:	42ae      	cmp	r6, r5
 80074f8:	bf38      	it	cc
 80074fa:	2200      	movcc	r2, #0
 80074fc:	18a3      	adds	r3, r4, r2
 80074fe:	50a7      	str	r7, [r4, r2]
 8007500:	b107      	cbz	r7, 8007504 <rshift+0x68>
 8007502:	3304      	adds	r3, #4
 8007504:	1b1a      	subs	r2, r3, r4
 8007506:	42a3      	cmp	r3, r4
 8007508:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800750c:	bf08      	it	eq
 800750e:	2300      	moveq	r3, #0
 8007510:	6102      	str	r2, [r0, #16]
 8007512:	bf08      	it	eq
 8007514:	6143      	streq	r3, [r0, #20]
 8007516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800751a:	f8dc c000 	ldr.w	ip, [ip]
 800751e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007522:	ea4c 0707 	orr.w	r7, ip, r7
 8007526:	f849 7b04 	str.w	r7, [r9], #4
 800752a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800752e:	40cf      	lsrs	r7, r1
 8007530:	e7da      	b.n	80074e8 <rshift+0x4c>
 8007532:	f851 cb04 	ldr.w	ip, [r1], #4
 8007536:	f847 cf04 	str.w	ip, [r7, #4]!
 800753a:	e7c3      	b.n	80074c4 <rshift+0x28>
 800753c:	4623      	mov	r3, r4
 800753e:	e7e1      	b.n	8007504 <rshift+0x68>

08007540 <__hexdig_fun>:
 8007540:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007544:	2b09      	cmp	r3, #9
 8007546:	d802      	bhi.n	800754e <__hexdig_fun+0xe>
 8007548:	3820      	subs	r0, #32
 800754a:	b2c0      	uxtb	r0, r0
 800754c:	4770      	bx	lr
 800754e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007552:	2b05      	cmp	r3, #5
 8007554:	d801      	bhi.n	800755a <__hexdig_fun+0x1a>
 8007556:	3847      	subs	r0, #71	; 0x47
 8007558:	e7f7      	b.n	800754a <__hexdig_fun+0xa>
 800755a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800755e:	2b05      	cmp	r3, #5
 8007560:	d801      	bhi.n	8007566 <__hexdig_fun+0x26>
 8007562:	3827      	subs	r0, #39	; 0x27
 8007564:	e7f1      	b.n	800754a <__hexdig_fun+0xa>
 8007566:	2000      	movs	r0, #0
 8007568:	4770      	bx	lr
	...

0800756c <__gethex>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	ed2d 8b02 	vpush	{d8}
 8007574:	b089      	sub	sp, #36	; 0x24
 8007576:	ee08 0a10 	vmov	s16, r0
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	4bb4      	ldr	r3, [pc, #720]	; (8007850 <__gethex+0x2e4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	4618      	mov	r0, r3
 8007584:	468b      	mov	fp, r1
 8007586:	4690      	mov	r8, r2
 8007588:	f7f8 fe42 	bl	8000210 <strlen>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	f8db 2000 	ldr.w	r2, [fp]
 8007592:	4403      	add	r3, r0
 8007594:	4682      	mov	sl, r0
 8007596:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	1c93      	adds	r3, r2, #2
 800759e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075a6:	32fe      	adds	r2, #254	; 0xfe
 80075a8:	18d1      	adds	r1, r2, r3
 80075aa:	461f      	mov	r7, r3
 80075ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075b0:	9100      	str	r1, [sp, #0]
 80075b2:	2830      	cmp	r0, #48	; 0x30
 80075b4:	d0f8      	beq.n	80075a8 <__gethex+0x3c>
 80075b6:	f7ff ffc3 	bl	8007540 <__hexdig_fun>
 80075ba:	4604      	mov	r4, r0
 80075bc:	2800      	cmp	r0, #0
 80075be:	d13a      	bne.n	8007636 <__gethex+0xca>
 80075c0:	9901      	ldr	r1, [sp, #4]
 80075c2:	4652      	mov	r2, sl
 80075c4:	4638      	mov	r0, r7
 80075c6:	f001 fa33 	bl	8008a30 <strncmp>
 80075ca:	4605      	mov	r5, r0
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d168      	bne.n	80076a2 <__gethex+0x136>
 80075d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80075d4:	eb07 060a 	add.w	r6, r7, sl
 80075d8:	f7ff ffb2 	bl	8007540 <__hexdig_fun>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d062      	beq.n	80076a6 <__gethex+0x13a>
 80075e0:	4633      	mov	r3, r6
 80075e2:	7818      	ldrb	r0, [r3, #0]
 80075e4:	2830      	cmp	r0, #48	; 0x30
 80075e6:	461f      	mov	r7, r3
 80075e8:	f103 0301 	add.w	r3, r3, #1
 80075ec:	d0f9      	beq.n	80075e2 <__gethex+0x76>
 80075ee:	f7ff ffa7 	bl	8007540 <__hexdig_fun>
 80075f2:	2301      	movs	r3, #1
 80075f4:	fab0 f480 	clz	r4, r0
 80075f8:	0964      	lsrs	r4, r4, #5
 80075fa:	4635      	mov	r5, r6
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	463a      	mov	r2, r7
 8007600:	4616      	mov	r6, r2
 8007602:	3201      	adds	r2, #1
 8007604:	7830      	ldrb	r0, [r6, #0]
 8007606:	f7ff ff9b 	bl	8007540 <__hexdig_fun>
 800760a:	2800      	cmp	r0, #0
 800760c:	d1f8      	bne.n	8007600 <__gethex+0x94>
 800760e:	9901      	ldr	r1, [sp, #4]
 8007610:	4652      	mov	r2, sl
 8007612:	4630      	mov	r0, r6
 8007614:	f001 fa0c 	bl	8008a30 <strncmp>
 8007618:	b980      	cbnz	r0, 800763c <__gethex+0xd0>
 800761a:	b94d      	cbnz	r5, 8007630 <__gethex+0xc4>
 800761c:	eb06 050a 	add.w	r5, r6, sl
 8007620:	462a      	mov	r2, r5
 8007622:	4616      	mov	r6, r2
 8007624:	3201      	adds	r2, #1
 8007626:	7830      	ldrb	r0, [r6, #0]
 8007628:	f7ff ff8a 	bl	8007540 <__hexdig_fun>
 800762c:	2800      	cmp	r0, #0
 800762e:	d1f8      	bne.n	8007622 <__gethex+0xb6>
 8007630:	1bad      	subs	r5, r5, r6
 8007632:	00ad      	lsls	r5, r5, #2
 8007634:	e004      	b.n	8007640 <__gethex+0xd4>
 8007636:	2400      	movs	r4, #0
 8007638:	4625      	mov	r5, r4
 800763a:	e7e0      	b.n	80075fe <__gethex+0x92>
 800763c:	2d00      	cmp	r5, #0
 800763e:	d1f7      	bne.n	8007630 <__gethex+0xc4>
 8007640:	7833      	ldrb	r3, [r6, #0]
 8007642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007646:	2b50      	cmp	r3, #80	; 0x50
 8007648:	d13b      	bne.n	80076c2 <__gethex+0x156>
 800764a:	7873      	ldrb	r3, [r6, #1]
 800764c:	2b2b      	cmp	r3, #43	; 0x2b
 800764e:	d02c      	beq.n	80076aa <__gethex+0x13e>
 8007650:	2b2d      	cmp	r3, #45	; 0x2d
 8007652:	d02e      	beq.n	80076b2 <__gethex+0x146>
 8007654:	1c71      	adds	r1, r6, #1
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	7808      	ldrb	r0, [r1, #0]
 800765c:	f7ff ff70 	bl	8007540 <__hexdig_fun>
 8007660:	1e43      	subs	r3, r0, #1
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b18      	cmp	r3, #24
 8007666:	d82c      	bhi.n	80076c2 <__gethex+0x156>
 8007668:	f1a0 0210 	sub.w	r2, r0, #16
 800766c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007670:	f7ff ff66 	bl	8007540 <__hexdig_fun>
 8007674:	1e43      	subs	r3, r0, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b18      	cmp	r3, #24
 800767a:	d91d      	bls.n	80076b8 <__gethex+0x14c>
 800767c:	f1b9 0f00 	cmp.w	r9, #0
 8007680:	d000      	beq.n	8007684 <__gethex+0x118>
 8007682:	4252      	negs	r2, r2
 8007684:	4415      	add	r5, r2
 8007686:	f8cb 1000 	str.w	r1, [fp]
 800768a:	b1e4      	cbz	r4, 80076c6 <__gethex+0x15a>
 800768c:	9b00      	ldr	r3, [sp, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2700      	movne	r7, #0
 8007694:	2706      	moveq	r7, #6
 8007696:	4638      	mov	r0, r7
 8007698:	b009      	add	sp, #36	; 0x24
 800769a:	ecbd 8b02 	vpop	{d8}
 800769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a2:	463e      	mov	r6, r7
 80076a4:	4625      	mov	r5, r4
 80076a6:	2401      	movs	r4, #1
 80076a8:	e7ca      	b.n	8007640 <__gethex+0xd4>
 80076aa:	f04f 0900 	mov.w	r9, #0
 80076ae:	1cb1      	adds	r1, r6, #2
 80076b0:	e7d3      	b.n	800765a <__gethex+0xee>
 80076b2:	f04f 0901 	mov.w	r9, #1
 80076b6:	e7fa      	b.n	80076ae <__gethex+0x142>
 80076b8:	230a      	movs	r3, #10
 80076ba:	fb03 0202 	mla	r2, r3, r2, r0
 80076be:	3a10      	subs	r2, #16
 80076c0:	e7d4      	b.n	800766c <__gethex+0x100>
 80076c2:	4631      	mov	r1, r6
 80076c4:	e7df      	b.n	8007686 <__gethex+0x11a>
 80076c6:	1bf3      	subs	r3, r6, r7
 80076c8:	3b01      	subs	r3, #1
 80076ca:	4621      	mov	r1, r4
 80076cc:	2b07      	cmp	r3, #7
 80076ce:	dc0b      	bgt.n	80076e8 <__gethex+0x17c>
 80076d0:	ee18 0a10 	vmov	r0, s16
 80076d4:	f000 fa7e 	bl	8007bd4 <_Balloc>
 80076d8:	4604      	mov	r4, r0
 80076da:	b940      	cbnz	r0, 80076ee <__gethex+0x182>
 80076dc:	4b5d      	ldr	r3, [pc, #372]	; (8007854 <__gethex+0x2e8>)
 80076de:	4602      	mov	r2, r0
 80076e0:	21de      	movs	r1, #222	; 0xde
 80076e2:	485d      	ldr	r0, [pc, #372]	; (8007858 <__gethex+0x2ec>)
 80076e4:	f001 f9c6 	bl	8008a74 <__assert_func>
 80076e8:	3101      	adds	r1, #1
 80076ea:	105b      	asrs	r3, r3, #1
 80076ec:	e7ee      	b.n	80076cc <__gethex+0x160>
 80076ee:	f100 0914 	add.w	r9, r0, #20
 80076f2:	f04f 0b00 	mov.w	fp, #0
 80076f6:	f1ca 0301 	rsb	r3, sl, #1
 80076fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80076fe:	f8cd b000 	str.w	fp, [sp]
 8007702:	9306      	str	r3, [sp, #24]
 8007704:	42b7      	cmp	r7, r6
 8007706:	d340      	bcc.n	800778a <__gethex+0x21e>
 8007708:	9802      	ldr	r0, [sp, #8]
 800770a:	9b00      	ldr	r3, [sp, #0]
 800770c:	f840 3b04 	str.w	r3, [r0], #4
 8007710:	eba0 0009 	sub.w	r0, r0, r9
 8007714:	1080      	asrs	r0, r0, #2
 8007716:	0146      	lsls	r6, r0, #5
 8007718:	6120      	str	r0, [r4, #16]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fb4c 	bl	8007db8 <__hi0bits>
 8007720:	1a30      	subs	r0, r6, r0
 8007722:	f8d8 6000 	ldr.w	r6, [r8]
 8007726:	42b0      	cmp	r0, r6
 8007728:	dd63      	ble.n	80077f2 <__gethex+0x286>
 800772a:	1b87      	subs	r7, r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fef0 	bl	8008514 <__any_on>
 8007734:	4682      	mov	sl, r0
 8007736:	b1a8      	cbz	r0, 8007764 <__gethex+0x1f8>
 8007738:	1e7b      	subs	r3, r7, #1
 800773a:	1159      	asrs	r1, r3, #5
 800773c:	f003 021f 	and.w	r2, r3, #31
 8007740:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007744:	f04f 0a01 	mov.w	sl, #1
 8007748:	fa0a f202 	lsl.w	r2, sl, r2
 800774c:	420a      	tst	r2, r1
 800774e:	d009      	beq.n	8007764 <__gethex+0x1f8>
 8007750:	4553      	cmp	r3, sl
 8007752:	dd05      	ble.n	8007760 <__gethex+0x1f4>
 8007754:	1eb9      	subs	r1, r7, #2
 8007756:	4620      	mov	r0, r4
 8007758:	f000 fedc 	bl	8008514 <__any_on>
 800775c:	2800      	cmp	r0, #0
 800775e:	d145      	bne.n	80077ec <__gethex+0x280>
 8007760:	f04f 0a02 	mov.w	sl, #2
 8007764:	4639      	mov	r1, r7
 8007766:	4620      	mov	r0, r4
 8007768:	f7ff fe98 	bl	800749c <rshift>
 800776c:	443d      	add	r5, r7
 800776e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007772:	42ab      	cmp	r3, r5
 8007774:	da4c      	bge.n	8007810 <__gethex+0x2a4>
 8007776:	ee18 0a10 	vmov	r0, s16
 800777a:	4621      	mov	r1, r4
 800777c:	f000 fa6a 	bl	8007c54 <_Bfree>
 8007780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007782:	2300      	movs	r3, #0
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	27a3      	movs	r7, #163	; 0xa3
 8007788:	e785      	b.n	8007696 <__gethex+0x12a>
 800778a:	1e73      	subs	r3, r6, #1
 800778c:	9a05      	ldr	r2, [sp, #20]
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007794:	4293      	cmp	r3, r2
 8007796:	d019      	beq.n	80077cc <__gethex+0x260>
 8007798:	f1bb 0f20 	cmp.w	fp, #32
 800779c:	d107      	bne.n	80077ae <__gethex+0x242>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	9a00      	ldr	r2, [sp, #0]
 80077a2:	f843 2b04 	str.w	r2, [r3], #4
 80077a6:	9302      	str	r3, [sp, #8]
 80077a8:	2300      	movs	r3, #0
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	469b      	mov	fp, r3
 80077ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077b2:	f7ff fec5 	bl	8007540 <__hexdig_fun>
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	f000 000f 	and.w	r0, r0, #15
 80077bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80077c0:	4303      	orrs	r3, r0
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	f10b 0b04 	add.w	fp, fp, #4
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	e00d      	b.n	80077e8 <__gethex+0x27c>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	9a06      	ldr	r2, [sp, #24]
 80077d0:	4413      	add	r3, r2
 80077d2:	42bb      	cmp	r3, r7
 80077d4:	d3e0      	bcc.n	8007798 <__gethex+0x22c>
 80077d6:	4618      	mov	r0, r3
 80077d8:	9901      	ldr	r1, [sp, #4]
 80077da:	9307      	str	r3, [sp, #28]
 80077dc:	4652      	mov	r2, sl
 80077de:	f001 f927 	bl	8008a30 <strncmp>
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d1d7      	bne.n	8007798 <__gethex+0x22c>
 80077e8:	461e      	mov	r6, r3
 80077ea:	e78b      	b.n	8007704 <__gethex+0x198>
 80077ec:	f04f 0a03 	mov.w	sl, #3
 80077f0:	e7b8      	b.n	8007764 <__gethex+0x1f8>
 80077f2:	da0a      	bge.n	800780a <__gethex+0x29e>
 80077f4:	1a37      	subs	r7, r6, r0
 80077f6:	4621      	mov	r1, r4
 80077f8:	ee18 0a10 	vmov	r0, s16
 80077fc:	463a      	mov	r2, r7
 80077fe:	f000 fc45 	bl	800808c <__lshift>
 8007802:	1bed      	subs	r5, r5, r7
 8007804:	4604      	mov	r4, r0
 8007806:	f100 0914 	add.w	r9, r0, #20
 800780a:	f04f 0a00 	mov.w	sl, #0
 800780e:	e7ae      	b.n	800776e <__gethex+0x202>
 8007810:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007814:	42a8      	cmp	r0, r5
 8007816:	dd72      	ble.n	80078fe <__gethex+0x392>
 8007818:	1b45      	subs	r5, r0, r5
 800781a:	42ae      	cmp	r6, r5
 800781c:	dc36      	bgt.n	800788c <__gethex+0x320>
 800781e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d02a      	beq.n	800787c <__gethex+0x310>
 8007826:	2b03      	cmp	r3, #3
 8007828:	d02c      	beq.n	8007884 <__gethex+0x318>
 800782a:	2b01      	cmp	r3, #1
 800782c:	d11c      	bne.n	8007868 <__gethex+0x2fc>
 800782e:	42ae      	cmp	r6, r5
 8007830:	d11a      	bne.n	8007868 <__gethex+0x2fc>
 8007832:	2e01      	cmp	r6, #1
 8007834:	d112      	bne.n	800785c <__gethex+0x2f0>
 8007836:	9a04      	ldr	r2, [sp, #16]
 8007838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	2301      	movs	r3, #1
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	f8c9 3000 	str.w	r3, [r9]
 8007846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007848:	2762      	movs	r7, #98	; 0x62
 800784a:	601c      	str	r4, [r3, #0]
 800784c:	e723      	b.n	8007696 <__gethex+0x12a>
 800784e:	bf00      	nop
 8007850:	08009998 	.word	0x08009998
 8007854:	08009920 	.word	0x08009920
 8007858:	08009931 	.word	0x08009931
 800785c:	1e71      	subs	r1, r6, #1
 800785e:	4620      	mov	r0, r4
 8007860:	f000 fe58 	bl	8008514 <__any_on>
 8007864:	2800      	cmp	r0, #0
 8007866:	d1e6      	bne.n	8007836 <__gethex+0x2ca>
 8007868:	ee18 0a10 	vmov	r0, s16
 800786c:	4621      	mov	r1, r4
 800786e:	f000 f9f1 	bl	8007c54 <_Bfree>
 8007872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007874:	2300      	movs	r3, #0
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	2750      	movs	r7, #80	; 0x50
 800787a:	e70c      	b.n	8007696 <__gethex+0x12a>
 800787c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f2      	bne.n	8007868 <__gethex+0x2fc>
 8007882:	e7d8      	b.n	8007836 <__gethex+0x2ca>
 8007884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1d5      	bne.n	8007836 <__gethex+0x2ca>
 800788a:	e7ed      	b.n	8007868 <__gethex+0x2fc>
 800788c:	1e6f      	subs	r7, r5, #1
 800788e:	f1ba 0f00 	cmp.w	sl, #0
 8007892:	d131      	bne.n	80078f8 <__gethex+0x38c>
 8007894:	b127      	cbz	r7, 80078a0 <__gethex+0x334>
 8007896:	4639      	mov	r1, r7
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fe3b 	bl	8008514 <__any_on>
 800789e:	4682      	mov	sl, r0
 80078a0:	117b      	asrs	r3, r7, #5
 80078a2:	2101      	movs	r1, #1
 80078a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80078a8:	f007 071f 	and.w	r7, r7, #31
 80078ac:	fa01 f707 	lsl.w	r7, r1, r7
 80078b0:	421f      	tst	r7, r3
 80078b2:	4629      	mov	r1, r5
 80078b4:	4620      	mov	r0, r4
 80078b6:	bf18      	it	ne
 80078b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80078bc:	1b76      	subs	r6, r6, r5
 80078be:	f7ff fded 	bl	800749c <rshift>
 80078c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80078c6:	2702      	movs	r7, #2
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	d048      	beq.n	8007960 <__gethex+0x3f4>
 80078ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d015      	beq.n	8007902 <__gethex+0x396>
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d017      	beq.n	800790a <__gethex+0x39e>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d109      	bne.n	80078f2 <__gethex+0x386>
 80078de:	f01a 0f02 	tst.w	sl, #2
 80078e2:	d006      	beq.n	80078f2 <__gethex+0x386>
 80078e4:	f8d9 0000 	ldr.w	r0, [r9]
 80078e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80078ec:	f01a 0f01 	tst.w	sl, #1
 80078f0:	d10e      	bne.n	8007910 <__gethex+0x3a4>
 80078f2:	f047 0710 	orr.w	r7, r7, #16
 80078f6:	e033      	b.n	8007960 <__gethex+0x3f4>
 80078f8:	f04f 0a01 	mov.w	sl, #1
 80078fc:	e7d0      	b.n	80078a0 <__gethex+0x334>
 80078fe:	2701      	movs	r7, #1
 8007900:	e7e2      	b.n	80078c8 <__gethex+0x35c>
 8007902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007904:	f1c3 0301 	rsb	r3, r3, #1
 8007908:	9315      	str	r3, [sp, #84]	; 0x54
 800790a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0f0      	beq.n	80078f2 <__gethex+0x386>
 8007910:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007914:	f104 0314 	add.w	r3, r4, #20
 8007918:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800791c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007920:	f04f 0c00 	mov.w	ip, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f853 2b04 	ldr.w	r2, [r3], #4
 800792a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800792e:	d01c      	beq.n	800796a <__gethex+0x3fe>
 8007930:	3201      	adds	r2, #1
 8007932:	6002      	str	r2, [r0, #0]
 8007934:	2f02      	cmp	r7, #2
 8007936:	f104 0314 	add.w	r3, r4, #20
 800793a:	d13f      	bne.n	80079bc <__gethex+0x450>
 800793c:	f8d8 2000 	ldr.w	r2, [r8]
 8007940:	3a01      	subs	r2, #1
 8007942:	42b2      	cmp	r2, r6
 8007944:	d10a      	bne.n	800795c <__gethex+0x3f0>
 8007946:	1171      	asrs	r1, r6, #5
 8007948:	2201      	movs	r2, #1
 800794a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800794e:	f006 061f 	and.w	r6, r6, #31
 8007952:	fa02 f606 	lsl.w	r6, r2, r6
 8007956:	421e      	tst	r6, r3
 8007958:	bf18      	it	ne
 800795a:	4617      	movne	r7, r2
 800795c:	f047 0720 	orr.w	r7, r7, #32
 8007960:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007962:	601c      	str	r4, [r3, #0]
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	601d      	str	r5, [r3, #0]
 8007968:	e695      	b.n	8007696 <__gethex+0x12a>
 800796a:	4299      	cmp	r1, r3
 800796c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007970:	d8d8      	bhi.n	8007924 <__gethex+0x3b8>
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	459b      	cmp	fp, r3
 8007976:	db19      	blt.n	80079ac <__gethex+0x440>
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	ee18 0a10 	vmov	r0, s16
 800797e:	3101      	adds	r1, #1
 8007980:	f000 f928 	bl	8007bd4 <_Balloc>
 8007984:	4681      	mov	r9, r0
 8007986:	b918      	cbnz	r0, 8007990 <__gethex+0x424>
 8007988:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <__gethex+0x488>)
 800798a:	4602      	mov	r2, r0
 800798c:	2184      	movs	r1, #132	; 0x84
 800798e:	e6a8      	b.n	80076e2 <__gethex+0x176>
 8007990:	6922      	ldr	r2, [r4, #16]
 8007992:	3202      	adds	r2, #2
 8007994:	f104 010c 	add.w	r1, r4, #12
 8007998:	0092      	lsls	r2, r2, #2
 800799a:	300c      	adds	r0, #12
 800799c:	f000 f90c 	bl	8007bb8 <memcpy>
 80079a0:	4621      	mov	r1, r4
 80079a2:	ee18 0a10 	vmov	r0, s16
 80079a6:	f000 f955 	bl	8007c54 <_Bfree>
 80079aa:	464c      	mov	r4, r9
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079b4:	6122      	str	r2, [r4, #16]
 80079b6:	2201      	movs	r2, #1
 80079b8:	615a      	str	r2, [r3, #20]
 80079ba:	e7bb      	b.n	8007934 <__gethex+0x3c8>
 80079bc:	6922      	ldr	r2, [r4, #16]
 80079be:	455a      	cmp	r2, fp
 80079c0:	dd0b      	ble.n	80079da <__gethex+0x46e>
 80079c2:	2101      	movs	r1, #1
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7ff fd69 	bl	800749c <rshift>
 80079ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ce:	3501      	adds	r5, #1
 80079d0:	42ab      	cmp	r3, r5
 80079d2:	f6ff aed0 	blt.w	8007776 <__gethex+0x20a>
 80079d6:	2701      	movs	r7, #1
 80079d8:	e7c0      	b.n	800795c <__gethex+0x3f0>
 80079da:	f016 061f 	ands.w	r6, r6, #31
 80079de:	d0fa      	beq.n	80079d6 <__gethex+0x46a>
 80079e0:	4453      	add	r3, sl
 80079e2:	f1c6 0620 	rsb	r6, r6, #32
 80079e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80079ea:	f000 f9e5 	bl	8007db8 <__hi0bits>
 80079ee:	42b0      	cmp	r0, r6
 80079f0:	dbe7      	blt.n	80079c2 <__gethex+0x456>
 80079f2:	e7f0      	b.n	80079d6 <__gethex+0x46a>
 80079f4:	08009920 	.word	0x08009920

080079f8 <L_shift>:
 80079f8:	f1c2 0208 	rsb	r2, r2, #8
 80079fc:	0092      	lsls	r2, r2, #2
 80079fe:	b570      	push	{r4, r5, r6, lr}
 8007a00:	f1c2 0620 	rsb	r6, r2, #32
 8007a04:	6843      	ldr	r3, [r0, #4]
 8007a06:	6804      	ldr	r4, [r0, #0]
 8007a08:	fa03 f506 	lsl.w	r5, r3, r6
 8007a0c:	432c      	orrs	r4, r5
 8007a0e:	40d3      	lsrs	r3, r2
 8007a10:	6004      	str	r4, [r0, #0]
 8007a12:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a16:	4288      	cmp	r0, r1
 8007a18:	d3f4      	bcc.n	8007a04 <L_shift+0xc>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}

08007a1c <__match>:
 8007a1c:	b530      	push	{r4, r5, lr}
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	b914      	cbnz	r4, 8007a2e <__match+0x12>
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	bd30      	pop	{r4, r5, pc}
 8007a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a36:	2d19      	cmp	r5, #25
 8007a38:	bf98      	it	ls
 8007a3a:	3220      	addls	r2, #32
 8007a3c:	42a2      	cmp	r2, r4
 8007a3e:	d0f0      	beq.n	8007a22 <__match+0x6>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7f3      	b.n	8007a2c <__match+0x10>

08007a44 <__hexnan>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	680b      	ldr	r3, [r1, #0]
 8007a4a:	115e      	asrs	r6, r3, #5
 8007a4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a50:	f013 031f 	ands.w	r3, r3, #31
 8007a54:	b087      	sub	sp, #28
 8007a56:	bf18      	it	ne
 8007a58:	3604      	addne	r6, #4
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	1f37      	subs	r7, r6, #4
 8007a5e:	4690      	mov	r8, r2
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	4682      	mov	sl, r0
 8007a66:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a6a:	46b9      	mov	r9, r7
 8007a6c:	463c      	mov	r4, r7
 8007a6e:	9502      	str	r5, [sp, #8]
 8007a70:	46ab      	mov	fp, r5
 8007a72:	7851      	ldrb	r1, [r2, #1]
 8007a74:	1c53      	adds	r3, r2, #1
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	b341      	cbz	r1, 8007acc <__hexnan+0x88>
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	9205      	str	r2, [sp, #20]
 8007a7e:	9104      	str	r1, [sp, #16]
 8007a80:	f7ff fd5e 	bl	8007540 <__hexdig_fun>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d14f      	bne.n	8007b28 <__hexnan+0xe4>
 8007a88:	9904      	ldr	r1, [sp, #16]
 8007a8a:	9a05      	ldr	r2, [sp, #20]
 8007a8c:	2920      	cmp	r1, #32
 8007a8e:	d818      	bhi.n	8007ac2 <__hexnan+0x7e>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	459b      	cmp	fp, r3
 8007a94:	dd13      	ble.n	8007abe <__hexnan+0x7a>
 8007a96:	454c      	cmp	r4, r9
 8007a98:	d206      	bcs.n	8007aa8 <__hexnan+0x64>
 8007a9a:	2d07      	cmp	r5, #7
 8007a9c:	dc04      	bgt.n	8007aa8 <__hexnan+0x64>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7ff ffa8 	bl	80079f8 <L_shift>
 8007aa8:	4544      	cmp	r4, r8
 8007aaa:	d950      	bls.n	8007b4e <__hexnan+0x10a>
 8007aac:	2300      	movs	r3, #0
 8007aae:	f1a4 0904 	sub.w	r9, r4, #4
 8007ab2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ab6:	f8cd b008 	str.w	fp, [sp, #8]
 8007aba:	464c      	mov	r4, r9
 8007abc:	461d      	mov	r5, r3
 8007abe:	9a03      	ldr	r2, [sp, #12]
 8007ac0:	e7d7      	b.n	8007a72 <__hexnan+0x2e>
 8007ac2:	2929      	cmp	r1, #41	; 0x29
 8007ac4:	d156      	bne.n	8007b74 <__hexnan+0x130>
 8007ac6:	3202      	adds	r2, #2
 8007ac8:	f8ca 2000 	str.w	r2, [sl]
 8007acc:	f1bb 0f00 	cmp.w	fp, #0
 8007ad0:	d050      	beq.n	8007b74 <__hexnan+0x130>
 8007ad2:	454c      	cmp	r4, r9
 8007ad4:	d206      	bcs.n	8007ae4 <__hexnan+0xa0>
 8007ad6:	2d07      	cmp	r5, #7
 8007ad8:	dc04      	bgt.n	8007ae4 <__hexnan+0xa0>
 8007ada:	462a      	mov	r2, r5
 8007adc:	4649      	mov	r1, r9
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ff8a 	bl	80079f8 <L_shift>
 8007ae4:	4544      	cmp	r4, r8
 8007ae6:	d934      	bls.n	8007b52 <__hexnan+0x10e>
 8007ae8:	f1a8 0204 	sub.w	r2, r8, #4
 8007aec:	4623      	mov	r3, r4
 8007aee:	f853 1b04 	ldr.w	r1, [r3], #4
 8007af2:	f842 1f04 	str.w	r1, [r2, #4]!
 8007af6:	429f      	cmp	r7, r3
 8007af8:	d2f9      	bcs.n	8007aee <__hexnan+0xaa>
 8007afa:	1b3b      	subs	r3, r7, r4
 8007afc:	f023 0303 	bic.w	r3, r3, #3
 8007b00:	3304      	adds	r3, #4
 8007b02:	3401      	adds	r4, #1
 8007b04:	3e03      	subs	r6, #3
 8007b06:	42b4      	cmp	r4, r6
 8007b08:	bf88      	it	hi
 8007b0a:	2304      	movhi	r3, #4
 8007b0c:	4443      	add	r3, r8
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f843 2b04 	str.w	r2, [r3], #4
 8007b14:	429f      	cmp	r7, r3
 8007b16:	d2fb      	bcs.n	8007b10 <__hexnan+0xcc>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	b91b      	cbnz	r3, 8007b24 <__hexnan+0xe0>
 8007b1c:	4547      	cmp	r7, r8
 8007b1e:	d127      	bne.n	8007b70 <__hexnan+0x12c>
 8007b20:	2301      	movs	r3, #1
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	2005      	movs	r0, #5
 8007b26:	e026      	b.n	8007b76 <__hexnan+0x132>
 8007b28:	3501      	adds	r5, #1
 8007b2a:	2d08      	cmp	r5, #8
 8007b2c:	f10b 0b01 	add.w	fp, fp, #1
 8007b30:	dd06      	ble.n	8007b40 <__hexnan+0xfc>
 8007b32:	4544      	cmp	r4, r8
 8007b34:	d9c3      	bls.n	8007abe <__hexnan+0x7a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b3c:	2501      	movs	r5, #1
 8007b3e:	3c04      	subs	r4, #4
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	f000 000f 	and.w	r0, r0, #15
 8007b46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	e7b7      	b.n	8007abe <__hexnan+0x7a>
 8007b4e:	2508      	movs	r5, #8
 8007b50:	e7b5      	b.n	8007abe <__hexnan+0x7a>
 8007b52:	9b01      	ldr	r3, [sp, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0df      	beq.n	8007b18 <__hexnan+0xd4>
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	f1c3 0320 	rsb	r3, r3, #32
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
 8007b64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b68:	401a      	ands	r2, r3
 8007b6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b6e:	e7d3      	b.n	8007b18 <__hexnan+0xd4>
 8007b70:	3f04      	subs	r7, #4
 8007b72:	e7d1      	b.n	8007b18 <__hexnan+0xd4>
 8007b74:	2004      	movs	r0, #4
 8007b76:	b007      	add	sp, #28
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b7c <_localeconv_r>:
 8007b7c:	4800      	ldr	r0, [pc, #0]	; (8007b80 <_localeconv_r+0x4>)
 8007b7e:	4770      	bx	lr
 8007b80:	20000164 	.word	0x20000164

08007b84 <malloc>:
 8007b84:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <malloc+0xc>)
 8007b86:	4601      	mov	r1, r0
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	f000 bd67 	b.w	800865c <_malloc_r>
 8007b8e:	bf00      	nop
 8007b90:	2000000c 	.word	0x2000000c

08007b94 <__ascii_mbtowc>:
 8007b94:	b082      	sub	sp, #8
 8007b96:	b901      	cbnz	r1, 8007b9a <__ascii_mbtowc+0x6>
 8007b98:	a901      	add	r1, sp, #4
 8007b9a:	b142      	cbz	r2, 8007bae <__ascii_mbtowc+0x1a>
 8007b9c:	b14b      	cbz	r3, 8007bb2 <__ascii_mbtowc+0x1e>
 8007b9e:	7813      	ldrb	r3, [r2, #0]
 8007ba0:	600b      	str	r3, [r1, #0]
 8007ba2:	7812      	ldrb	r2, [r2, #0]
 8007ba4:	1e10      	subs	r0, r2, #0
 8007ba6:	bf18      	it	ne
 8007ba8:	2001      	movne	r0, #1
 8007baa:	b002      	add	sp, #8
 8007bac:	4770      	bx	lr
 8007bae:	4610      	mov	r0, r2
 8007bb0:	e7fb      	b.n	8007baa <__ascii_mbtowc+0x16>
 8007bb2:	f06f 0001 	mvn.w	r0, #1
 8007bb6:	e7f8      	b.n	8007baa <__ascii_mbtowc+0x16>

08007bb8 <memcpy>:
 8007bb8:	440a      	add	r2, r1
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bc0:	d100      	bne.n	8007bc4 <memcpy+0xc>
 8007bc2:	4770      	bx	lr
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bce:	4291      	cmp	r1, r2
 8007bd0:	d1f9      	bne.n	8007bc6 <memcpy+0xe>
 8007bd2:	bd10      	pop	{r4, pc}

08007bd4 <_Balloc>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	b976      	cbnz	r6, 8007bfc <_Balloc+0x28>
 8007bde:	2010      	movs	r0, #16
 8007be0:	f7ff ffd0 	bl	8007b84 <malloc>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6260      	str	r0, [r4, #36]	; 0x24
 8007be8:	b920      	cbnz	r0, 8007bf4 <_Balloc+0x20>
 8007bea:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <_Balloc+0x78>)
 8007bec:	4818      	ldr	r0, [pc, #96]	; (8007c50 <_Balloc+0x7c>)
 8007bee:	2166      	movs	r1, #102	; 0x66
 8007bf0:	f000 ff40 	bl	8008a74 <__assert_func>
 8007bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf8:	6006      	str	r6, [r0, #0]
 8007bfa:	60c6      	str	r6, [r0, #12]
 8007bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bfe:	68f3      	ldr	r3, [r6, #12]
 8007c00:	b183      	cbz	r3, 8007c24 <_Balloc+0x50>
 8007c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c0a:	b9b8      	cbnz	r0, 8007c3c <_Balloc+0x68>
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c12:	1d72      	adds	r2, r6, #5
 8007c14:	0092      	lsls	r2, r2, #2
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fc9d 	bl	8008556 <_calloc_r>
 8007c1c:	b160      	cbz	r0, 8007c38 <_Balloc+0x64>
 8007c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c22:	e00e      	b.n	8007c42 <_Balloc+0x6e>
 8007c24:	2221      	movs	r2, #33	; 0x21
 8007c26:	2104      	movs	r1, #4
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fc94 	bl	8008556 <_calloc_r>
 8007c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c30:	60f0      	str	r0, [r6, #12]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e4      	bne.n	8007c02 <_Balloc+0x2e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	6802      	ldr	r2, [r0, #0]
 8007c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c42:	2300      	movs	r3, #0
 8007c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c48:	e7f7      	b.n	8007c3a <_Balloc+0x66>
 8007c4a:	bf00      	nop
 8007c4c:	080098ae 	.word	0x080098ae
 8007c50:	080099ac 	.word	0x080099ac

08007c54 <_Bfree>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c58:	4605      	mov	r5, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	b976      	cbnz	r6, 8007c7c <_Bfree+0x28>
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff ff90 	bl	8007b84 <malloc>
 8007c64:	4602      	mov	r2, r0
 8007c66:	6268      	str	r0, [r5, #36]	; 0x24
 8007c68:	b920      	cbnz	r0, 8007c74 <_Bfree+0x20>
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <_Bfree+0x3c>)
 8007c6c:	4809      	ldr	r0, [pc, #36]	; (8007c94 <_Bfree+0x40>)
 8007c6e:	218a      	movs	r1, #138	; 0x8a
 8007c70:	f000 ff00 	bl	8008a74 <__assert_func>
 8007c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c78:	6006      	str	r6, [r0, #0]
 8007c7a:	60c6      	str	r6, [r0, #12]
 8007c7c:	b13c      	cbz	r4, 8007c8e <_Bfree+0x3a>
 8007c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c80:	6862      	ldr	r2, [r4, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c88:	6021      	str	r1, [r4, #0]
 8007c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	080098ae 	.word	0x080098ae
 8007c94:	080099ac 	.word	0x080099ac

08007c98 <__multadd>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	690d      	ldr	r5, [r1, #16]
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	461e      	mov	r6, r3
 8007ca4:	f101 0c14 	add.w	ip, r1, #20
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f8dc 3000 	ldr.w	r3, [ip]
 8007cae:	b299      	uxth	r1, r3
 8007cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8007cb4:	0c1e      	lsrs	r6, r3, #16
 8007cb6:	0c0b      	lsrs	r3, r1, #16
 8007cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8007cbc:	b289      	uxth	r1, r1
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cc4:	4285      	cmp	r5, r0
 8007cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cce:	dcec      	bgt.n	8007caa <__multadd+0x12>
 8007cd0:	b30e      	cbz	r6, 8007d16 <__multadd+0x7e>
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	42ab      	cmp	r3, r5
 8007cd6:	dc19      	bgt.n	8007d0c <__multadd+0x74>
 8007cd8:	6861      	ldr	r1, [r4, #4]
 8007cda:	4638      	mov	r0, r7
 8007cdc:	3101      	adds	r1, #1
 8007cde:	f7ff ff79 	bl	8007bd4 <_Balloc>
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	b928      	cbnz	r0, 8007cf2 <__multadd+0x5a>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <__multadd+0x84>)
 8007cea:	480d      	ldr	r0, [pc, #52]	; (8007d20 <__multadd+0x88>)
 8007cec:	21b5      	movs	r1, #181	; 0xb5
 8007cee:	f000 fec1 	bl	8008a74 <__assert_func>
 8007cf2:	6922      	ldr	r2, [r4, #16]
 8007cf4:	3202      	adds	r2, #2
 8007cf6:	f104 010c 	add.w	r1, r4, #12
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	300c      	adds	r0, #12
 8007cfe:	f7ff ff5b 	bl	8007bb8 <memcpy>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ffa5 	bl	8007c54 <_Bfree>
 8007d0a:	4644      	mov	r4, r8
 8007d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d10:	3501      	adds	r5, #1
 8007d12:	615e      	str	r6, [r3, #20]
 8007d14:	6125      	str	r5, [r4, #16]
 8007d16:	4620      	mov	r0, r4
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	08009920 	.word	0x08009920
 8007d20:	080099ac 	.word	0x080099ac

08007d24 <__s2b>:
 8007d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d28:	460c      	mov	r4, r1
 8007d2a:	4615      	mov	r5, r2
 8007d2c:	461f      	mov	r7, r3
 8007d2e:	2209      	movs	r2, #9
 8007d30:	3308      	adds	r3, #8
 8007d32:	4606      	mov	r6, r0
 8007d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d38:	2100      	movs	r1, #0
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	db09      	blt.n	8007d54 <__s2b+0x30>
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff ff47 	bl	8007bd4 <_Balloc>
 8007d46:	b940      	cbnz	r0, 8007d5a <__s2b+0x36>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4b19      	ldr	r3, [pc, #100]	; (8007db0 <__s2b+0x8c>)
 8007d4c:	4819      	ldr	r0, [pc, #100]	; (8007db4 <__s2b+0x90>)
 8007d4e:	21ce      	movs	r1, #206	; 0xce
 8007d50:	f000 fe90 	bl	8008a74 <__assert_func>
 8007d54:	0052      	lsls	r2, r2, #1
 8007d56:	3101      	adds	r1, #1
 8007d58:	e7f0      	b.n	8007d3c <__s2b+0x18>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	6143      	str	r3, [r0, #20]
 8007d5e:	2d09      	cmp	r5, #9
 8007d60:	f04f 0301 	mov.w	r3, #1
 8007d64:	6103      	str	r3, [r0, #16]
 8007d66:	dd16      	ble.n	8007d96 <__s2b+0x72>
 8007d68:	f104 0909 	add.w	r9, r4, #9
 8007d6c:	46c8      	mov	r8, r9
 8007d6e:	442c      	add	r4, r5
 8007d70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d74:	4601      	mov	r1, r0
 8007d76:	3b30      	subs	r3, #48	; 0x30
 8007d78:	220a      	movs	r2, #10
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ff8c 	bl	8007c98 <__multadd>
 8007d80:	45a0      	cmp	r8, r4
 8007d82:	d1f5      	bne.n	8007d70 <__s2b+0x4c>
 8007d84:	f1a5 0408 	sub.w	r4, r5, #8
 8007d88:	444c      	add	r4, r9
 8007d8a:	1b2d      	subs	r5, r5, r4
 8007d8c:	1963      	adds	r3, r4, r5
 8007d8e:	42bb      	cmp	r3, r7
 8007d90:	db04      	blt.n	8007d9c <__s2b+0x78>
 8007d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d96:	340a      	adds	r4, #10
 8007d98:	2509      	movs	r5, #9
 8007d9a:	e7f6      	b.n	8007d8a <__s2b+0x66>
 8007d9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007da0:	4601      	mov	r1, r0
 8007da2:	3b30      	subs	r3, #48	; 0x30
 8007da4:	220a      	movs	r2, #10
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7ff ff76 	bl	8007c98 <__multadd>
 8007dac:	e7ee      	b.n	8007d8c <__s2b+0x68>
 8007dae:	bf00      	nop
 8007db0:	08009920 	.word	0x08009920
 8007db4:	080099ac 	.word	0x080099ac

08007db8 <__hi0bits>:
 8007db8:	0c03      	lsrs	r3, r0, #16
 8007dba:	041b      	lsls	r3, r3, #16
 8007dbc:	b9d3      	cbnz	r3, 8007df4 <__hi0bits+0x3c>
 8007dbe:	0400      	lsls	r0, r0, #16
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dc6:	bf04      	itt	eq
 8007dc8:	0200      	lsleq	r0, r0, #8
 8007dca:	3308      	addeq	r3, #8
 8007dcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007dd0:	bf04      	itt	eq
 8007dd2:	0100      	lsleq	r0, r0, #4
 8007dd4:	3304      	addeq	r3, #4
 8007dd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007dda:	bf04      	itt	eq
 8007ddc:	0080      	lsleq	r0, r0, #2
 8007dde:	3302      	addeq	r3, #2
 8007de0:	2800      	cmp	r0, #0
 8007de2:	db05      	blt.n	8007df0 <__hi0bits+0x38>
 8007de4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007de8:	f103 0301 	add.w	r3, r3, #1
 8007dec:	bf08      	it	eq
 8007dee:	2320      	moveq	r3, #32
 8007df0:	4618      	mov	r0, r3
 8007df2:	4770      	bx	lr
 8007df4:	2300      	movs	r3, #0
 8007df6:	e7e4      	b.n	8007dc2 <__hi0bits+0xa>

08007df8 <__lo0bits>:
 8007df8:	6803      	ldr	r3, [r0, #0]
 8007dfa:	f013 0207 	ands.w	r2, r3, #7
 8007dfe:	4601      	mov	r1, r0
 8007e00:	d00b      	beq.n	8007e1a <__lo0bits+0x22>
 8007e02:	07da      	lsls	r2, r3, #31
 8007e04:	d423      	bmi.n	8007e4e <__lo0bits+0x56>
 8007e06:	0798      	lsls	r0, r3, #30
 8007e08:	bf49      	itett	mi
 8007e0a:	085b      	lsrmi	r3, r3, #1
 8007e0c:	089b      	lsrpl	r3, r3, #2
 8007e0e:	2001      	movmi	r0, #1
 8007e10:	600b      	strmi	r3, [r1, #0]
 8007e12:	bf5c      	itt	pl
 8007e14:	600b      	strpl	r3, [r1, #0]
 8007e16:	2002      	movpl	r0, #2
 8007e18:	4770      	bx	lr
 8007e1a:	b298      	uxth	r0, r3
 8007e1c:	b9a8      	cbnz	r0, 8007e4a <__lo0bits+0x52>
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	2010      	movs	r0, #16
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	b90a      	cbnz	r2, 8007e2a <__lo0bits+0x32>
 8007e26:	3008      	adds	r0, #8
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	071a      	lsls	r2, r3, #28
 8007e2c:	bf04      	itt	eq
 8007e2e:	091b      	lsreq	r3, r3, #4
 8007e30:	3004      	addeq	r0, #4
 8007e32:	079a      	lsls	r2, r3, #30
 8007e34:	bf04      	itt	eq
 8007e36:	089b      	lsreq	r3, r3, #2
 8007e38:	3002      	addeq	r0, #2
 8007e3a:	07da      	lsls	r2, r3, #31
 8007e3c:	d403      	bmi.n	8007e46 <__lo0bits+0x4e>
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	f100 0001 	add.w	r0, r0, #1
 8007e44:	d005      	beq.n	8007e52 <__lo0bits+0x5a>
 8007e46:	600b      	str	r3, [r1, #0]
 8007e48:	4770      	bx	lr
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	e7e9      	b.n	8007e22 <__lo0bits+0x2a>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	4770      	bx	lr
 8007e52:	2020      	movs	r0, #32
 8007e54:	4770      	bx	lr
	...

08007e58 <__i2b>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	f7ff feb9 	bl	8007bd4 <_Balloc>
 8007e62:	4602      	mov	r2, r0
 8007e64:	b928      	cbnz	r0, 8007e72 <__i2b+0x1a>
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <__i2b+0x24>)
 8007e68:	4805      	ldr	r0, [pc, #20]	; (8007e80 <__i2b+0x28>)
 8007e6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e6e:	f000 fe01 	bl	8008a74 <__assert_func>
 8007e72:	2301      	movs	r3, #1
 8007e74:	6144      	str	r4, [r0, #20]
 8007e76:	6103      	str	r3, [r0, #16]
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08009920 	.word	0x08009920
 8007e80:	080099ac 	.word	0x080099ac

08007e84 <__multiply>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	4691      	mov	r9, r2
 8007e8a:	690a      	ldr	r2, [r1, #16]
 8007e8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	bfb8      	it	lt
 8007e94:	460b      	movlt	r3, r1
 8007e96:	460c      	mov	r4, r1
 8007e98:	bfbc      	itt	lt
 8007e9a:	464c      	movlt	r4, r9
 8007e9c:	4699      	movlt	r9, r3
 8007e9e:	6927      	ldr	r7, [r4, #16]
 8007ea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	6861      	ldr	r1, [r4, #4]
 8007ea8:	eb07 060a 	add.w	r6, r7, sl
 8007eac:	42b3      	cmp	r3, r6
 8007eae:	b085      	sub	sp, #20
 8007eb0:	bfb8      	it	lt
 8007eb2:	3101      	addlt	r1, #1
 8007eb4:	f7ff fe8e 	bl	8007bd4 <_Balloc>
 8007eb8:	b930      	cbnz	r0, 8007ec8 <__multiply+0x44>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	4b44      	ldr	r3, [pc, #272]	; (8007fd0 <__multiply+0x14c>)
 8007ebe:	4845      	ldr	r0, [pc, #276]	; (8007fd4 <__multiply+0x150>)
 8007ec0:	f240 115d 	movw	r1, #349	; 0x15d
 8007ec4:	f000 fdd6 	bl	8008a74 <__assert_func>
 8007ec8:	f100 0514 	add.w	r5, r0, #20
 8007ecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4543      	cmp	r3, r8
 8007ed6:	d321      	bcc.n	8007f1c <__multiply+0x98>
 8007ed8:	f104 0314 	add.w	r3, r4, #20
 8007edc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ee0:	f109 0314 	add.w	r3, r9, #20
 8007ee4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ee8:	9202      	str	r2, [sp, #8]
 8007eea:	1b3a      	subs	r2, r7, r4
 8007eec:	3a15      	subs	r2, #21
 8007eee:	f022 0203 	bic.w	r2, r2, #3
 8007ef2:	3204      	adds	r2, #4
 8007ef4:	f104 0115 	add.w	r1, r4, #21
 8007ef8:	428f      	cmp	r7, r1
 8007efa:	bf38      	it	cc
 8007efc:	2204      	movcc	r2, #4
 8007efe:	9201      	str	r2, [sp, #4]
 8007f00:	9a02      	ldr	r2, [sp, #8]
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d80c      	bhi.n	8007f22 <__multiply+0x9e>
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	dd03      	ble.n	8007f14 <__multiply+0x90>
 8007f0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d05a      	beq.n	8007fca <__multiply+0x146>
 8007f14:	6106      	str	r6, [r0, #16]
 8007f16:	b005      	add	sp, #20
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	f843 2b04 	str.w	r2, [r3], #4
 8007f20:	e7d8      	b.n	8007ed4 <__multiply+0x50>
 8007f22:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f26:	f1ba 0f00 	cmp.w	sl, #0
 8007f2a:	d024      	beq.n	8007f76 <__multiply+0xf2>
 8007f2c:	f104 0e14 	add.w	lr, r4, #20
 8007f30:	46a9      	mov	r9, r5
 8007f32:	f04f 0c00 	mov.w	ip, #0
 8007f36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f3a:	f8d9 1000 	ldr.w	r1, [r9]
 8007f3e:	fa1f fb82 	uxth.w	fp, r2
 8007f42:	b289      	uxth	r1, r1
 8007f44:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f50:	4461      	add	r1, ip
 8007f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f56:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f5e:	b289      	uxth	r1, r1
 8007f60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f64:	4577      	cmp	r7, lr
 8007f66:	f849 1b04 	str.w	r1, [r9], #4
 8007f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f6e:	d8e2      	bhi.n	8007f36 <__multiply+0xb2>
 8007f70:	9a01      	ldr	r2, [sp, #4]
 8007f72:	f845 c002 	str.w	ip, [r5, r2]
 8007f76:	9a03      	ldr	r2, [sp, #12]
 8007f78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	f1b9 0f00 	cmp.w	r9, #0
 8007f82:	d020      	beq.n	8007fc6 <__multiply+0x142>
 8007f84:	6829      	ldr	r1, [r5, #0]
 8007f86:	f104 0c14 	add.w	ip, r4, #20
 8007f8a:	46ae      	mov	lr, r5
 8007f8c:	f04f 0a00 	mov.w	sl, #0
 8007f90:	f8bc b000 	ldrh.w	fp, [ip]
 8007f94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f98:	fb09 220b 	mla	r2, r9, fp, r2
 8007f9c:	4492      	add	sl, r2
 8007f9e:	b289      	uxth	r1, r1
 8007fa0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fa4:	f84e 1b04 	str.w	r1, [lr], #4
 8007fa8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fac:	f8be 1000 	ldrh.w	r1, [lr]
 8007fb0:	0c12      	lsrs	r2, r2, #16
 8007fb2:	fb09 1102 	mla	r1, r9, r2, r1
 8007fb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fba:	4567      	cmp	r7, ip
 8007fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fc0:	d8e6      	bhi.n	8007f90 <__multiply+0x10c>
 8007fc2:	9a01      	ldr	r2, [sp, #4]
 8007fc4:	50a9      	str	r1, [r5, r2]
 8007fc6:	3504      	adds	r5, #4
 8007fc8:	e79a      	b.n	8007f00 <__multiply+0x7c>
 8007fca:	3e01      	subs	r6, #1
 8007fcc:	e79c      	b.n	8007f08 <__multiply+0x84>
 8007fce:	bf00      	nop
 8007fd0:	08009920 	.word	0x08009920
 8007fd4:	080099ac 	.word	0x080099ac

08007fd8 <__pow5mult>:
 8007fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fdc:	4615      	mov	r5, r2
 8007fde:	f012 0203 	ands.w	r2, r2, #3
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	d007      	beq.n	8007ff8 <__pow5mult+0x20>
 8007fe8:	4c25      	ldr	r4, [pc, #148]	; (8008080 <__pow5mult+0xa8>)
 8007fea:	3a01      	subs	r2, #1
 8007fec:	2300      	movs	r3, #0
 8007fee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ff2:	f7ff fe51 	bl	8007c98 <__multadd>
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	10ad      	asrs	r5, r5, #2
 8007ffa:	d03d      	beq.n	8008078 <__pow5mult+0xa0>
 8007ffc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ffe:	b97c      	cbnz	r4, 8008020 <__pow5mult+0x48>
 8008000:	2010      	movs	r0, #16
 8008002:	f7ff fdbf 	bl	8007b84 <malloc>
 8008006:	4602      	mov	r2, r0
 8008008:	6270      	str	r0, [r6, #36]	; 0x24
 800800a:	b928      	cbnz	r0, 8008018 <__pow5mult+0x40>
 800800c:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <__pow5mult+0xac>)
 800800e:	481e      	ldr	r0, [pc, #120]	; (8008088 <__pow5mult+0xb0>)
 8008010:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008014:	f000 fd2e 	bl	8008a74 <__assert_func>
 8008018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800801c:	6004      	str	r4, [r0, #0]
 800801e:	60c4      	str	r4, [r0, #12]
 8008020:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008028:	b94c      	cbnz	r4, 800803e <__pow5mult+0x66>
 800802a:	f240 2171 	movw	r1, #625	; 0x271
 800802e:	4630      	mov	r0, r6
 8008030:	f7ff ff12 	bl	8007e58 <__i2b>
 8008034:	2300      	movs	r3, #0
 8008036:	f8c8 0008 	str.w	r0, [r8, #8]
 800803a:	4604      	mov	r4, r0
 800803c:	6003      	str	r3, [r0, #0]
 800803e:	f04f 0900 	mov.w	r9, #0
 8008042:	07eb      	lsls	r3, r5, #31
 8008044:	d50a      	bpl.n	800805c <__pow5mult+0x84>
 8008046:	4639      	mov	r1, r7
 8008048:	4622      	mov	r2, r4
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ff1a 	bl	8007e84 <__multiply>
 8008050:	4639      	mov	r1, r7
 8008052:	4680      	mov	r8, r0
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff fdfd 	bl	8007c54 <_Bfree>
 800805a:	4647      	mov	r7, r8
 800805c:	106d      	asrs	r5, r5, #1
 800805e:	d00b      	beq.n	8008078 <__pow5mult+0xa0>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	b938      	cbnz	r0, 8008074 <__pow5mult+0x9c>
 8008064:	4622      	mov	r2, r4
 8008066:	4621      	mov	r1, r4
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff ff0b 	bl	8007e84 <__multiply>
 800806e:	6020      	str	r0, [r4, #0]
 8008070:	f8c0 9000 	str.w	r9, [r0]
 8008074:	4604      	mov	r4, r0
 8008076:	e7e4      	b.n	8008042 <__pow5mult+0x6a>
 8008078:	4638      	mov	r0, r7
 800807a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807e:	bf00      	nop
 8008080:	08009af8 	.word	0x08009af8
 8008084:	080098ae 	.word	0x080098ae
 8008088:	080099ac 	.word	0x080099ac

0800808c <__lshift>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	460c      	mov	r4, r1
 8008092:	6849      	ldr	r1, [r1, #4]
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	4607      	mov	r7, r0
 800809e:	4691      	mov	r9, r2
 80080a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080a4:	f108 0601 	add.w	r6, r8, #1
 80080a8:	42b3      	cmp	r3, r6
 80080aa:	db0b      	blt.n	80080c4 <__lshift+0x38>
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7ff fd91 	bl	8007bd4 <_Balloc>
 80080b2:	4605      	mov	r5, r0
 80080b4:	b948      	cbnz	r0, 80080ca <__lshift+0x3e>
 80080b6:	4602      	mov	r2, r0
 80080b8:	4b2a      	ldr	r3, [pc, #168]	; (8008164 <__lshift+0xd8>)
 80080ba:	482b      	ldr	r0, [pc, #172]	; (8008168 <__lshift+0xdc>)
 80080bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080c0:	f000 fcd8 	bl	8008a74 <__assert_func>
 80080c4:	3101      	adds	r1, #1
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	e7ee      	b.n	80080a8 <__lshift+0x1c>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f100 0114 	add.w	r1, r0, #20
 80080d0:	f100 0210 	add.w	r2, r0, #16
 80080d4:	4618      	mov	r0, r3
 80080d6:	4553      	cmp	r3, sl
 80080d8:	db37      	blt.n	800814a <__lshift+0xbe>
 80080da:	6920      	ldr	r0, [r4, #16]
 80080dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080e0:	f104 0314 	add.w	r3, r4, #20
 80080e4:	f019 091f 	ands.w	r9, r9, #31
 80080e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080f0:	d02f      	beq.n	8008152 <__lshift+0xc6>
 80080f2:	f1c9 0e20 	rsb	lr, r9, #32
 80080f6:	468a      	mov	sl, r1
 80080f8:	f04f 0c00 	mov.w	ip, #0
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	fa02 f209 	lsl.w	r2, r2, r9
 8008102:	ea42 020c 	orr.w	r2, r2, ip
 8008106:	f84a 2b04 	str.w	r2, [sl], #4
 800810a:	f853 2b04 	ldr.w	r2, [r3], #4
 800810e:	4298      	cmp	r0, r3
 8008110:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008114:	d8f2      	bhi.n	80080fc <__lshift+0x70>
 8008116:	1b03      	subs	r3, r0, r4
 8008118:	3b15      	subs	r3, #21
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	3304      	adds	r3, #4
 8008120:	f104 0215 	add.w	r2, r4, #21
 8008124:	4290      	cmp	r0, r2
 8008126:	bf38      	it	cc
 8008128:	2304      	movcc	r3, #4
 800812a:	f841 c003 	str.w	ip, [r1, r3]
 800812e:	f1bc 0f00 	cmp.w	ip, #0
 8008132:	d001      	beq.n	8008138 <__lshift+0xac>
 8008134:	f108 0602 	add.w	r6, r8, #2
 8008138:	3e01      	subs	r6, #1
 800813a:	4638      	mov	r0, r7
 800813c:	612e      	str	r6, [r5, #16]
 800813e:	4621      	mov	r1, r4
 8008140:	f7ff fd88 	bl	8007c54 <_Bfree>
 8008144:	4628      	mov	r0, r5
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	f842 0f04 	str.w	r0, [r2, #4]!
 800814e:	3301      	adds	r3, #1
 8008150:	e7c1      	b.n	80080d6 <__lshift+0x4a>
 8008152:	3904      	subs	r1, #4
 8008154:	f853 2b04 	ldr.w	r2, [r3], #4
 8008158:	f841 2f04 	str.w	r2, [r1, #4]!
 800815c:	4298      	cmp	r0, r3
 800815e:	d8f9      	bhi.n	8008154 <__lshift+0xc8>
 8008160:	e7ea      	b.n	8008138 <__lshift+0xac>
 8008162:	bf00      	nop
 8008164:	08009920 	.word	0x08009920
 8008168:	080099ac 	.word	0x080099ac

0800816c <__mcmp>:
 800816c:	b530      	push	{r4, r5, lr}
 800816e:	6902      	ldr	r2, [r0, #16]
 8008170:	690c      	ldr	r4, [r1, #16]
 8008172:	1b12      	subs	r2, r2, r4
 8008174:	d10e      	bne.n	8008194 <__mcmp+0x28>
 8008176:	f100 0314 	add.w	r3, r0, #20
 800817a:	3114      	adds	r1, #20
 800817c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800818c:	42a5      	cmp	r5, r4
 800818e:	d003      	beq.n	8008198 <__mcmp+0x2c>
 8008190:	d305      	bcc.n	800819e <__mcmp+0x32>
 8008192:	2201      	movs	r2, #1
 8008194:	4610      	mov	r0, r2
 8008196:	bd30      	pop	{r4, r5, pc}
 8008198:	4283      	cmp	r3, r0
 800819a:	d3f3      	bcc.n	8008184 <__mcmp+0x18>
 800819c:	e7fa      	b.n	8008194 <__mcmp+0x28>
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	e7f7      	b.n	8008194 <__mcmp+0x28>

080081a4 <__mdiff>:
 80081a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	4606      	mov	r6, r0
 80081ac:	4611      	mov	r1, r2
 80081ae:	4620      	mov	r0, r4
 80081b0:	4690      	mov	r8, r2
 80081b2:	f7ff ffdb 	bl	800816c <__mcmp>
 80081b6:	1e05      	subs	r5, r0, #0
 80081b8:	d110      	bne.n	80081dc <__mdiff+0x38>
 80081ba:	4629      	mov	r1, r5
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff fd09 	bl	8007bd4 <_Balloc>
 80081c2:	b930      	cbnz	r0, 80081d2 <__mdiff+0x2e>
 80081c4:	4b3a      	ldr	r3, [pc, #232]	; (80082b0 <__mdiff+0x10c>)
 80081c6:	4602      	mov	r2, r0
 80081c8:	f240 2132 	movw	r1, #562	; 0x232
 80081cc:	4839      	ldr	r0, [pc, #228]	; (80082b4 <__mdiff+0x110>)
 80081ce:	f000 fc51 	bl	8008a74 <__assert_func>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081dc:	bfa4      	itt	ge
 80081de:	4643      	movge	r3, r8
 80081e0:	46a0      	movge	r8, r4
 80081e2:	4630      	mov	r0, r6
 80081e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081e8:	bfa6      	itte	ge
 80081ea:	461c      	movge	r4, r3
 80081ec:	2500      	movge	r5, #0
 80081ee:	2501      	movlt	r5, #1
 80081f0:	f7ff fcf0 	bl	8007bd4 <_Balloc>
 80081f4:	b920      	cbnz	r0, 8008200 <__mdiff+0x5c>
 80081f6:	4b2e      	ldr	r3, [pc, #184]	; (80082b0 <__mdiff+0x10c>)
 80081f8:	4602      	mov	r2, r0
 80081fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081fe:	e7e5      	b.n	80081cc <__mdiff+0x28>
 8008200:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008204:	6926      	ldr	r6, [r4, #16]
 8008206:	60c5      	str	r5, [r0, #12]
 8008208:	f104 0914 	add.w	r9, r4, #20
 800820c:	f108 0514 	add.w	r5, r8, #20
 8008210:	f100 0e14 	add.w	lr, r0, #20
 8008214:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008218:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800821c:	f108 0210 	add.w	r2, r8, #16
 8008220:	46f2      	mov	sl, lr
 8008222:	2100      	movs	r1, #0
 8008224:	f859 3b04 	ldr.w	r3, [r9], #4
 8008228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800822c:	fa1f f883 	uxth.w	r8, r3
 8008230:	fa11 f18b 	uxtah	r1, r1, fp
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	eba1 0808 	sub.w	r8, r1, r8
 800823a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800823e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008242:	fa1f f888 	uxth.w	r8, r8
 8008246:	1419      	asrs	r1, r3, #16
 8008248:	454e      	cmp	r6, r9
 800824a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800824e:	f84a 3b04 	str.w	r3, [sl], #4
 8008252:	d8e7      	bhi.n	8008224 <__mdiff+0x80>
 8008254:	1b33      	subs	r3, r6, r4
 8008256:	3b15      	subs	r3, #21
 8008258:	f023 0303 	bic.w	r3, r3, #3
 800825c:	3304      	adds	r3, #4
 800825e:	3415      	adds	r4, #21
 8008260:	42a6      	cmp	r6, r4
 8008262:	bf38      	it	cc
 8008264:	2304      	movcc	r3, #4
 8008266:	441d      	add	r5, r3
 8008268:	4473      	add	r3, lr
 800826a:	469e      	mov	lr, r3
 800826c:	462e      	mov	r6, r5
 800826e:	4566      	cmp	r6, ip
 8008270:	d30e      	bcc.n	8008290 <__mdiff+0xec>
 8008272:	f10c 0203 	add.w	r2, ip, #3
 8008276:	1b52      	subs	r2, r2, r5
 8008278:	f022 0203 	bic.w	r2, r2, #3
 800827c:	3d03      	subs	r5, #3
 800827e:	45ac      	cmp	ip, r5
 8008280:	bf38      	it	cc
 8008282:	2200      	movcc	r2, #0
 8008284:	441a      	add	r2, r3
 8008286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800828a:	b17b      	cbz	r3, 80082ac <__mdiff+0x108>
 800828c:	6107      	str	r7, [r0, #16]
 800828e:	e7a3      	b.n	80081d8 <__mdiff+0x34>
 8008290:	f856 8b04 	ldr.w	r8, [r6], #4
 8008294:	fa11 f288 	uxtah	r2, r1, r8
 8008298:	1414      	asrs	r4, r2, #16
 800829a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800829e:	b292      	uxth	r2, r2
 80082a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082a4:	f84e 2b04 	str.w	r2, [lr], #4
 80082a8:	1421      	asrs	r1, r4, #16
 80082aa:	e7e0      	b.n	800826e <__mdiff+0xca>
 80082ac:	3f01      	subs	r7, #1
 80082ae:	e7ea      	b.n	8008286 <__mdiff+0xe2>
 80082b0:	08009920 	.word	0x08009920
 80082b4:	080099ac 	.word	0x080099ac

080082b8 <__ulp>:
 80082b8:	b082      	sub	sp, #8
 80082ba:	ed8d 0b00 	vstr	d0, [sp]
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	4912      	ldr	r1, [pc, #72]	; (800830c <__ulp+0x54>)
 80082c2:	4019      	ands	r1, r3
 80082c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80082c8:	2900      	cmp	r1, #0
 80082ca:	dd05      	ble.n	80082d8 <__ulp+0x20>
 80082cc:	2200      	movs	r2, #0
 80082ce:	460b      	mov	r3, r1
 80082d0:	ec43 2b10 	vmov	d0, r2, r3
 80082d4:	b002      	add	sp, #8
 80082d6:	4770      	bx	lr
 80082d8:	4249      	negs	r1, r1
 80082da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80082de:	ea4f 5021 	mov.w	r0, r1, asr #20
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	f04f 0300 	mov.w	r3, #0
 80082ea:	da04      	bge.n	80082f6 <__ulp+0x3e>
 80082ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80082f0:	fa41 f300 	asr.w	r3, r1, r0
 80082f4:	e7ec      	b.n	80082d0 <__ulp+0x18>
 80082f6:	f1a0 0114 	sub.w	r1, r0, #20
 80082fa:	291e      	cmp	r1, #30
 80082fc:	bfda      	itte	le
 80082fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008302:	fa20 f101 	lsrle.w	r1, r0, r1
 8008306:	2101      	movgt	r1, #1
 8008308:	460a      	mov	r2, r1
 800830a:	e7e1      	b.n	80082d0 <__ulp+0x18>
 800830c:	7ff00000 	.word	0x7ff00000

08008310 <__b2d>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	6905      	ldr	r5, [r0, #16]
 8008314:	f100 0714 	add.w	r7, r0, #20
 8008318:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800831c:	1f2e      	subs	r6, r5, #4
 800831e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008322:	4620      	mov	r0, r4
 8008324:	f7ff fd48 	bl	8007db8 <__hi0bits>
 8008328:	f1c0 0320 	rsb	r3, r0, #32
 800832c:	280a      	cmp	r0, #10
 800832e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80083ac <__b2d+0x9c>
 8008332:	600b      	str	r3, [r1, #0]
 8008334:	dc14      	bgt.n	8008360 <__b2d+0x50>
 8008336:	f1c0 0e0b 	rsb	lr, r0, #11
 800833a:	fa24 f10e 	lsr.w	r1, r4, lr
 800833e:	42b7      	cmp	r7, r6
 8008340:	ea41 030c 	orr.w	r3, r1, ip
 8008344:	bf34      	ite	cc
 8008346:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800834a:	2100      	movcs	r1, #0
 800834c:	3015      	adds	r0, #21
 800834e:	fa04 f000 	lsl.w	r0, r4, r0
 8008352:	fa21 f10e 	lsr.w	r1, r1, lr
 8008356:	ea40 0201 	orr.w	r2, r0, r1
 800835a:	ec43 2b10 	vmov	d0, r2, r3
 800835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008360:	42b7      	cmp	r7, r6
 8008362:	bf3a      	itte	cc
 8008364:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008368:	f1a5 0608 	subcc.w	r6, r5, #8
 800836c:	2100      	movcs	r1, #0
 800836e:	380b      	subs	r0, #11
 8008370:	d017      	beq.n	80083a2 <__b2d+0x92>
 8008372:	f1c0 0c20 	rsb	ip, r0, #32
 8008376:	fa04 f500 	lsl.w	r5, r4, r0
 800837a:	42be      	cmp	r6, r7
 800837c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008380:	ea45 0504 	orr.w	r5, r5, r4
 8008384:	bf8c      	ite	hi
 8008386:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800838a:	2400      	movls	r4, #0
 800838c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008390:	fa01 f000 	lsl.w	r0, r1, r0
 8008394:	fa24 f40c 	lsr.w	r4, r4, ip
 8008398:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800839c:	ea40 0204 	orr.w	r2, r0, r4
 80083a0:	e7db      	b.n	800835a <__b2d+0x4a>
 80083a2:	ea44 030c 	orr.w	r3, r4, ip
 80083a6:	460a      	mov	r2, r1
 80083a8:	e7d7      	b.n	800835a <__b2d+0x4a>
 80083aa:	bf00      	nop
 80083ac:	3ff00000 	.word	0x3ff00000

080083b0 <__d2b>:
 80083b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	4689      	mov	r9, r1
 80083b6:	2101      	movs	r1, #1
 80083b8:	ec57 6b10 	vmov	r6, r7, d0
 80083bc:	4690      	mov	r8, r2
 80083be:	f7ff fc09 	bl	8007bd4 <_Balloc>
 80083c2:	4604      	mov	r4, r0
 80083c4:	b930      	cbnz	r0, 80083d4 <__d2b+0x24>
 80083c6:	4602      	mov	r2, r0
 80083c8:	4b25      	ldr	r3, [pc, #148]	; (8008460 <__d2b+0xb0>)
 80083ca:	4826      	ldr	r0, [pc, #152]	; (8008464 <__d2b+0xb4>)
 80083cc:	f240 310a 	movw	r1, #778	; 0x30a
 80083d0:	f000 fb50 	bl	8008a74 <__assert_func>
 80083d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083dc:	bb35      	cbnz	r5, 800842c <__d2b+0x7c>
 80083de:	2e00      	cmp	r6, #0
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	d028      	beq.n	8008436 <__d2b+0x86>
 80083e4:	4668      	mov	r0, sp
 80083e6:	9600      	str	r6, [sp, #0]
 80083e8:	f7ff fd06 	bl	8007df8 <__lo0bits>
 80083ec:	9900      	ldr	r1, [sp, #0]
 80083ee:	b300      	cbz	r0, 8008432 <__d2b+0x82>
 80083f0:	9a01      	ldr	r2, [sp, #4]
 80083f2:	f1c0 0320 	rsb	r3, r0, #32
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	430b      	orrs	r3, r1
 80083fc:	40c2      	lsrs	r2, r0
 80083fe:	6163      	str	r3, [r4, #20]
 8008400:	9201      	str	r2, [sp, #4]
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	61a3      	str	r3, [r4, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	bf14      	ite	ne
 800840a:	2202      	movne	r2, #2
 800840c:	2201      	moveq	r2, #1
 800840e:	6122      	str	r2, [r4, #16]
 8008410:	b1d5      	cbz	r5, 8008448 <__d2b+0x98>
 8008412:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008416:	4405      	add	r5, r0
 8008418:	f8c9 5000 	str.w	r5, [r9]
 800841c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008420:	f8c8 0000 	str.w	r0, [r8]
 8008424:	4620      	mov	r0, r4
 8008426:	b003      	add	sp, #12
 8008428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800842c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008430:	e7d5      	b.n	80083de <__d2b+0x2e>
 8008432:	6161      	str	r1, [r4, #20]
 8008434:	e7e5      	b.n	8008402 <__d2b+0x52>
 8008436:	a801      	add	r0, sp, #4
 8008438:	f7ff fcde 	bl	8007df8 <__lo0bits>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	6163      	str	r3, [r4, #20]
 8008440:	2201      	movs	r2, #1
 8008442:	6122      	str	r2, [r4, #16]
 8008444:	3020      	adds	r0, #32
 8008446:	e7e3      	b.n	8008410 <__d2b+0x60>
 8008448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800844c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008450:	f8c9 0000 	str.w	r0, [r9]
 8008454:	6918      	ldr	r0, [r3, #16]
 8008456:	f7ff fcaf 	bl	8007db8 <__hi0bits>
 800845a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800845e:	e7df      	b.n	8008420 <__d2b+0x70>
 8008460:	08009920 	.word	0x08009920
 8008464:	080099ac 	.word	0x080099ac

08008468 <__ratio>:
 8008468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4688      	mov	r8, r1
 800846e:	4669      	mov	r1, sp
 8008470:	4681      	mov	r9, r0
 8008472:	f7ff ff4d 	bl	8008310 <__b2d>
 8008476:	a901      	add	r1, sp, #4
 8008478:	4640      	mov	r0, r8
 800847a:	ec55 4b10 	vmov	r4, r5, d0
 800847e:	f7ff ff47 	bl	8008310 <__b2d>
 8008482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008486:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800848a:	eba3 0c02 	sub.w	ip, r3, r2
 800848e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008498:	ec51 0b10 	vmov	r0, r1, d0
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfd6      	itet	le
 80084a0:	460a      	movle	r2, r1
 80084a2:	462a      	movgt	r2, r5
 80084a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084a8:	468b      	mov	fp, r1
 80084aa:	462f      	mov	r7, r5
 80084ac:	bfd4      	ite	le
 80084ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80084b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084b6:	4620      	mov	r0, r4
 80084b8:	ee10 2a10 	vmov	r2, s0
 80084bc:	465b      	mov	r3, fp
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f8 f9e4 	bl	800088c <__aeabi_ddiv>
 80084c4:	ec41 0b10 	vmov	d0, r0, r1
 80084c8:	b003      	add	sp, #12
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084ce <__copybits>:
 80084ce:	3901      	subs	r1, #1
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	1149      	asrs	r1, r1, #5
 80084d4:	6914      	ldr	r4, [r2, #16]
 80084d6:	3101      	adds	r1, #1
 80084d8:	f102 0314 	add.w	r3, r2, #20
 80084dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084e4:	1f05      	subs	r5, r0, #4
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	d30c      	bcc.n	8008504 <__copybits+0x36>
 80084ea:	1aa3      	subs	r3, r4, r2
 80084ec:	3b11      	subs	r3, #17
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	3211      	adds	r2, #17
 80084f4:	42a2      	cmp	r2, r4
 80084f6:	bf88      	it	hi
 80084f8:	2300      	movhi	r3, #0
 80084fa:	4418      	add	r0, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	4288      	cmp	r0, r1
 8008500:	d305      	bcc.n	800850e <__copybits+0x40>
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	f853 6b04 	ldr.w	r6, [r3], #4
 8008508:	f845 6f04 	str.w	r6, [r5, #4]!
 800850c:	e7eb      	b.n	80084e6 <__copybits+0x18>
 800850e:	f840 3b04 	str.w	r3, [r0], #4
 8008512:	e7f4      	b.n	80084fe <__copybits+0x30>

08008514 <__any_on>:
 8008514:	f100 0214 	add.w	r2, r0, #20
 8008518:	6900      	ldr	r0, [r0, #16]
 800851a:	114b      	asrs	r3, r1, #5
 800851c:	4298      	cmp	r0, r3
 800851e:	b510      	push	{r4, lr}
 8008520:	db11      	blt.n	8008546 <__any_on+0x32>
 8008522:	dd0a      	ble.n	800853a <__any_on+0x26>
 8008524:	f011 011f 	ands.w	r1, r1, #31
 8008528:	d007      	beq.n	800853a <__any_on+0x26>
 800852a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800852e:	fa24 f001 	lsr.w	r0, r4, r1
 8008532:	fa00 f101 	lsl.w	r1, r0, r1
 8008536:	428c      	cmp	r4, r1
 8008538:	d10b      	bne.n	8008552 <__any_on+0x3e>
 800853a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800853e:	4293      	cmp	r3, r2
 8008540:	d803      	bhi.n	800854a <__any_on+0x36>
 8008542:	2000      	movs	r0, #0
 8008544:	bd10      	pop	{r4, pc}
 8008546:	4603      	mov	r3, r0
 8008548:	e7f7      	b.n	800853a <__any_on+0x26>
 800854a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800854e:	2900      	cmp	r1, #0
 8008550:	d0f5      	beq.n	800853e <__any_on+0x2a>
 8008552:	2001      	movs	r0, #1
 8008554:	e7f6      	b.n	8008544 <__any_on+0x30>

08008556 <_calloc_r>:
 8008556:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008558:	fba1 2402 	umull	r2, r4, r1, r2
 800855c:	b94c      	cbnz	r4, 8008572 <_calloc_r+0x1c>
 800855e:	4611      	mov	r1, r2
 8008560:	9201      	str	r2, [sp, #4]
 8008562:	f000 f87b 	bl	800865c <_malloc_r>
 8008566:	9a01      	ldr	r2, [sp, #4]
 8008568:	4605      	mov	r5, r0
 800856a:	b930      	cbnz	r0, 800857a <_calloc_r+0x24>
 800856c:	4628      	mov	r0, r5
 800856e:	b003      	add	sp, #12
 8008570:	bd30      	pop	{r4, r5, pc}
 8008572:	220c      	movs	r2, #12
 8008574:	6002      	str	r2, [r0, #0]
 8008576:	2500      	movs	r5, #0
 8008578:	e7f8      	b.n	800856c <_calloc_r+0x16>
 800857a:	4621      	mov	r1, r4
 800857c:	f7fc fbbe 	bl	8004cfc <memset>
 8008580:	e7f4      	b.n	800856c <_calloc_r+0x16>
	...

08008584 <_free_r>:
 8008584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008586:	2900      	cmp	r1, #0
 8008588:	d044      	beq.n	8008614 <_free_r+0x90>
 800858a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800858e:	9001      	str	r0, [sp, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f1a1 0404 	sub.w	r4, r1, #4
 8008596:	bfb8      	it	lt
 8008598:	18e4      	addlt	r4, r4, r3
 800859a:	f000 fab5 	bl	8008b08 <__malloc_lock>
 800859e:	4a1e      	ldr	r2, [pc, #120]	; (8008618 <_free_r+0x94>)
 80085a0:	9801      	ldr	r0, [sp, #4]
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	b933      	cbnz	r3, 80085b4 <_free_r+0x30>
 80085a6:	6063      	str	r3, [r4, #4]
 80085a8:	6014      	str	r4, [r2, #0]
 80085aa:	b003      	add	sp, #12
 80085ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085b0:	f000 bab0 	b.w	8008b14 <__malloc_unlock>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d908      	bls.n	80085ca <_free_r+0x46>
 80085b8:	6825      	ldr	r5, [r4, #0]
 80085ba:	1961      	adds	r1, r4, r5
 80085bc:	428b      	cmp	r3, r1
 80085be:	bf01      	itttt	eq
 80085c0:	6819      	ldreq	r1, [r3, #0]
 80085c2:	685b      	ldreq	r3, [r3, #4]
 80085c4:	1949      	addeq	r1, r1, r5
 80085c6:	6021      	streq	r1, [r4, #0]
 80085c8:	e7ed      	b.n	80085a6 <_free_r+0x22>
 80085ca:	461a      	mov	r2, r3
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	b10b      	cbz	r3, 80085d4 <_free_r+0x50>
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	d9fa      	bls.n	80085ca <_free_r+0x46>
 80085d4:	6811      	ldr	r1, [r2, #0]
 80085d6:	1855      	adds	r5, r2, r1
 80085d8:	42a5      	cmp	r5, r4
 80085da:	d10b      	bne.n	80085f4 <_free_r+0x70>
 80085dc:	6824      	ldr	r4, [r4, #0]
 80085de:	4421      	add	r1, r4
 80085e0:	1854      	adds	r4, r2, r1
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	6011      	str	r1, [r2, #0]
 80085e6:	d1e0      	bne.n	80085aa <_free_r+0x26>
 80085e8:	681c      	ldr	r4, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	6053      	str	r3, [r2, #4]
 80085ee:	4421      	add	r1, r4
 80085f0:	6011      	str	r1, [r2, #0]
 80085f2:	e7da      	b.n	80085aa <_free_r+0x26>
 80085f4:	d902      	bls.n	80085fc <_free_r+0x78>
 80085f6:	230c      	movs	r3, #12
 80085f8:	6003      	str	r3, [r0, #0]
 80085fa:	e7d6      	b.n	80085aa <_free_r+0x26>
 80085fc:	6825      	ldr	r5, [r4, #0]
 80085fe:	1961      	adds	r1, r4, r5
 8008600:	428b      	cmp	r3, r1
 8008602:	bf04      	itt	eq
 8008604:	6819      	ldreq	r1, [r3, #0]
 8008606:	685b      	ldreq	r3, [r3, #4]
 8008608:	6063      	str	r3, [r4, #4]
 800860a:	bf04      	itt	eq
 800860c:	1949      	addeq	r1, r1, r5
 800860e:	6021      	streq	r1, [r4, #0]
 8008610:	6054      	str	r4, [r2, #4]
 8008612:	e7ca      	b.n	80085aa <_free_r+0x26>
 8008614:	b003      	add	sp, #12
 8008616:	bd30      	pop	{r4, r5, pc}
 8008618:	20000334 	.word	0x20000334

0800861c <sbrk_aligned>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	4e0e      	ldr	r6, [pc, #56]	; (8008658 <sbrk_aligned+0x3c>)
 8008620:	460c      	mov	r4, r1
 8008622:	6831      	ldr	r1, [r6, #0]
 8008624:	4605      	mov	r5, r0
 8008626:	b911      	cbnz	r1, 800862e <sbrk_aligned+0x12>
 8008628:	f000 f9f2 	bl	8008a10 <_sbrk_r>
 800862c:	6030      	str	r0, [r6, #0]
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 f9ed 	bl	8008a10 <_sbrk_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d00a      	beq.n	8008650 <sbrk_aligned+0x34>
 800863a:	1cc4      	adds	r4, r0, #3
 800863c:	f024 0403 	bic.w	r4, r4, #3
 8008640:	42a0      	cmp	r0, r4
 8008642:	d007      	beq.n	8008654 <sbrk_aligned+0x38>
 8008644:	1a21      	subs	r1, r4, r0
 8008646:	4628      	mov	r0, r5
 8008648:	f000 f9e2 	bl	8008a10 <_sbrk_r>
 800864c:	3001      	adds	r0, #1
 800864e:	d101      	bne.n	8008654 <sbrk_aligned+0x38>
 8008650:	f04f 34ff 	mov.w	r4, #4294967295
 8008654:	4620      	mov	r0, r4
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	20000338 	.word	0x20000338

0800865c <_malloc_r>:
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	1ccd      	adds	r5, r1, #3
 8008662:	f025 0503 	bic.w	r5, r5, #3
 8008666:	3508      	adds	r5, #8
 8008668:	2d0c      	cmp	r5, #12
 800866a:	bf38      	it	cc
 800866c:	250c      	movcc	r5, #12
 800866e:	2d00      	cmp	r5, #0
 8008670:	4607      	mov	r7, r0
 8008672:	db01      	blt.n	8008678 <_malloc_r+0x1c>
 8008674:	42a9      	cmp	r1, r5
 8008676:	d905      	bls.n	8008684 <_malloc_r+0x28>
 8008678:	230c      	movs	r3, #12
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	2600      	movs	r6, #0
 800867e:	4630      	mov	r0, r6
 8008680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008684:	4e2e      	ldr	r6, [pc, #184]	; (8008740 <_malloc_r+0xe4>)
 8008686:	f000 fa3f 	bl	8008b08 <__malloc_lock>
 800868a:	6833      	ldr	r3, [r6, #0]
 800868c:	461c      	mov	r4, r3
 800868e:	bb34      	cbnz	r4, 80086de <_malloc_r+0x82>
 8008690:	4629      	mov	r1, r5
 8008692:	4638      	mov	r0, r7
 8008694:	f7ff ffc2 	bl	800861c <sbrk_aligned>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	4604      	mov	r4, r0
 800869c:	d14d      	bne.n	800873a <_malloc_r+0xde>
 800869e:	6834      	ldr	r4, [r6, #0]
 80086a0:	4626      	mov	r6, r4
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d140      	bne.n	8008728 <_malloc_r+0xcc>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	4631      	mov	r1, r6
 80086aa:	4638      	mov	r0, r7
 80086ac:	eb04 0803 	add.w	r8, r4, r3
 80086b0:	f000 f9ae 	bl	8008a10 <_sbrk_r>
 80086b4:	4580      	cmp	r8, r0
 80086b6:	d13a      	bne.n	800872e <_malloc_r+0xd2>
 80086b8:	6821      	ldr	r1, [r4, #0]
 80086ba:	3503      	adds	r5, #3
 80086bc:	1a6d      	subs	r5, r5, r1
 80086be:	f025 0503 	bic.w	r5, r5, #3
 80086c2:	3508      	adds	r5, #8
 80086c4:	2d0c      	cmp	r5, #12
 80086c6:	bf38      	it	cc
 80086c8:	250c      	movcc	r5, #12
 80086ca:	4629      	mov	r1, r5
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7ff ffa5 	bl	800861c <sbrk_aligned>
 80086d2:	3001      	adds	r0, #1
 80086d4:	d02b      	beq.n	800872e <_malloc_r+0xd2>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	442b      	add	r3, r5
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	e00e      	b.n	80086fc <_malloc_r+0xa0>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	1b52      	subs	r2, r2, r5
 80086e2:	d41e      	bmi.n	8008722 <_malloc_r+0xc6>
 80086e4:	2a0b      	cmp	r2, #11
 80086e6:	d916      	bls.n	8008716 <_malloc_r+0xba>
 80086e8:	1961      	adds	r1, r4, r5
 80086ea:	42a3      	cmp	r3, r4
 80086ec:	6025      	str	r5, [r4, #0]
 80086ee:	bf18      	it	ne
 80086f0:	6059      	strne	r1, [r3, #4]
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	bf08      	it	eq
 80086f6:	6031      	streq	r1, [r6, #0]
 80086f8:	5162      	str	r2, [r4, r5]
 80086fa:	604b      	str	r3, [r1, #4]
 80086fc:	4638      	mov	r0, r7
 80086fe:	f104 060b 	add.w	r6, r4, #11
 8008702:	f000 fa07 	bl	8008b14 <__malloc_unlock>
 8008706:	f026 0607 	bic.w	r6, r6, #7
 800870a:	1d23      	adds	r3, r4, #4
 800870c:	1af2      	subs	r2, r6, r3
 800870e:	d0b6      	beq.n	800867e <_malloc_r+0x22>
 8008710:	1b9b      	subs	r3, r3, r6
 8008712:	50a3      	str	r3, [r4, r2]
 8008714:	e7b3      	b.n	800867e <_malloc_r+0x22>
 8008716:	6862      	ldr	r2, [r4, #4]
 8008718:	42a3      	cmp	r3, r4
 800871a:	bf0c      	ite	eq
 800871c:	6032      	streq	r2, [r6, #0]
 800871e:	605a      	strne	r2, [r3, #4]
 8008720:	e7ec      	b.n	80086fc <_malloc_r+0xa0>
 8008722:	4623      	mov	r3, r4
 8008724:	6864      	ldr	r4, [r4, #4]
 8008726:	e7b2      	b.n	800868e <_malloc_r+0x32>
 8008728:	4634      	mov	r4, r6
 800872a:	6876      	ldr	r6, [r6, #4]
 800872c:	e7b9      	b.n	80086a2 <_malloc_r+0x46>
 800872e:	230c      	movs	r3, #12
 8008730:	603b      	str	r3, [r7, #0]
 8008732:	4638      	mov	r0, r7
 8008734:	f000 f9ee 	bl	8008b14 <__malloc_unlock>
 8008738:	e7a1      	b.n	800867e <_malloc_r+0x22>
 800873a:	6025      	str	r5, [r4, #0]
 800873c:	e7de      	b.n	80086fc <_malloc_r+0xa0>
 800873e:	bf00      	nop
 8008740:	20000334 	.word	0x20000334

08008744 <__ssputs_r>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	688e      	ldr	r6, [r1, #8]
 800874a:	429e      	cmp	r6, r3
 800874c:	4682      	mov	sl, r0
 800874e:	460c      	mov	r4, r1
 8008750:	4690      	mov	r8, r2
 8008752:	461f      	mov	r7, r3
 8008754:	d838      	bhi.n	80087c8 <__ssputs_r+0x84>
 8008756:	898a      	ldrh	r2, [r1, #12]
 8008758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800875c:	d032      	beq.n	80087c4 <__ssputs_r+0x80>
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	6909      	ldr	r1, [r1, #16]
 8008762:	eba5 0901 	sub.w	r9, r5, r1
 8008766:	6965      	ldr	r5, [r4, #20]
 8008768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008770:	3301      	adds	r3, #1
 8008772:	444b      	add	r3, r9
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	429d      	cmp	r5, r3
 8008778:	bf38      	it	cc
 800877a:	461d      	movcc	r5, r3
 800877c:	0553      	lsls	r3, r2, #21
 800877e:	d531      	bpl.n	80087e4 <__ssputs_r+0xa0>
 8008780:	4629      	mov	r1, r5
 8008782:	f7ff ff6b 	bl	800865c <_malloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	b950      	cbnz	r0, 80087a0 <__ssputs_r+0x5c>
 800878a:	230c      	movs	r3, #12
 800878c:	f8ca 3000 	str.w	r3, [sl]
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	6921      	ldr	r1, [r4, #16]
 80087a2:	464a      	mov	r2, r9
 80087a4:	f7ff fa08 	bl	8007bb8 <memcpy>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	6126      	str	r6, [r4, #16]
 80087b6:	6165      	str	r5, [r4, #20]
 80087b8:	444e      	add	r6, r9
 80087ba:	eba5 0509 	sub.w	r5, r5, r9
 80087be:	6026      	str	r6, [r4, #0]
 80087c0:	60a5      	str	r5, [r4, #8]
 80087c2:	463e      	mov	r6, r7
 80087c4:	42be      	cmp	r6, r7
 80087c6:	d900      	bls.n	80087ca <__ssputs_r+0x86>
 80087c8:	463e      	mov	r6, r7
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	4632      	mov	r2, r6
 80087ce:	4641      	mov	r1, r8
 80087d0:	f000 f980 	bl	8008ad4 <memmove>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	1b9b      	subs	r3, r3, r6
 80087d8:	60a3      	str	r3, [r4, #8]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	4433      	add	r3, r6
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7db      	b.n	800879c <__ssputs_r+0x58>
 80087e4:	462a      	mov	r2, r5
 80087e6:	f000 f99b 	bl	8008b20 <_realloc_r>
 80087ea:	4606      	mov	r6, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1e1      	bne.n	80087b4 <__ssputs_r+0x70>
 80087f0:	6921      	ldr	r1, [r4, #16]
 80087f2:	4650      	mov	r0, sl
 80087f4:	f7ff fec6 	bl	8008584 <_free_r>
 80087f8:	e7c7      	b.n	800878a <__ssputs_r+0x46>
	...

080087fc <_svfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	4698      	mov	r8, r3
 8008802:	898b      	ldrh	r3, [r1, #12]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	b09d      	sub	sp, #116	; 0x74
 8008808:	4607      	mov	r7, r0
 800880a:	460d      	mov	r5, r1
 800880c:	4614      	mov	r4, r2
 800880e:	d50e      	bpl.n	800882e <_svfiprintf_r+0x32>
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	b963      	cbnz	r3, 800882e <_svfiprintf_r+0x32>
 8008814:	2140      	movs	r1, #64	; 0x40
 8008816:	f7ff ff21 	bl	800865c <_malloc_r>
 800881a:	6028      	str	r0, [r5, #0]
 800881c:	6128      	str	r0, [r5, #16]
 800881e:	b920      	cbnz	r0, 800882a <_svfiprintf_r+0x2e>
 8008820:	230c      	movs	r3, #12
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e0d1      	b.n	80089ce <_svfiprintf_r+0x1d2>
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	616b      	str	r3, [r5, #20]
 800882e:	2300      	movs	r3, #0
 8008830:	9309      	str	r3, [sp, #36]	; 0x24
 8008832:	2320      	movs	r3, #32
 8008834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008838:	f8cd 800c 	str.w	r8, [sp, #12]
 800883c:	2330      	movs	r3, #48	; 0x30
 800883e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089e8 <_svfiprintf_r+0x1ec>
 8008842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008846:	f04f 0901 	mov.w	r9, #1
 800884a:	4623      	mov	r3, r4
 800884c:	469a      	mov	sl, r3
 800884e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008852:	b10a      	cbz	r2, 8008858 <_svfiprintf_r+0x5c>
 8008854:	2a25      	cmp	r2, #37	; 0x25
 8008856:	d1f9      	bne.n	800884c <_svfiprintf_r+0x50>
 8008858:	ebba 0b04 	subs.w	fp, sl, r4
 800885c:	d00b      	beq.n	8008876 <_svfiprintf_r+0x7a>
 800885e:	465b      	mov	r3, fp
 8008860:	4622      	mov	r2, r4
 8008862:	4629      	mov	r1, r5
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff6d 	bl	8008744 <__ssputs_r>
 800886a:	3001      	adds	r0, #1
 800886c:	f000 80aa 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008872:	445a      	add	r2, fp
 8008874:	9209      	str	r2, [sp, #36]	; 0x24
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80a2 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008880:	2300      	movs	r3, #0
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888a:	f10a 0a01 	add.w	sl, sl, #1
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008896:	931a      	str	r3, [sp, #104]	; 0x68
 8008898:	4654      	mov	r4, sl
 800889a:	2205      	movs	r2, #5
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	4851      	ldr	r0, [pc, #324]	; (80089e8 <_svfiprintf_r+0x1ec>)
 80088a2:	f7f7 fcbd 	bl	8000220 <memchr>
 80088a6:	9a04      	ldr	r2, [sp, #16]
 80088a8:	b9d8      	cbnz	r0, 80088e2 <_svfiprintf_r+0xe6>
 80088aa:	06d0      	lsls	r0, r2, #27
 80088ac:	bf44      	itt	mi
 80088ae:	2320      	movmi	r3, #32
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b4:	0711      	lsls	r1, r2, #28
 80088b6:	bf44      	itt	mi
 80088b8:	232b      	movmi	r3, #43	; 0x2b
 80088ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088be:	f89a 3000 	ldrb.w	r3, [sl]
 80088c2:	2b2a      	cmp	r3, #42	; 0x2a
 80088c4:	d015      	beq.n	80088f2 <_svfiprintf_r+0xf6>
 80088c6:	9a07      	ldr	r2, [sp, #28]
 80088c8:	4654      	mov	r4, sl
 80088ca:	2000      	movs	r0, #0
 80088cc:	f04f 0c0a 	mov.w	ip, #10
 80088d0:	4621      	mov	r1, r4
 80088d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d6:	3b30      	subs	r3, #48	; 0x30
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d94e      	bls.n	800897a <_svfiprintf_r+0x17e>
 80088dc:	b1b0      	cbz	r0, 800890c <_svfiprintf_r+0x110>
 80088de:	9207      	str	r2, [sp, #28]
 80088e0:	e014      	b.n	800890c <_svfiprintf_r+0x110>
 80088e2:	eba0 0308 	sub.w	r3, r0, r8
 80088e6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	46a2      	mov	sl, r4
 80088f0:	e7d2      	b.n	8008898 <_svfiprintf_r+0x9c>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfbb      	ittet	lt
 80088fe:	425b      	neglt	r3, r3
 8008900:	f042 0202 	orrlt.w	r2, r2, #2
 8008904:	9307      	strge	r3, [sp, #28]
 8008906:	9307      	strlt	r3, [sp, #28]
 8008908:	bfb8      	it	lt
 800890a:	9204      	strlt	r2, [sp, #16]
 800890c:	7823      	ldrb	r3, [r4, #0]
 800890e:	2b2e      	cmp	r3, #46	; 0x2e
 8008910:	d10c      	bne.n	800892c <_svfiprintf_r+0x130>
 8008912:	7863      	ldrb	r3, [r4, #1]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d135      	bne.n	8008984 <_svfiprintf_r+0x188>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfb8      	it	lt
 8008924:	f04f 33ff 	movlt.w	r3, #4294967295
 8008928:	3402      	adds	r4, #2
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089f8 <_svfiprintf_r+0x1fc>
 8008930:	7821      	ldrb	r1, [r4, #0]
 8008932:	2203      	movs	r2, #3
 8008934:	4650      	mov	r0, sl
 8008936:	f7f7 fc73 	bl	8000220 <memchr>
 800893a:	b140      	cbz	r0, 800894e <_svfiprintf_r+0x152>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	eba0 000a 	sub.w	r0, r0, sl
 8008942:	fa03 f000 	lsl.w	r0, r3, r0
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	4303      	orrs	r3, r0
 800894a:	3401      	adds	r4, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008952:	4826      	ldr	r0, [pc, #152]	; (80089ec <_svfiprintf_r+0x1f0>)
 8008954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008958:	2206      	movs	r2, #6
 800895a:	f7f7 fc61 	bl	8000220 <memchr>
 800895e:	2800      	cmp	r0, #0
 8008960:	d038      	beq.n	80089d4 <_svfiprintf_r+0x1d8>
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <_svfiprintf_r+0x1f4>)
 8008964:	bb1b      	cbnz	r3, 80089ae <_svfiprintf_r+0x1b2>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	3307      	adds	r3, #7
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	3308      	adds	r3, #8
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008974:	4433      	add	r3, r6
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	e767      	b.n	800884a <_svfiprintf_r+0x4e>
 800897a:	fb0c 3202 	mla	r2, ip, r2, r3
 800897e:	460c      	mov	r4, r1
 8008980:	2001      	movs	r0, #1
 8008982:	e7a5      	b.n	80088d0 <_svfiprintf_r+0xd4>
 8008984:	2300      	movs	r3, #0
 8008986:	3401      	adds	r4, #1
 8008988:	9305      	str	r3, [sp, #20]
 800898a:	4619      	mov	r1, r3
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	4620      	mov	r0, r4
 8008992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008996:	3a30      	subs	r2, #48	; 0x30
 8008998:	2a09      	cmp	r2, #9
 800899a:	d903      	bls.n	80089a4 <_svfiprintf_r+0x1a8>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c5      	beq.n	800892c <_svfiprintf_r+0x130>
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	e7c3      	b.n	800892c <_svfiprintf_r+0x130>
 80089a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a8:	4604      	mov	r4, r0
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7f0      	b.n	8008990 <_svfiprintf_r+0x194>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7fc fa47 	bl	8004e4c <_printf_float>
 80089be:	1c42      	adds	r2, r0, #1
 80089c0:	4606      	mov	r6, r0
 80089c2:	d1d6      	bne.n	8008972 <_svfiprintf_r+0x176>
 80089c4:	89ab      	ldrh	r3, [r5, #12]
 80089c6:	065b      	lsls	r3, r3, #25
 80089c8:	f53f af2c 	bmi.w	8008824 <_svfiprintf_r+0x28>
 80089cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ce:	b01d      	add	sp, #116	; 0x74
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4638      	mov	r0, r7
 80089e0:	f7fc fcd8 	bl	8005394 <_printf_i>
 80089e4:	e7eb      	b.n	80089be <_svfiprintf_r+0x1c2>
 80089e6:	bf00      	nop
 80089e8:	08009b04 	.word	0x08009b04
 80089ec:	08009b0e 	.word	0x08009b0e
 80089f0:	08004e4d 	.word	0x08004e4d
 80089f4:	08008745 	.word	0x08008745
 80089f8:	08009b0a 	.word	0x08009b0a
 80089fc:	00000000 	.word	0x00000000

08008a00 <nan>:
 8008a00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a08 <nan+0x8>
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	00000000 	.word	0x00000000
 8008a0c:	7ff80000 	.word	0x7ff80000

08008a10 <_sbrk_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d06      	ldr	r5, [pc, #24]	; (8008a2c <_sbrk_r+0x1c>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f9 fbdc 	bl	80021d8 <_sbrk>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_sbrk_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_sbrk_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	2000033c 	.word	0x2000033c

08008a30 <strncmp>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	b17a      	cbz	r2, 8008a54 <strncmp+0x24>
 8008a34:	4603      	mov	r3, r0
 8008a36:	3901      	subs	r1, #1
 8008a38:	1884      	adds	r4, r0, r2
 8008a3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a42:	4290      	cmp	r0, r2
 8008a44:	d101      	bne.n	8008a4a <strncmp+0x1a>
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	d101      	bne.n	8008a4e <strncmp+0x1e>
 8008a4a:	1a80      	subs	r0, r0, r2
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d1f3      	bne.n	8008a3a <strncmp+0xa>
 8008a52:	e7fa      	b.n	8008a4a <strncmp+0x1a>
 8008a54:	4610      	mov	r0, r2
 8008a56:	e7f9      	b.n	8008a4c <strncmp+0x1c>

08008a58 <__ascii_wctomb>:
 8008a58:	b149      	cbz	r1, 8008a6e <__ascii_wctomb+0x16>
 8008a5a:	2aff      	cmp	r2, #255	; 0xff
 8008a5c:	bf85      	ittet	hi
 8008a5e:	238a      	movhi	r3, #138	; 0x8a
 8008a60:	6003      	strhi	r3, [r0, #0]
 8008a62:	700a      	strbls	r2, [r1, #0]
 8008a64:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a68:	bf98      	it	ls
 8008a6a:	2001      	movls	r0, #1
 8008a6c:	4770      	bx	lr
 8008a6e:	4608      	mov	r0, r1
 8008a70:	4770      	bx	lr
	...

08008a74 <__assert_func>:
 8008a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a76:	4614      	mov	r4, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <__assert_func+0x2c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4605      	mov	r5, r0
 8008a80:	68d8      	ldr	r0, [r3, #12]
 8008a82:	b14c      	cbz	r4, 8008a98 <__assert_func+0x24>
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <__assert_func+0x30>)
 8008a86:	9100      	str	r1, [sp, #0]
 8008a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a8c:	4906      	ldr	r1, [pc, #24]	; (8008aa8 <__assert_func+0x34>)
 8008a8e:	462b      	mov	r3, r5
 8008a90:	f000 f80e 	bl	8008ab0 <fiprintf>
 8008a94:	f000 fa8c 	bl	8008fb0 <abort>
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <__assert_func+0x38>)
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	e7f3      	b.n	8008a86 <__assert_func+0x12>
 8008a9e:	bf00      	nop
 8008aa0:	2000000c 	.word	0x2000000c
 8008aa4:	08009b15 	.word	0x08009b15
 8008aa8:	08009b22 	.word	0x08009b22
 8008aac:	08009b50 	.word	0x08009b50

08008ab0 <fiprintf>:
 8008ab0:	b40e      	push	{r1, r2, r3}
 8008ab2:	b503      	push	{r0, r1, lr}
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	ab03      	add	r3, sp, #12
 8008ab8:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <fiprintf+0x20>)
 8008aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008abe:	6800      	ldr	r0, [r0, #0]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f000 f885 	bl	8008bd0 <_vfiprintf_r>
 8008ac6:	b002      	add	sp, #8
 8008ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008acc:	b003      	add	sp, #12
 8008ace:	4770      	bx	lr
 8008ad0:	2000000c 	.word	0x2000000c

08008ad4 <memmove>:
 8008ad4:	4288      	cmp	r0, r1
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	eb01 0402 	add.w	r4, r1, r2
 8008adc:	d902      	bls.n	8008ae4 <memmove+0x10>
 8008ade:	4284      	cmp	r4, r0
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	d807      	bhi.n	8008af4 <memmove+0x20>
 8008ae4:	1e43      	subs	r3, r0, #1
 8008ae6:	42a1      	cmp	r1, r4
 8008ae8:	d008      	beq.n	8008afc <memmove+0x28>
 8008aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008af2:	e7f8      	b.n	8008ae6 <memmove+0x12>
 8008af4:	4402      	add	r2, r0
 8008af6:	4601      	mov	r1, r0
 8008af8:	428a      	cmp	r2, r1
 8008afa:	d100      	bne.n	8008afe <memmove+0x2a>
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b06:	e7f7      	b.n	8008af8 <memmove+0x24>

08008b08 <__malloc_lock>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__malloc_lock+0x8>)
 8008b0a:	f000 bc11 	b.w	8009330 <__retarget_lock_acquire_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20000340 	.word	0x20000340

08008b14 <__malloc_unlock>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__malloc_unlock+0x8>)
 8008b16:	f000 bc0c 	b.w	8009332 <__retarget_lock_release_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	20000340 	.word	0x20000340

08008b20 <_realloc_r>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	4680      	mov	r8, r0
 8008b26:	4614      	mov	r4, r2
 8008b28:	460e      	mov	r6, r1
 8008b2a:	b921      	cbnz	r1, 8008b36 <_realloc_r+0x16>
 8008b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b30:	4611      	mov	r1, r2
 8008b32:	f7ff bd93 	b.w	800865c <_malloc_r>
 8008b36:	b92a      	cbnz	r2, 8008b44 <_realloc_r+0x24>
 8008b38:	f7ff fd24 	bl	8008584 <_free_r>
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	f000 fc5c 	bl	8009400 <_malloc_usable_size_r>
 8008b48:	4284      	cmp	r4, r0
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	d802      	bhi.n	8008b54 <_realloc_r+0x34>
 8008b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b52:	d812      	bhi.n	8008b7a <_realloc_r+0x5a>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f7ff fd80 	bl	800865c <_malloc_r>
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d0ed      	beq.n	8008b3e <_realloc_r+0x1e>
 8008b62:	42bc      	cmp	r4, r7
 8008b64:	4622      	mov	r2, r4
 8008b66:	4631      	mov	r1, r6
 8008b68:	bf28      	it	cs
 8008b6a:	463a      	movcs	r2, r7
 8008b6c:	f7ff f824 	bl	8007bb8 <memcpy>
 8008b70:	4631      	mov	r1, r6
 8008b72:	4640      	mov	r0, r8
 8008b74:	f7ff fd06 	bl	8008584 <_free_r>
 8008b78:	e7e1      	b.n	8008b3e <_realloc_r+0x1e>
 8008b7a:	4635      	mov	r5, r6
 8008b7c:	e7df      	b.n	8008b3e <_realloc_r+0x1e>

08008b7e <__sfputc_r>:
 8008b7e:	6893      	ldr	r3, [r2, #8]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	b410      	push	{r4}
 8008b86:	6093      	str	r3, [r2, #8]
 8008b88:	da08      	bge.n	8008b9c <__sfputc_r+0x1e>
 8008b8a:	6994      	ldr	r4, [r2, #24]
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	db01      	blt.n	8008b94 <__sfputc_r+0x16>
 8008b90:	290a      	cmp	r1, #10
 8008b92:	d103      	bne.n	8008b9c <__sfputc_r+0x1e>
 8008b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b98:	f000 b94a 	b.w	8008e30 <__swbuf_r>
 8008b9c:	6813      	ldr	r3, [r2, #0]
 8008b9e:	1c58      	adds	r0, r3, #1
 8008ba0:	6010      	str	r0, [r2, #0]
 8008ba2:	7019      	strb	r1, [r3, #0]
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <__sfputs_r>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	4606      	mov	r6, r0
 8008bb0:	460f      	mov	r7, r1
 8008bb2:	4614      	mov	r4, r2
 8008bb4:	18d5      	adds	r5, r2, r3
 8008bb6:	42ac      	cmp	r4, r5
 8008bb8:	d101      	bne.n	8008bbe <__sfputs_r+0x12>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e007      	b.n	8008bce <__sfputs_r+0x22>
 8008bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff ffda 	bl	8008b7e <__sfputc_r>
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	d1f3      	bne.n	8008bb6 <__sfputs_r+0xa>
 8008bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bd0 <_vfiprintf_r>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	b09d      	sub	sp, #116	; 0x74
 8008bd8:	4614      	mov	r4, r2
 8008bda:	4698      	mov	r8, r3
 8008bdc:	4606      	mov	r6, r0
 8008bde:	b118      	cbz	r0, 8008be8 <_vfiprintf_r+0x18>
 8008be0:	6983      	ldr	r3, [r0, #24]
 8008be2:	b90b      	cbnz	r3, 8008be8 <_vfiprintf_r+0x18>
 8008be4:	f000 fb06 	bl	80091f4 <__sinit>
 8008be8:	4b89      	ldr	r3, [pc, #548]	; (8008e10 <_vfiprintf_r+0x240>)
 8008bea:	429d      	cmp	r5, r3
 8008bec:	d11b      	bne.n	8008c26 <_vfiprintf_r+0x56>
 8008bee:	6875      	ldr	r5, [r6, #4]
 8008bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf2:	07d9      	lsls	r1, r3, #31
 8008bf4:	d405      	bmi.n	8008c02 <_vfiprintf_r+0x32>
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	059a      	lsls	r2, r3, #22
 8008bfa:	d402      	bmi.n	8008c02 <_vfiprintf_r+0x32>
 8008bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bfe:	f000 fb97 	bl	8009330 <__retarget_lock_acquire_recursive>
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	071b      	lsls	r3, r3, #28
 8008c06:	d501      	bpl.n	8008c0c <_vfiprintf_r+0x3c>
 8008c08:	692b      	ldr	r3, [r5, #16]
 8008c0a:	b9eb      	cbnz	r3, 8008c48 <_vfiprintf_r+0x78>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f000 f960 	bl	8008ed4 <__swsetup_r>
 8008c14:	b1c0      	cbz	r0, 8008c48 <_vfiprintf_r+0x78>
 8008c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c18:	07dc      	lsls	r4, r3, #31
 8008c1a:	d50e      	bpl.n	8008c3a <_vfiprintf_r+0x6a>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	b01d      	add	sp, #116	; 0x74
 8008c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c26:	4b7b      	ldr	r3, [pc, #492]	; (8008e14 <_vfiprintf_r+0x244>)
 8008c28:	429d      	cmp	r5, r3
 8008c2a:	d101      	bne.n	8008c30 <_vfiprintf_r+0x60>
 8008c2c:	68b5      	ldr	r5, [r6, #8]
 8008c2e:	e7df      	b.n	8008bf0 <_vfiprintf_r+0x20>
 8008c30:	4b79      	ldr	r3, [pc, #484]	; (8008e18 <_vfiprintf_r+0x248>)
 8008c32:	429d      	cmp	r5, r3
 8008c34:	bf08      	it	eq
 8008c36:	68f5      	ldreq	r5, [r6, #12]
 8008c38:	e7da      	b.n	8008bf0 <_vfiprintf_r+0x20>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	0598      	lsls	r0, r3, #22
 8008c3e:	d4ed      	bmi.n	8008c1c <_vfiprintf_r+0x4c>
 8008c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c42:	f000 fb76 	bl	8009332 <__retarget_lock_release_recursive>
 8008c46:	e7e9      	b.n	8008c1c <_vfiprintf_r+0x4c>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c56:	2330      	movs	r3, #48	; 0x30
 8008c58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e1c <_vfiprintf_r+0x24c>
 8008c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c60:	f04f 0901 	mov.w	r9, #1
 8008c64:	4623      	mov	r3, r4
 8008c66:	469a      	mov	sl, r3
 8008c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c6c:	b10a      	cbz	r2, 8008c72 <_vfiprintf_r+0xa2>
 8008c6e:	2a25      	cmp	r2, #37	; 0x25
 8008c70:	d1f9      	bne.n	8008c66 <_vfiprintf_r+0x96>
 8008c72:	ebba 0b04 	subs.w	fp, sl, r4
 8008c76:	d00b      	beq.n	8008c90 <_vfiprintf_r+0xc0>
 8008c78:	465b      	mov	r3, fp
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7ff ff94 	bl	8008bac <__sfputs_r>
 8008c84:	3001      	adds	r0, #1
 8008c86:	f000 80aa 	beq.w	8008dde <_vfiprintf_r+0x20e>
 8008c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8c:	445a      	add	r2, fp
 8008c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c90:	f89a 3000 	ldrb.w	r3, [sl]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 80a2 	beq.w	8008dde <_vfiprintf_r+0x20e>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca4:	f10a 0a01 	add.w	sl, sl, #1
 8008ca8:	9304      	str	r3, [sp, #16]
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8008cb2:	4654      	mov	r4, sl
 8008cb4:	2205      	movs	r2, #5
 8008cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cba:	4858      	ldr	r0, [pc, #352]	; (8008e1c <_vfiprintf_r+0x24c>)
 8008cbc:	f7f7 fab0 	bl	8000220 <memchr>
 8008cc0:	9a04      	ldr	r2, [sp, #16]
 8008cc2:	b9d8      	cbnz	r0, 8008cfc <_vfiprintf_r+0x12c>
 8008cc4:	06d1      	lsls	r1, r2, #27
 8008cc6:	bf44      	itt	mi
 8008cc8:	2320      	movmi	r3, #32
 8008cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cce:	0713      	lsls	r3, r2, #28
 8008cd0:	bf44      	itt	mi
 8008cd2:	232b      	movmi	r3, #43	; 0x2b
 8008cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cde:	d015      	beq.n	8008d0c <_vfiprintf_r+0x13c>
 8008ce0:	9a07      	ldr	r2, [sp, #28]
 8008ce2:	4654      	mov	r4, sl
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f04f 0c0a 	mov.w	ip, #10
 8008cea:	4621      	mov	r1, r4
 8008cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cf0:	3b30      	subs	r3, #48	; 0x30
 8008cf2:	2b09      	cmp	r3, #9
 8008cf4:	d94e      	bls.n	8008d94 <_vfiprintf_r+0x1c4>
 8008cf6:	b1b0      	cbz	r0, 8008d26 <_vfiprintf_r+0x156>
 8008cf8:	9207      	str	r2, [sp, #28]
 8008cfa:	e014      	b.n	8008d26 <_vfiprintf_r+0x156>
 8008cfc:	eba0 0308 	sub.w	r3, r0, r8
 8008d00:	fa09 f303 	lsl.w	r3, r9, r3
 8008d04:	4313      	orrs	r3, r2
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	46a2      	mov	sl, r4
 8008d0a:	e7d2      	b.n	8008cb2 <_vfiprintf_r+0xe2>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	1d19      	adds	r1, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	9103      	str	r1, [sp, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bfbb      	ittet	lt
 8008d18:	425b      	neglt	r3, r3
 8008d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d1e:	9307      	strge	r3, [sp, #28]
 8008d20:	9307      	strlt	r3, [sp, #28]
 8008d22:	bfb8      	it	lt
 8008d24:	9204      	strlt	r2, [sp, #16]
 8008d26:	7823      	ldrb	r3, [r4, #0]
 8008d28:	2b2e      	cmp	r3, #46	; 0x2e
 8008d2a:	d10c      	bne.n	8008d46 <_vfiprintf_r+0x176>
 8008d2c:	7863      	ldrb	r3, [r4, #1]
 8008d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d30:	d135      	bne.n	8008d9e <_vfiprintf_r+0x1ce>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	9203      	str	r2, [sp, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bfb8      	it	lt
 8008d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d42:	3402      	adds	r4, #2
 8008d44:	9305      	str	r3, [sp, #20]
 8008d46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e2c <_vfiprintf_r+0x25c>
 8008d4a:	7821      	ldrb	r1, [r4, #0]
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	4650      	mov	r0, sl
 8008d50:	f7f7 fa66 	bl	8000220 <memchr>
 8008d54:	b140      	cbz	r0, 8008d68 <_vfiprintf_r+0x198>
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	eba0 000a 	sub.w	r0, r0, sl
 8008d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	4303      	orrs	r3, r0
 8008d64:	3401      	adds	r4, #1
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6c:	482c      	ldr	r0, [pc, #176]	; (8008e20 <_vfiprintf_r+0x250>)
 8008d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d72:	2206      	movs	r2, #6
 8008d74:	f7f7 fa54 	bl	8000220 <memchr>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d03f      	beq.n	8008dfc <_vfiprintf_r+0x22c>
 8008d7c:	4b29      	ldr	r3, [pc, #164]	; (8008e24 <_vfiprintf_r+0x254>)
 8008d7e:	bb1b      	cbnz	r3, 8008dc8 <_vfiprintf_r+0x1f8>
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	3307      	adds	r3, #7
 8008d84:	f023 0307 	bic.w	r3, r3, #7
 8008d88:	3308      	adds	r3, #8
 8008d8a:	9303      	str	r3, [sp, #12]
 8008d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8e:	443b      	add	r3, r7
 8008d90:	9309      	str	r3, [sp, #36]	; 0x24
 8008d92:	e767      	b.n	8008c64 <_vfiprintf_r+0x94>
 8008d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d98:	460c      	mov	r4, r1
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e7a5      	b.n	8008cea <_vfiprintf_r+0x11a>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	3401      	adds	r4, #1
 8008da2:	9305      	str	r3, [sp, #20]
 8008da4:	4619      	mov	r1, r3
 8008da6:	f04f 0c0a 	mov.w	ip, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db0:	3a30      	subs	r2, #48	; 0x30
 8008db2:	2a09      	cmp	r2, #9
 8008db4:	d903      	bls.n	8008dbe <_vfiprintf_r+0x1ee>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0c5      	beq.n	8008d46 <_vfiprintf_r+0x176>
 8008dba:	9105      	str	r1, [sp, #20]
 8008dbc:	e7c3      	b.n	8008d46 <_vfiprintf_r+0x176>
 8008dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e7f0      	b.n	8008daa <_vfiprintf_r+0x1da>
 8008dc8:	ab03      	add	r3, sp, #12
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	462a      	mov	r2, r5
 8008dce:	4b16      	ldr	r3, [pc, #88]	; (8008e28 <_vfiprintf_r+0x258>)
 8008dd0:	a904      	add	r1, sp, #16
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7fc f83a 	bl	8004e4c <_printf_float>
 8008dd8:	4607      	mov	r7, r0
 8008dda:	1c78      	adds	r0, r7, #1
 8008ddc:	d1d6      	bne.n	8008d8c <_vfiprintf_r+0x1bc>
 8008dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de0:	07d9      	lsls	r1, r3, #31
 8008de2:	d405      	bmi.n	8008df0 <_vfiprintf_r+0x220>
 8008de4:	89ab      	ldrh	r3, [r5, #12]
 8008de6:	059a      	lsls	r2, r3, #22
 8008de8:	d402      	bmi.n	8008df0 <_vfiprintf_r+0x220>
 8008dea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dec:	f000 faa1 	bl	8009332 <__retarget_lock_release_recursive>
 8008df0:	89ab      	ldrh	r3, [r5, #12]
 8008df2:	065b      	lsls	r3, r3, #25
 8008df4:	f53f af12 	bmi.w	8008c1c <_vfiprintf_r+0x4c>
 8008df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dfa:	e711      	b.n	8008c20 <_vfiprintf_r+0x50>
 8008dfc:	ab03      	add	r3, sp, #12
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	462a      	mov	r2, r5
 8008e02:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <_vfiprintf_r+0x258>)
 8008e04:	a904      	add	r1, sp, #16
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7fc fac4 	bl	8005394 <_printf_i>
 8008e0c:	e7e4      	b.n	8008dd8 <_vfiprintf_r+0x208>
 8008e0e:	bf00      	nop
 8008e10:	08009b74 	.word	0x08009b74
 8008e14:	08009b94 	.word	0x08009b94
 8008e18:	08009b54 	.word	0x08009b54
 8008e1c:	08009b04 	.word	0x08009b04
 8008e20:	08009b0e 	.word	0x08009b0e
 8008e24:	08004e4d 	.word	0x08004e4d
 8008e28:	08008bad 	.word	0x08008bad
 8008e2c:	08009b0a 	.word	0x08009b0a

08008e30 <__swbuf_r>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	460e      	mov	r6, r1
 8008e34:	4614      	mov	r4, r2
 8008e36:	4605      	mov	r5, r0
 8008e38:	b118      	cbz	r0, 8008e42 <__swbuf_r+0x12>
 8008e3a:	6983      	ldr	r3, [r0, #24]
 8008e3c:	b90b      	cbnz	r3, 8008e42 <__swbuf_r+0x12>
 8008e3e:	f000 f9d9 	bl	80091f4 <__sinit>
 8008e42:	4b21      	ldr	r3, [pc, #132]	; (8008ec8 <__swbuf_r+0x98>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d12b      	bne.n	8008ea0 <__swbuf_r+0x70>
 8008e48:	686c      	ldr	r4, [r5, #4]
 8008e4a:	69a3      	ldr	r3, [r4, #24]
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	071a      	lsls	r2, r3, #28
 8008e52:	d52f      	bpl.n	8008eb4 <__swbuf_r+0x84>
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	b36b      	cbz	r3, 8008eb4 <__swbuf_r+0x84>
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	1ac0      	subs	r0, r0, r3
 8008e5e:	6963      	ldr	r3, [r4, #20]
 8008e60:	b2f6      	uxtb	r6, r6
 8008e62:	4283      	cmp	r3, r0
 8008e64:	4637      	mov	r7, r6
 8008e66:	dc04      	bgt.n	8008e72 <__swbuf_r+0x42>
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f92e 	bl	80090cc <_fflush_r>
 8008e70:	bb30      	cbnz	r0, 8008ec0 <__swbuf_r+0x90>
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	60a3      	str	r3, [r4, #8]
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	701e      	strb	r6, [r3, #0]
 8008e80:	6963      	ldr	r3, [r4, #20]
 8008e82:	3001      	adds	r0, #1
 8008e84:	4283      	cmp	r3, r0
 8008e86:	d004      	beq.n	8008e92 <__swbuf_r+0x62>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	07db      	lsls	r3, r3, #31
 8008e8c:	d506      	bpl.n	8008e9c <__swbuf_r+0x6c>
 8008e8e:	2e0a      	cmp	r6, #10
 8008e90:	d104      	bne.n	8008e9c <__swbuf_r+0x6c>
 8008e92:	4621      	mov	r1, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	f000 f919 	bl	80090cc <_fflush_r>
 8008e9a:	b988      	cbnz	r0, 8008ec0 <__swbuf_r+0x90>
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <__swbuf_r+0x9c>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d101      	bne.n	8008eaa <__swbuf_r+0x7a>
 8008ea6:	68ac      	ldr	r4, [r5, #8]
 8008ea8:	e7cf      	b.n	8008e4a <__swbuf_r+0x1a>
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <__swbuf_r+0xa0>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	bf08      	it	eq
 8008eb0:	68ec      	ldreq	r4, [r5, #12]
 8008eb2:	e7ca      	b.n	8008e4a <__swbuf_r+0x1a>
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 f80c 	bl	8008ed4 <__swsetup_r>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d0cb      	beq.n	8008e58 <__swbuf_r+0x28>
 8008ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ec4:	e7ea      	b.n	8008e9c <__swbuf_r+0x6c>
 8008ec6:	bf00      	nop
 8008ec8:	08009b74 	.word	0x08009b74
 8008ecc:	08009b94 	.word	0x08009b94
 8008ed0:	08009b54 	.word	0x08009b54

08008ed4 <__swsetup_r>:
 8008ed4:	4b32      	ldr	r3, [pc, #200]	; (8008fa0 <__swsetup_r+0xcc>)
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	681d      	ldr	r5, [r3, #0]
 8008eda:	4606      	mov	r6, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	b125      	cbz	r5, 8008eea <__swsetup_r+0x16>
 8008ee0:	69ab      	ldr	r3, [r5, #24]
 8008ee2:	b913      	cbnz	r3, 8008eea <__swsetup_r+0x16>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 f985 	bl	80091f4 <__sinit>
 8008eea:	4b2e      	ldr	r3, [pc, #184]	; (8008fa4 <__swsetup_r+0xd0>)
 8008eec:	429c      	cmp	r4, r3
 8008eee:	d10f      	bne.n	8008f10 <__swsetup_r+0x3c>
 8008ef0:	686c      	ldr	r4, [r5, #4]
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef8:	0719      	lsls	r1, r3, #28
 8008efa:	d42c      	bmi.n	8008f56 <__swsetup_r+0x82>
 8008efc:	06dd      	lsls	r5, r3, #27
 8008efe:	d411      	bmi.n	8008f24 <__swsetup_r+0x50>
 8008f00:	2309      	movs	r3, #9
 8008f02:	6033      	str	r3, [r6, #0]
 8008f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	e03e      	b.n	8008f8e <__swsetup_r+0xba>
 8008f10:	4b25      	ldr	r3, [pc, #148]	; (8008fa8 <__swsetup_r+0xd4>)
 8008f12:	429c      	cmp	r4, r3
 8008f14:	d101      	bne.n	8008f1a <__swsetup_r+0x46>
 8008f16:	68ac      	ldr	r4, [r5, #8]
 8008f18:	e7eb      	b.n	8008ef2 <__swsetup_r+0x1e>
 8008f1a:	4b24      	ldr	r3, [pc, #144]	; (8008fac <__swsetup_r+0xd8>)
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	bf08      	it	eq
 8008f20:	68ec      	ldreq	r4, [r5, #12]
 8008f22:	e7e6      	b.n	8008ef2 <__swsetup_r+0x1e>
 8008f24:	0758      	lsls	r0, r3, #29
 8008f26:	d512      	bpl.n	8008f4e <__swsetup_r+0x7a>
 8008f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f2a:	b141      	cbz	r1, 8008f3e <__swsetup_r+0x6a>
 8008f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f30:	4299      	cmp	r1, r3
 8008f32:	d002      	beq.n	8008f3a <__swsetup_r+0x66>
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff fb25 	bl	8008584 <_free_r>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	2300      	movs	r3, #0
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0308 	orr.w	r3, r3, #8
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	b94b      	cbnz	r3, 8008f6e <__swsetup_r+0x9a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f64:	d003      	beq.n	8008f6e <__swsetup_r+0x9a>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 fa09 	bl	8009380 <__smakebuf_r>
 8008f6e:	89a0      	ldrh	r0, [r4, #12]
 8008f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f74:	f010 0301 	ands.w	r3, r0, #1
 8008f78:	d00a      	beq.n	8008f90 <__swsetup_r+0xbc>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	6963      	ldr	r3, [r4, #20]
 8008f80:	425b      	negs	r3, r3
 8008f82:	61a3      	str	r3, [r4, #24]
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	b943      	cbnz	r3, 8008f9a <__swsetup_r+0xc6>
 8008f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f8c:	d1ba      	bne.n	8008f04 <__swsetup_r+0x30>
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	0781      	lsls	r1, r0, #30
 8008f92:	bf58      	it	pl
 8008f94:	6963      	ldrpl	r3, [r4, #20]
 8008f96:	60a3      	str	r3, [r4, #8]
 8008f98:	e7f4      	b.n	8008f84 <__swsetup_r+0xb0>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7f7      	b.n	8008f8e <__swsetup_r+0xba>
 8008f9e:	bf00      	nop
 8008fa0:	2000000c 	.word	0x2000000c
 8008fa4:	08009b74 	.word	0x08009b74
 8008fa8:	08009b94 	.word	0x08009b94
 8008fac:	08009b54 	.word	0x08009b54

08008fb0 <abort>:
 8008fb0:	b508      	push	{r3, lr}
 8008fb2:	2006      	movs	r0, #6
 8008fb4:	f000 fa54 	bl	8009460 <raise>
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f7f9 f895 	bl	80020e8 <_exit>
	...

08008fc0 <__sflush_r>:
 8008fc0:	898a      	ldrh	r2, [r1, #12]
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	0710      	lsls	r0, r2, #28
 8008fca:	460c      	mov	r4, r1
 8008fcc:	d458      	bmi.n	8009080 <__sflush_r+0xc0>
 8008fce:	684b      	ldr	r3, [r1, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	dc05      	bgt.n	8008fe0 <__sflush_r+0x20>
 8008fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dc02      	bgt.n	8008fe0 <__sflush_r+0x20>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	d0f9      	beq.n	8008fda <__sflush_r+0x1a>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fec:	682f      	ldr	r7, [r5, #0]
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	d032      	beq.n	8009058 <__sflush_r+0x98>
 8008ff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	075a      	lsls	r2, r3, #29
 8008ff8:	d505      	bpl.n	8009006 <__sflush_r+0x46>
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	1ac0      	subs	r0, r0, r3
 8008ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009000:	b10b      	cbz	r3, 8009006 <__sflush_r+0x46>
 8009002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009004:	1ac0      	subs	r0, r0, r3
 8009006:	2300      	movs	r3, #0
 8009008:	4602      	mov	r2, r0
 800900a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800900c:	6a21      	ldr	r1, [r4, #32]
 800900e:	4628      	mov	r0, r5
 8009010:	47b0      	blx	r6
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	d106      	bne.n	8009026 <__sflush_r+0x66>
 8009018:	6829      	ldr	r1, [r5, #0]
 800901a:	291d      	cmp	r1, #29
 800901c:	d82c      	bhi.n	8009078 <__sflush_r+0xb8>
 800901e:	4a2a      	ldr	r2, [pc, #168]	; (80090c8 <__sflush_r+0x108>)
 8009020:	40ca      	lsrs	r2, r1
 8009022:	07d6      	lsls	r6, r2, #31
 8009024:	d528      	bpl.n	8009078 <__sflush_r+0xb8>
 8009026:	2200      	movs	r2, #0
 8009028:	6062      	str	r2, [r4, #4]
 800902a:	04d9      	lsls	r1, r3, #19
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	6022      	str	r2, [r4, #0]
 8009030:	d504      	bpl.n	800903c <__sflush_r+0x7c>
 8009032:	1c42      	adds	r2, r0, #1
 8009034:	d101      	bne.n	800903a <__sflush_r+0x7a>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b903      	cbnz	r3, 800903c <__sflush_r+0x7c>
 800903a:	6560      	str	r0, [r4, #84]	; 0x54
 800903c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800903e:	602f      	str	r7, [r5, #0]
 8009040:	2900      	cmp	r1, #0
 8009042:	d0ca      	beq.n	8008fda <__sflush_r+0x1a>
 8009044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009048:	4299      	cmp	r1, r3
 800904a:	d002      	beq.n	8009052 <__sflush_r+0x92>
 800904c:	4628      	mov	r0, r5
 800904e:	f7ff fa99 	bl	8008584 <_free_r>
 8009052:	2000      	movs	r0, #0
 8009054:	6360      	str	r0, [r4, #52]	; 0x34
 8009056:	e7c1      	b.n	8008fdc <__sflush_r+0x1c>
 8009058:	6a21      	ldr	r1, [r4, #32]
 800905a:	2301      	movs	r3, #1
 800905c:	4628      	mov	r0, r5
 800905e:	47b0      	blx	r6
 8009060:	1c41      	adds	r1, r0, #1
 8009062:	d1c7      	bne.n	8008ff4 <__sflush_r+0x34>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0c4      	beq.n	8008ff4 <__sflush_r+0x34>
 800906a:	2b1d      	cmp	r3, #29
 800906c:	d001      	beq.n	8009072 <__sflush_r+0xb2>
 800906e:	2b16      	cmp	r3, #22
 8009070:	d101      	bne.n	8009076 <__sflush_r+0xb6>
 8009072:	602f      	str	r7, [r5, #0]
 8009074:	e7b1      	b.n	8008fda <__sflush_r+0x1a>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	e7ad      	b.n	8008fdc <__sflush_r+0x1c>
 8009080:	690f      	ldr	r7, [r1, #16]
 8009082:	2f00      	cmp	r7, #0
 8009084:	d0a9      	beq.n	8008fda <__sflush_r+0x1a>
 8009086:	0793      	lsls	r3, r2, #30
 8009088:	680e      	ldr	r6, [r1, #0]
 800908a:	bf08      	it	eq
 800908c:	694b      	ldreq	r3, [r1, #20]
 800908e:	600f      	str	r7, [r1, #0]
 8009090:	bf18      	it	ne
 8009092:	2300      	movne	r3, #0
 8009094:	eba6 0807 	sub.w	r8, r6, r7
 8009098:	608b      	str	r3, [r1, #8]
 800909a:	f1b8 0f00 	cmp.w	r8, #0
 800909e:	dd9c      	ble.n	8008fda <__sflush_r+0x1a>
 80090a0:	6a21      	ldr	r1, [r4, #32]
 80090a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090a4:	4643      	mov	r3, r8
 80090a6:	463a      	mov	r2, r7
 80090a8:	4628      	mov	r0, r5
 80090aa:	47b0      	blx	r6
 80090ac:	2800      	cmp	r0, #0
 80090ae:	dc06      	bgt.n	80090be <__sflush_r+0xfe>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e78e      	b.n	8008fdc <__sflush_r+0x1c>
 80090be:	4407      	add	r7, r0
 80090c0:	eba8 0800 	sub.w	r8, r8, r0
 80090c4:	e7e9      	b.n	800909a <__sflush_r+0xda>
 80090c6:	bf00      	nop
 80090c8:	20400001 	.word	0x20400001

080090cc <_fflush_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	690b      	ldr	r3, [r1, #16]
 80090d0:	4605      	mov	r5, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	b913      	cbnz	r3, 80090dc <_fflush_r+0x10>
 80090d6:	2500      	movs	r5, #0
 80090d8:	4628      	mov	r0, r5
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	b118      	cbz	r0, 80090e6 <_fflush_r+0x1a>
 80090de:	6983      	ldr	r3, [r0, #24]
 80090e0:	b90b      	cbnz	r3, 80090e6 <_fflush_r+0x1a>
 80090e2:	f000 f887 	bl	80091f4 <__sinit>
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <_fflush_r+0x6c>)
 80090e8:	429c      	cmp	r4, r3
 80090ea:	d11b      	bne.n	8009124 <_fflush_r+0x58>
 80090ec:	686c      	ldr	r4, [r5, #4]
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0ef      	beq.n	80090d6 <_fflush_r+0xa>
 80090f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090f8:	07d0      	lsls	r0, r2, #31
 80090fa:	d404      	bmi.n	8009106 <_fflush_r+0x3a>
 80090fc:	0599      	lsls	r1, r3, #22
 80090fe:	d402      	bmi.n	8009106 <_fflush_r+0x3a>
 8009100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009102:	f000 f915 	bl	8009330 <__retarget_lock_acquire_recursive>
 8009106:	4628      	mov	r0, r5
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff ff59 	bl	8008fc0 <__sflush_r>
 800910e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009110:	07da      	lsls	r2, r3, #31
 8009112:	4605      	mov	r5, r0
 8009114:	d4e0      	bmi.n	80090d8 <_fflush_r+0xc>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	059b      	lsls	r3, r3, #22
 800911a:	d4dd      	bmi.n	80090d8 <_fflush_r+0xc>
 800911c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911e:	f000 f908 	bl	8009332 <__retarget_lock_release_recursive>
 8009122:	e7d9      	b.n	80090d8 <_fflush_r+0xc>
 8009124:	4b05      	ldr	r3, [pc, #20]	; (800913c <_fflush_r+0x70>)
 8009126:	429c      	cmp	r4, r3
 8009128:	d101      	bne.n	800912e <_fflush_r+0x62>
 800912a:	68ac      	ldr	r4, [r5, #8]
 800912c:	e7df      	b.n	80090ee <_fflush_r+0x22>
 800912e:	4b04      	ldr	r3, [pc, #16]	; (8009140 <_fflush_r+0x74>)
 8009130:	429c      	cmp	r4, r3
 8009132:	bf08      	it	eq
 8009134:	68ec      	ldreq	r4, [r5, #12]
 8009136:	e7da      	b.n	80090ee <_fflush_r+0x22>
 8009138:	08009b74 	.word	0x08009b74
 800913c:	08009b94 	.word	0x08009b94
 8009140:	08009b54 	.word	0x08009b54

08009144 <std>:
 8009144:	2300      	movs	r3, #0
 8009146:	b510      	push	{r4, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	e9c0 3300 	strd	r3, r3, [r0]
 800914e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009152:	6083      	str	r3, [r0, #8]
 8009154:	8181      	strh	r1, [r0, #12]
 8009156:	6643      	str	r3, [r0, #100]	; 0x64
 8009158:	81c2      	strh	r2, [r0, #14]
 800915a:	6183      	str	r3, [r0, #24]
 800915c:	4619      	mov	r1, r3
 800915e:	2208      	movs	r2, #8
 8009160:	305c      	adds	r0, #92	; 0x5c
 8009162:	f7fb fdcb 	bl	8004cfc <memset>
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <std+0x38>)
 8009168:	6263      	str	r3, [r4, #36]	; 0x24
 800916a:	4b05      	ldr	r3, [pc, #20]	; (8009180 <std+0x3c>)
 800916c:	62a3      	str	r3, [r4, #40]	; 0x28
 800916e:	4b05      	ldr	r3, [pc, #20]	; (8009184 <std+0x40>)
 8009170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009172:	4b05      	ldr	r3, [pc, #20]	; (8009188 <std+0x44>)
 8009174:	6224      	str	r4, [r4, #32]
 8009176:	6323      	str	r3, [r4, #48]	; 0x30
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	08009499 	.word	0x08009499
 8009180:	080094bb 	.word	0x080094bb
 8009184:	080094f3 	.word	0x080094f3
 8009188:	08009517 	.word	0x08009517

0800918c <_cleanup_r>:
 800918c:	4901      	ldr	r1, [pc, #4]	; (8009194 <_cleanup_r+0x8>)
 800918e:	f000 b8af 	b.w	80092f0 <_fwalk_reent>
 8009192:	bf00      	nop
 8009194:	080090cd 	.word	0x080090cd

08009198 <__sfmoreglue>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	2268      	movs	r2, #104	; 0x68
 800919c:	1e4d      	subs	r5, r1, #1
 800919e:	4355      	muls	r5, r2
 80091a0:	460e      	mov	r6, r1
 80091a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091a6:	f7ff fa59 	bl	800865c <_malloc_r>
 80091aa:	4604      	mov	r4, r0
 80091ac:	b140      	cbz	r0, 80091c0 <__sfmoreglue+0x28>
 80091ae:	2100      	movs	r1, #0
 80091b0:	e9c0 1600 	strd	r1, r6, [r0]
 80091b4:	300c      	adds	r0, #12
 80091b6:	60a0      	str	r0, [r4, #8]
 80091b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091bc:	f7fb fd9e 	bl	8004cfc <memset>
 80091c0:	4620      	mov	r0, r4
 80091c2:	bd70      	pop	{r4, r5, r6, pc}

080091c4 <__sfp_lock_acquire>:
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__sfp_lock_acquire+0x8>)
 80091c6:	f000 b8b3 	b.w	8009330 <__retarget_lock_acquire_recursive>
 80091ca:	bf00      	nop
 80091cc:	20000341 	.word	0x20000341

080091d0 <__sfp_lock_release>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__sfp_lock_release+0x8>)
 80091d2:	f000 b8ae 	b.w	8009332 <__retarget_lock_release_recursive>
 80091d6:	bf00      	nop
 80091d8:	20000341 	.word	0x20000341

080091dc <__sinit_lock_acquire>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__sinit_lock_acquire+0x8>)
 80091de:	f000 b8a7 	b.w	8009330 <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	20000342 	.word	0x20000342

080091e8 <__sinit_lock_release>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__sinit_lock_release+0x8>)
 80091ea:	f000 b8a2 	b.w	8009332 <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	20000342 	.word	0x20000342

080091f4 <__sinit>:
 80091f4:	b510      	push	{r4, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	f7ff fff0 	bl	80091dc <__sinit_lock_acquire>
 80091fc:	69a3      	ldr	r3, [r4, #24]
 80091fe:	b11b      	cbz	r3, 8009208 <__sinit+0x14>
 8009200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009204:	f7ff bff0 	b.w	80091e8 <__sinit_lock_release>
 8009208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800920c:	6523      	str	r3, [r4, #80]	; 0x50
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <__sinit+0x68>)
 8009210:	4a13      	ldr	r2, [pc, #76]	; (8009260 <__sinit+0x6c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	62a2      	str	r2, [r4, #40]	; 0x28
 8009216:	42a3      	cmp	r3, r4
 8009218:	bf04      	itt	eq
 800921a:	2301      	moveq	r3, #1
 800921c:	61a3      	streq	r3, [r4, #24]
 800921e:	4620      	mov	r0, r4
 8009220:	f000 f820 	bl	8009264 <__sfp>
 8009224:	6060      	str	r0, [r4, #4]
 8009226:	4620      	mov	r0, r4
 8009228:	f000 f81c 	bl	8009264 <__sfp>
 800922c:	60a0      	str	r0, [r4, #8]
 800922e:	4620      	mov	r0, r4
 8009230:	f000 f818 	bl	8009264 <__sfp>
 8009234:	2200      	movs	r2, #0
 8009236:	60e0      	str	r0, [r4, #12]
 8009238:	2104      	movs	r1, #4
 800923a:	6860      	ldr	r0, [r4, #4]
 800923c:	f7ff ff82 	bl	8009144 <std>
 8009240:	68a0      	ldr	r0, [r4, #8]
 8009242:	2201      	movs	r2, #1
 8009244:	2109      	movs	r1, #9
 8009246:	f7ff ff7d 	bl	8009144 <std>
 800924a:	68e0      	ldr	r0, [r4, #12]
 800924c:	2202      	movs	r2, #2
 800924e:	2112      	movs	r1, #18
 8009250:	f7ff ff78 	bl	8009144 <std>
 8009254:	2301      	movs	r3, #1
 8009256:	61a3      	str	r3, [r4, #24]
 8009258:	e7d2      	b.n	8009200 <__sinit+0xc>
 800925a:	bf00      	nop
 800925c:	0800970c 	.word	0x0800970c
 8009260:	0800918d 	.word	0x0800918d

08009264 <__sfp>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	4607      	mov	r7, r0
 8009268:	f7ff ffac 	bl	80091c4 <__sfp_lock_acquire>
 800926c:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <__sfp+0x84>)
 800926e:	681e      	ldr	r6, [r3, #0]
 8009270:	69b3      	ldr	r3, [r6, #24]
 8009272:	b913      	cbnz	r3, 800927a <__sfp+0x16>
 8009274:	4630      	mov	r0, r6
 8009276:	f7ff ffbd 	bl	80091f4 <__sinit>
 800927a:	3648      	adds	r6, #72	; 0x48
 800927c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009280:	3b01      	subs	r3, #1
 8009282:	d503      	bpl.n	800928c <__sfp+0x28>
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	b30b      	cbz	r3, 80092cc <__sfp+0x68>
 8009288:	6836      	ldr	r6, [r6, #0]
 800928a:	e7f7      	b.n	800927c <__sfp+0x18>
 800928c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009290:	b9d5      	cbnz	r5, 80092c8 <__sfp+0x64>
 8009292:	4b16      	ldr	r3, [pc, #88]	; (80092ec <__sfp+0x88>)
 8009294:	60e3      	str	r3, [r4, #12]
 8009296:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800929a:	6665      	str	r5, [r4, #100]	; 0x64
 800929c:	f000 f847 	bl	800932e <__retarget_lock_init_recursive>
 80092a0:	f7ff ff96 	bl	80091d0 <__sfp_lock_release>
 80092a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092ac:	6025      	str	r5, [r4, #0]
 80092ae:	61a5      	str	r5, [r4, #24]
 80092b0:	2208      	movs	r2, #8
 80092b2:	4629      	mov	r1, r5
 80092b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092b8:	f7fb fd20 	bl	8004cfc <memset>
 80092bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092c4:	4620      	mov	r0, r4
 80092c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c8:	3468      	adds	r4, #104	; 0x68
 80092ca:	e7d9      	b.n	8009280 <__sfp+0x1c>
 80092cc:	2104      	movs	r1, #4
 80092ce:	4638      	mov	r0, r7
 80092d0:	f7ff ff62 	bl	8009198 <__sfmoreglue>
 80092d4:	4604      	mov	r4, r0
 80092d6:	6030      	str	r0, [r6, #0]
 80092d8:	2800      	cmp	r0, #0
 80092da:	d1d5      	bne.n	8009288 <__sfp+0x24>
 80092dc:	f7ff ff78 	bl	80091d0 <__sfp_lock_release>
 80092e0:	230c      	movs	r3, #12
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	e7ee      	b.n	80092c4 <__sfp+0x60>
 80092e6:	bf00      	nop
 80092e8:	0800970c 	.word	0x0800970c
 80092ec:	ffff0001 	.word	0xffff0001

080092f0 <_fwalk_reent>:
 80092f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f4:	4606      	mov	r6, r0
 80092f6:	4688      	mov	r8, r1
 80092f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092fc:	2700      	movs	r7, #0
 80092fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009302:	f1b9 0901 	subs.w	r9, r9, #1
 8009306:	d505      	bpl.n	8009314 <_fwalk_reent+0x24>
 8009308:	6824      	ldr	r4, [r4, #0]
 800930a:	2c00      	cmp	r4, #0
 800930c:	d1f7      	bne.n	80092fe <_fwalk_reent+0xe>
 800930e:	4638      	mov	r0, r7
 8009310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009314:	89ab      	ldrh	r3, [r5, #12]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d907      	bls.n	800932a <_fwalk_reent+0x3a>
 800931a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800931e:	3301      	adds	r3, #1
 8009320:	d003      	beq.n	800932a <_fwalk_reent+0x3a>
 8009322:	4629      	mov	r1, r5
 8009324:	4630      	mov	r0, r6
 8009326:	47c0      	blx	r8
 8009328:	4307      	orrs	r7, r0
 800932a:	3568      	adds	r5, #104	; 0x68
 800932c:	e7e9      	b.n	8009302 <_fwalk_reent+0x12>

0800932e <__retarget_lock_init_recursive>:
 800932e:	4770      	bx	lr

08009330 <__retarget_lock_acquire_recursive>:
 8009330:	4770      	bx	lr

08009332 <__retarget_lock_release_recursive>:
 8009332:	4770      	bx	lr

08009334 <__swhatbuf_r>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	460e      	mov	r6, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	2900      	cmp	r1, #0
 800933e:	b096      	sub	sp, #88	; 0x58
 8009340:	4614      	mov	r4, r2
 8009342:	461d      	mov	r5, r3
 8009344:	da08      	bge.n	8009358 <__swhatbuf_r+0x24>
 8009346:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	061a      	lsls	r2, r3, #24
 8009350:	d410      	bmi.n	8009374 <__swhatbuf_r+0x40>
 8009352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009356:	e00e      	b.n	8009376 <__swhatbuf_r+0x42>
 8009358:	466a      	mov	r2, sp
 800935a:	f000 f903 	bl	8009564 <_fstat_r>
 800935e:	2800      	cmp	r0, #0
 8009360:	dbf1      	blt.n	8009346 <__swhatbuf_r+0x12>
 8009362:	9a01      	ldr	r2, [sp, #4]
 8009364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800936c:	425a      	negs	r2, r3
 800936e:	415a      	adcs	r2, r3
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	e7ee      	b.n	8009352 <__swhatbuf_r+0x1e>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	2000      	movs	r0, #0
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	b016      	add	sp, #88	; 0x58
 800937c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009380 <__smakebuf_r>:
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009384:	079d      	lsls	r5, r3, #30
 8009386:	4606      	mov	r6, r0
 8009388:	460c      	mov	r4, r1
 800938a:	d507      	bpl.n	800939c <__smakebuf_r+0x1c>
 800938c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	2301      	movs	r3, #1
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	b002      	add	sp, #8
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	ab01      	add	r3, sp, #4
 800939e:	466a      	mov	r2, sp
 80093a0:	f7ff ffc8 	bl	8009334 <__swhatbuf_r>
 80093a4:	9900      	ldr	r1, [sp, #0]
 80093a6:	4605      	mov	r5, r0
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7ff f957 	bl	800865c <_malloc_r>
 80093ae:	b948      	cbnz	r0, 80093c4 <__smakebuf_r+0x44>
 80093b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b4:	059a      	lsls	r2, r3, #22
 80093b6:	d4ef      	bmi.n	8009398 <__smakebuf_r+0x18>
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	f043 0302 	orr.w	r3, r3, #2
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	e7e3      	b.n	800938c <__smakebuf_r+0xc>
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <__smakebuf_r+0x7c>)
 80093c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	6020      	str	r0, [r4, #0]
 80093cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	9b00      	ldr	r3, [sp, #0]
 80093d4:	6163      	str	r3, [r4, #20]
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	6120      	str	r0, [r4, #16]
 80093da:	b15b      	cbz	r3, 80093f4 <__smakebuf_r+0x74>
 80093dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 f8d1 	bl	8009588 <_isatty_r>
 80093e6:	b128      	cbz	r0, 80093f4 <__smakebuf_r+0x74>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	89a0      	ldrh	r0, [r4, #12]
 80093f6:	4305      	orrs	r5, r0
 80093f8:	81a5      	strh	r5, [r4, #12]
 80093fa:	e7cd      	b.n	8009398 <__smakebuf_r+0x18>
 80093fc:	0800918d 	.word	0x0800918d

08009400 <_malloc_usable_size_r>:
 8009400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009404:	1f18      	subs	r0, r3, #4
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfbc      	itt	lt
 800940a:	580b      	ldrlt	r3, [r1, r0]
 800940c:	18c0      	addlt	r0, r0, r3
 800940e:	4770      	bx	lr

08009410 <_raise_r>:
 8009410:	291f      	cmp	r1, #31
 8009412:	b538      	push	{r3, r4, r5, lr}
 8009414:	4604      	mov	r4, r0
 8009416:	460d      	mov	r5, r1
 8009418:	d904      	bls.n	8009424 <_raise_r+0x14>
 800941a:	2316      	movs	r3, #22
 800941c:	6003      	str	r3, [r0, #0]
 800941e:	f04f 30ff 	mov.w	r0, #4294967295
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009426:	b112      	cbz	r2, 800942e <_raise_r+0x1e>
 8009428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800942c:	b94b      	cbnz	r3, 8009442 <_raise_r+0x32>
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f830 	bl	8009494 <_getpid_r>
 8009434:	462a      	mov	r2, r5
 8009436:	4601      	mov	r1, r0
 8009438:	4620      	mov	r0, r4
 800943a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800943e:	f000 b817 	b.w	8009470 <_kill_r>
 8009442:	2b01      	cmp	r3, #1
 8009444:	d00a      	beq.n	800945c <_raise_r+0x4c>
 8009446:	1c59      	adds	r1, r3, #1
 8009448:	d103      	bne.n	8009452 <_raise_r+0x42>
 800944a:	2316      	movs	r3, #22
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	2001      	movs	r0, #1
 8009450:	e7e7      	b.n	8009422 <_raise_r+0x12>
 8009452:	2400      	movs	r4, #0
 8009454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009458:	4628      	mov	r0, r5
 800945a:	4798      	blx	r3
 800945c:	2000      	movs	r0, #0
 800945e:	e7e0      	b.n	8009422 <_raise_r+0x12>

08009460 <raise>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <raise+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f7ff bfd3 	b.w	8009410 <_raise_r>
 800946a:	bf00      	nop
 800946c:	2000000c 	.word	0x2000000c

08009470 <_kill_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d07      	ldr	r5, [pc, #28]	; (8009490 <_kill_r+0x20>)
 8009474:	2300      	movs	r3, #0
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	4611      	mov	r1, r2
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	f7f8 fe23 	bl	80020c8 <_kill>
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	d102      	bne.n	800948c <_kill_r+0x1c>
 8009486:	682b      	ldr	r3, [r5, #0]
 8009488:	b103      	cbz	r3, 800948c <_kill_r+0x1c>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	bd38      	pop	{r3, r4, r5, pc}
 800948e:	bf00      	nop
 8009490:	2000033c 	.word	0x2000033c

08009494 <_getpid_r>:
 8009494:	f7f8 be10 	b.w	80020b8 <_getpid>

08009498 <__sread>:
 8009498:	b510      	push	{r4, lr}
 800949a:	460c      	mov	r4, r1
 800949c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a0:	f000 f894 	bl	80095cc <_read_r>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	bfab      	itete	ge
 80094a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094aa:	89a3      	ldrhlt	r3, [r4, #12]
 80094ac:	181b      	addge	r3, r3, r0
 80094ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094b2:	bfac      	ite	ge
 80094b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80094b6:	81a3      	strhlt	r3, [r4, #12]
 80094b8:	bd10      	pop	{r4, pc}

080094ba <__swrite>:
 80094ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094be:	461f      	mov	r7, r3
 80094c0:	898b      	ldrh	r3, [r1, #12]
 80094c2:	05db      	lsls	r3, r3, #23
 80094c4:	4605      	mov	r5, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	4616      	mov	r6, r2
 80094ca:	d505      	bpl.n	80094d8 <__swrite+0x1e>
 80094cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d0:	2302      	movs	r3, #2
 80094d2:	2200      	movs	r2, #0
 80094d4:	f000 f868 	bl	80095a8 <_lseek_r>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	4632      	mov	r2, r6
 80094e6:	463b      	mov	r3, r7
 80094e8:	4628      	mov	r0, r5
 80094ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ee:	f000 b817 	b.w	8009520 <_write_r>

080094f2 <__sseek>:
 80094f2:	b510      	push	{r4, lr}
 80094f4:	460c      	mov	r4, r1
 80094f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fa:	f000 f855 	bl	80095a8 <_lseek_r>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	bf15      	itete	ne
 8009504:	6560      	strne	r0, [r4, #84]	; 0x54
 8009506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800950a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800950e:	81a3      	strheq	r3, [r4, #12]
 8009510:	bf18      	it	ne
 8009512:	81a3      	strhne	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__sclose>:
 8009516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951a:	f000 b813 	b.w	8009544 <_close_r>
	...

08009520 <_write_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	; (8009540 <_write_r+0x20>)
 8009524:	4604      	mov	r4, r0
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	2200      	movs	r2, #0
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f8 fe01 	bl	8002136 <_write>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_write_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_write_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	2000033c 	.word	0x2000033c

08009544 <_close_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d06      	ldr	r5, [pc, #24]	; (8009560 <_close_r+0x1c>)
 8009548:	2300      	movs	r3, #0
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	f7f8 fe0d 	bl	800216e <_close>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_close_r+0x1a>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_close_r+0x1a>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	2000033c 	.word	0x2000033c

08009564 <_fstat_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	; (8009584 <_fstat_r+0x20>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	4611      	mov	r1, r2
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	f7f8 fe08 	bl	8002186 <_fstat>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d102      	bne.n	8009580 <_fstat_r+0x1c>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	b103      	cbz	r3, 8009580 <_fstat_r+0x1c>
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	2000033c 	.word	0x2000033c

08009588 <_isatty_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	; (80095a4 <_isatty_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f8 fe07 	bl	80021a6 <_isatty>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_isatty_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_isatty_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	2000033c 	.word	0x2000033c

080095a8 <_lseek_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d07      	ldr	r5, [pc, #28]	; (80095c8 <_lseek_r+0x20>)
 80095ac:	4604      	mov	r4, r0
 80095ae:	4608      	mov	r0, r1
 80095b0:	4611      	mov	r1, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	602a      	str	r2, [r5, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f7f8 fe00 	bl	80021bc <_lseek>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_lseek_r+0x1e>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_lseek_r+0x1e>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	2000033c 	.word	0x2000033c

080095cc <_read_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	; (80095ec <_read_r+0x20>)
 80095d0:	4604      	mov	r4, r0
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7f8 fd8e 	bl	80020fc <_read>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_read_r+0x1e>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_read_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	2000033c 	.word	0x2000033c

080095f0 <_init>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr

080095fc <_fini>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr
